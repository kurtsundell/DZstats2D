function varargout = DZstats2D_0_4(varargin)
gui_Singleton = 1;
gui_State = struct('gui_Name', mfilename,'gui_Singleton',  gui_Singleton,'gui_OpeningFcn', @DZstats2D_0_4_OpeningFcn,'gui_OutputFcn',  @DZstats2D_0_4_OutputFcn, ...
                   'gui_LayoutFcn',  [] ,'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end

function DZstats2D_0_4_OpeningFcn(hObject, eventdata, H, varargin)
H.output = hObject;
global botev
global bandwidth_x
global bandwidth_y
global bandwidth_opt
H.dataloaded = 0;
H.TYPE = 1;
set(H.colorramp,'Visible','off')
set(H.perfectfit,'Visible','off')
set(H.worstfit,'Visible','off')
set(H.setbandwidth,'Enable','on')
set(H.printkern,'Enable','off')
set(H.CF_rel,'Value',1)

guidata(hObject, H);

function varargout = DZstats2D_0_4_OutputFcn(hObject, eventdata, H) 
varargout{1} = H.output;

function uploaddata_Callback(hObject, eventdata, H)
[filename pathname] = uigetfile({'*'},'File Selector'); %load the supplemental file with zircon age eHfT data

if ispc == 1
	fullpathname = char(strcat(pathname, '\', filename));
end
if ismac == 1
	fullpathname = char(strcat(pathname, '/', filename));
end

[numbers text1, data] = xlsread(fullpathname);
numbers = num2cell(numbers);

% Filter out any data that are not pairs of numbers
for i = 1:size(numbers,1)
	for j = 1:size(numbers,2)
		if cellfun('isempty', numbers(i,j)) == 0
			if cellfun(@isnan, numbers(i,j)) == 1
				numbers(i,j) = {[]};
			end	
		end
	end
end

% pull the names from the headers
for i = 1:(size(data,2)+1)/2
	Name(i,1) = data(1,i*2-1);
end

data_tmp = numbers(1:end,:); %use temporary variable
N = size(data_tmp,2)/2; % figure out how many samples

H.numbers = numbers;
H.data_tmp = data_tmp;
H.text1 = text1;
H.Name = Name;
H.N = N;
H.dataloaded = 1;
guidata(hObject, H);

build_Callback(hObject, eventdata, H)

function build_Callback(hObject, eventdata, H)

%f = waitbar(0, 'Calculating densities! Please wait...');
fig = uifigure;
set(fig, 'Position', [800         500         400         75])
d = uiprogressdlg(fig,'Message','Calculating densities! Please wait...');

numbers = H.numbers;
data_tmp = H.data_tmp;
Name = H.Name;
N = H.N;
text1 = H.text1;

if get(H.optimized,'Value') == 1
	botev = 1;
	set(H.printkern,'Enable','on')
end
if get(H.setbandwidth,'Value') == 1
	botev = 0;
	bandwidth_x = str2double(get(H.setX,'String'));
	bandwidth_y = str2double(get(H.setY,'String'));
	set(H.printkern,'Enable','off')
end

gridspc = str2num(get(H.gridspacing,'String'));

% pull the names from the headers
for i = 1:(size(data_tmp,2)+1)/2
	Name(i,1) = text1(1,i*2-1);
end

data_tmp = numbers(1:end,:); %use temporary variable
N = size(data_tmp,2)/2; % figure out how many samples

% Filter out any data not in the range set above
for k = 1:N
	for i = 1:length(data_tmp(:,1))
		if cellfun('isempty', data_tmp(i,k*2-1)) == 0 && cellfun('isempty', data_tmp(i,k*2)) == 0 
			if cell2num(data_tmp(i,k*2-1)) >= str2double(get(H.xmin,'String')) && cell2num(data_tmp(i,k*2-1)) <= str2double(get(H.xmax,'String')) && ...
					cell2num(data_tmp(i,k*2)) >= str2double(get(H.ymin,'String')) && cell2num(data_tmp(i,k*2)) <= str2double(get(H.ymax,'String'))
				data1(i,k*2-1:k*2) = cell2num(data_tmp(i,k*2-1:k*2));
			end
		end
	end	
end

MIN_XY=[str2double(get(H.xmin,'String')),str2double(get(H.ymin,'String'))];
MAX_XY=[str2double(get(H.xmax,'String')),str2double(get(H.ymax,'String'))];

% make 2D kdes and 2D cdfs for samples, save as 3D matrix
for k = 1:N
	data2 = data1(:,k*2-1:k*2);
	data2 = data2(any(data2 ~= 0,2),:);
	samplesizes(k,1) = length(data2(:,1));
	if botev == 0
		[bandwidth1,density1(:,:,k),X1,Y1] = kde2d_set_kernel(data2, gridspc, MIN_XY, MAX_XY, bandwidth_x, bandwidth_y);
	end
	if botev == 1
		[bandwidth1(k,1:2),density1(:,:,k),X1,Y1] = kde2d(data2, gridspc, MIN_XY, MAX_XY);
	end
	density1(:,:,k) = density1(:,:,k)./sum(sum(density1(:,:,k)));	
	CDF1_Q1(:,:,k) = cumsum(cumsum(density1(:,:,k),1),2);    % take the CDF of x at y = max (y) Local CDF for Quadrant 1
	CDF1_Q2(:,:,k) = cumsum(cumsum(density1(:,:,k), 1,'reverse'), 2);            %Local CDF for Quadrant 2
	CDF1_Q3(:,:,k) = cumsum(cumsum(density1(:,:,k), 1,'reverse'), 2, 'reverse'); %Local CDF for Quadrant 3
	CDF1_Q4(:,:,k) = cumsum(cumsum(density1(:,:,k), 1), 2, 'reverse');           %Loval CDF for Quadrant 4
	clear data2
	d.Value = k/N;
	d.Message = 'Calculating densities! Please wait...';
end
%2D quantitative comparison
count = 1;
for j = 1:N
	for k = 1:N
		name_comp(count,1) = strcat(Name(j,1), {' vs '}, Name(k,1));
		d1 = reshape(density1(:,:,j),size(density1,1)*size(density1,2),1);
		d2 = reshape(density1(:,:,k),size(density1,1)*size(density1,2),1);
		R2D(j,k) = ((sum((d1 - mean(d1)).*(d2 - mean(d2))))/(sqrt((sum((d1 - mean(d1)).*(d1 - mean(d1))))*(sum((d2 - mean(d2)).*(d2 - mean(d2)))))))^2;
		for m = 1:size(density1,1)
			for n = 1:size(density1,2)
				Maps_L(m,n,count) = (abs(density1(m,n,j) - density1(m,n,k))/2); %Likeness map
				Maps_S(m,n,count) = sqrt(density1(m,n,j).*density1(m,n,k)); % Similarity map
			end
		end
		L2D(j,k) = 1 - sum(Maps_L(:,:,count),'All');
		if j == k
			S2D(j,k) = 1;
		else
			S2D(j,k) = sum(Maps_S(:,:,count),'All');
		end
		count = count+1;
		D2Dtmp(j,k,1) = max(max(abs(CDF1_Q1(:,:,j) - CDF1_Q1(:,:,k)),[],1)); %Maximum absolute difference for Quadrant 1
		D2Dtmp(j,k,2) = max(max(abs(CDF1_Q2(:,:,j) - CDF1_Q2(:,:,k)),[],1)); %Maximum absolute difference for Quadrant 2
		D2Dtmp(j,k,3) = max(max(abs(CDF1_Q3(:,:,j) - CDF1_Q3(:,:,k)),[],1)); %Maximum absolute difference for Quadrant 3
		D2Dtmp(j,k,4) = max(max(abs(CDF1_Q4(:,:,j) - CDF1_Q4(:,:,k)),[],1)); %Maximum absolute difference for Quadrant 4
		D2D = max(D2Dtmp, [], 3);		
		V2Dtmp(j,k,1) = max( max(CDF1_Q1(:,:,j) - CDF1_Q1(:,:,k),[],1) + max(CDF1_Q1(:,:,k) - CDF1_Q1(:,:,j),[],1) );
		V2Dtmp(j,k,2) = max( max(CDF1_Q2(:,:,j) - CDF1_Q2(:,:,k),[],1) + max(CDF1_Q2(:,:,k) - CDF1_Q2(:,:,j),[],1) );
		V2Dtmp(j,k,3) = max( max(CDF1_Q3(:,:,j) - CDF1_Q3(:,:,k),[],1) + max(CDF1_Q3(:,:,k) - CDF1_Q3(:,:,j),[],1) );
		V2Dtmp(j,k,4) = max( max(CDF1_Q4(:,:,j) - CDF1_Q4(:,:,k),[],1) + max(CDF1_Q4(:,:,k) - CDF1_Q4(:,:,j),[],1) );		
		V2Dtmp(j,k,5) = max( max(CDF1_Q1(:,:,j) - CDF1_Q1(:,:,k),[],2) + max(CDF1_Q1(:,:,k) - CDF1_Q1(:,:,j),[],2) );
		V2Dtmp(j,k,6) = max( max(CDF1_Q2(:,:,j) - CDF1_Q2(:,:,k),[],2) + max(CDF1_Q2(:,:,k) - CDF1_Q2(:,:,j),[],2) );
		V2Dtmp(j,k,7) = max( max(CDF1_Q3(:,:,j) - CDF1_Q3(:,:,k),[],2) + max(CDF1_Q3(:,:,k) - CDF1_Q3(:,:,j),[],2) );
		V2Dtmp(j,k,8) = max( max(CDF1_Q4(:,:,j) - CDF1_Q4(:,:,k),[],2) + max(CDF1_Q4(:,:,k) - CDF1_Q4(:,:,j),[],2) );
		V2D = max(V2Dtmp,[],3);
	end
end

H.bandwidth1 = bandwidth1;

H.export_plot = 0;
H.save_plot = 0;
H.samplesizes = samplesizes;
H.CDF1_Q1 = CDF1_Q1;
H.density1 = density1;
H.R2D = R2D;
H.L2D = L2D;
H.S2D = S2D;
H.D2D = D2D;
H.V2D = V2D;
H.X1 = X1;
H.Y1 = Y1;
H.data1 = data1;

close(fig)

guidata(hObject,H);
plot_Callback(hObject, eventdata, H)
table_vals(hObject, eventdata, H)

function plot_Callback(hObject, eventdata, H)
data1 = H.data1;
density1 = H.density1;
numbers = H.numbers;
CDF1_Q1 = H.CDF1_Q1;
Name = H.Name;
N = H.N;
X1 = H.X1;
Y1 = H.Y1;



if H.export_plot == 0 && H.save_plot == 0
	%clear uipanels with 2D density plots, if they exist
	try child = allchild(H.axes1);
		delete (child);
	catch
	end
end

if H.export_plot == 1
	F = figure;
end

if H.save_plot == 1
	F = figure('visible', 'off');;
end

xlo = str2double(get(H.xmin,'String'));
xhi = str2double(get(H.xmax,'String'));
ylo = str2double(get(H.ymin,'String'));
yhi = str2double(get(H.ymax,'String'));

%find panel positions
rc = ceil(sqrt(N)); % rows and columns for panel plots
rcm = ceil(sqrt(N))^2 - N; % difference in number of palels in lowest row
axoffx = zeros(N,1); %variable to turn off some x axes for 2D plots
axoffyz = ones(N,1); %variable to turn off some y and z axes for 2D plots
for i = 1:rc
	pos(1+max(rc)*(i-1):max(rc)*i,1) = [0.075:0.9/rc:0.90]; % left position of plots
	if 	1+max(rc)*(i-1) <= i < max(rc)*i
		pos(1+max(rc)*(i-1):max(rc)*i,2) = 0.055 + (rc-i)/rc*0.95; % bottom position of plots
	end
	if 	2+max(rc)*(i-1) <= i <= max(rc)*i || i < max(rc)*max(rc) - (max(rc)-1) 
		axoffx(1+max(rc)*(i-1):max(rc)*i,1) = 1; %turn off x axes in between plots for 2D plotting
	end
	axoffyz(1+max(rc)*(i-1),1) = 0; %turn off y and z axes in between for 2D plotting
end
pos(:,3) = 0.85/rc; % plot width
pos(:,4) = 0.75/rc; % plot height
axoffx(1+max(rc)*(i-1):N) = 0; %turn on complete lower row of x axis for 2D plots
if rcm > 0
	axoffx(max(rc)*(ceil(sqrt(N))-1)-rcm+1:max(rc)*(ceil(sqrt(N))-1)) = 0;	
end

if get(H.marker, 'Value') == 1
	mark = 'o';
elseif get(H.marker, 'Value') == 2
	mark = '+';
elseif get(H.marker, 'Value') == 3
	mark = '*';
elseif get(H.marker, 'Value') == 4
	mark = '.';
elseif get(H.marker, 'Value') == 5
	mark = 'x';
elseif get(H.marker, 'Value') == 6
	mark = 's';	
elseif get(H.marker, 'Value') == 7
	mark = 'd';
elseif get(H.marker, 'Value') == 8
	mark = '^';
elseif get(H.marker, 'Value') == 9
	mark = 'v';	
elseif get(H.marker, 'Value') == 10
	mark = '>';	
elseif get(H.marker, 'Value') == 11
	mark = '<';	
elseif get(H.marker, 'Value') == 12
	mark = 'p';	
elseif get(H.marker, 'Value') == 13
	mark = 'h';	
elseif get(H.marker, 'Value') == 14
	mark = 'none';	
end

if get(H.s_color, 'Value') == 1
	face = 'r';
elseif get(H.s_color, 'Value') == 2
	face = 'g';
elseif get(H.s_color, 'Value') == 3
	face = 'b';
elseif get(H.s_color, 'Value') == 4
	face = 'y';
elseif get(H.s_color, 'Value') == 5
	face = 'm';
elseif get(H.s_color, 'Value') == 6
	face = 'c';	
elseif get(H.s_color, 'Value') == 7
	face = 'w';
elseif get(H.s_color, 'Value') == 8
	face = 'k';
elseif get(H.s_color, 'Value') == 9
	face = 'none';	
end

if get(H.s_edge, 'Value') == 1
	edge = 'r';
elseif get(H.s_edge, 'Value') == 2
	edge = 'g';
elseif get(H.s_edge, 'Value') == 3
	edge = 'b';
elseif get(H.s_edge, 'Value') == 4
	edge = 'y';
elseif get(H.s_edge, 'Value') == 5
	edge = 'm';
elseif get(H.s_edge, 'Value') == 6
	edge = 'c';	
elseif get(H.s_edge, 'Value') == 7
	edge = 'w';
elseif get(H.s_edge, 'Value') == 8
	edge = 'k';
elseif get(H.s_edge, 'Value') == 9
	edge = 'none';	
end

size1 = str2num(get(H.size1,'String'));

if get(H.contour_color, 'Value') == 1
	cont = 'r';
elseif get(H.contour_color, 'Value') == 2
	cont = 'g';
elseif get(H.contour_color, 'Value') == 3
	cont = 'b';
elseif get(H.contour_color, 'Value') == 4
	cont = 'y';
elseif get(H.contour_color, 'Value') == 5
	cont = 'm';
elseif get(H.contour_color, 'Value') == 6
	cont = 'c';	
elseif get(H.contour_color, 'Value') == 7
	cont = 'w';
elseif get(H.contour_color, 'Value') == 8
	cont = 'k';
elseif get(H.contour_color, 'Value') == 9
	cont = 'none';	
end

if get(H.transparency, 'Value') == 1
	transp = 1;
elseif get(H.transparency, 'Value') == 2
	transp = 0.75;
elseif get(H.transparency, 'Value') == 3
	transp = 0.5;
elseif get(H.transparency, 'Value') == 4
	transp = 0.25;
elseif get(H.transparency, 'Value') == 5
	transp = 0;
end

if get(H.colormap, 'Value') == 1
	colormap(parula)
elseif get(H.colormap, 'Value') == 2
	colormap(jet)
elseif get(H.colormap, 'Value') == 3 % viridis
	cmap = [0.267004010000000,0.00487432999999996,0.329415190000000;0.270724607511462,0.0176652160512586,0.344769972121212;0.273978467617639,0.0324335566589644,0.359714782727273;0.276740111256717,0.0486435361030842,0.374200790909091;0.279019684443310,0.0638558833388514,0.388205733939394;0.280814765409863,0.0782353984940852,0.401703264242424;0.282100725961245,0.0920580901280188,0.414649596363636;0.282915170452919,0.105548531616562,0.427042981515152;0.283209472957882,0.118759488999863,0.438823438181818;0.283033163562756,0.131803230808035,0.450002373636364;0.282364813092189,0.144697446807648,0.460542025151515;0.281222468595490,0.157473495160734,0.470433883333333;0.279632529600785,0.170150606353514,0.479678647272727;0.277575440232598,0.182717942222353,0.488249160606061;0.275123881872254,0.195196027728210,0.496181027272727;0.272243952984566,0.207559367368487,0.503447450000000;0.269013522013221,0.219818500459145,0.510092578181818;0.265438240370107,0.231957578751491,0.516121900000000;0.261551797955654,0.243968561436998,0.521561309090909;0.257417641472282,0.255851268558595,0.526452578787879;0.253040011607521,0.267570556865835,0.530805076666667;0.248464280468145,0.279175713642699,0.534681548181818;0.243734112883201,0.290606940928501,0.538097133333333;0.238884953989729,0.301899364460921,0.541105172727273;0.233953081171962,0.313038496125541,0.543737825454545;0.228976889614729,0.324018317807404,0.546031593939394;0.223983970748479,0.334865848570125,0.548030504545455;0.219006453767903,0.345547358694835,0.549753681818182;0.214067141455560,0.356107986631125,0.551248122424243;0.209193388419200,0.366525080091998,0.552532920606061;0.204401172379751,0.376822958111392,0.553639791818182;0.199703752908650,0.387006740038878,0.554589377272727;0.195113567402670,0.397077295560826,0.555398793636364;0.190631350000000,0.407061480000000,0.556089070000000;0.186266651073365,0.416942806319376,0.556665632121212;0.182009290976797,0.426755840949686,0.557144662121212;0.177858279216527,0.436494845690706,0.557528030000000;0.173802513136880,0.446175679978607,0.557820390303030;0.169831254900564,0.455807900792392,0.558022376363636;0.165935264912133,0.465392766689553,0.558129257272727;0.162096794125451,0.474949940448296,0.558138912121212;0.158306335670090,0.484473155679030,0.558036842424243;0.154551121588504,0.493981332906598,0.557818586363636;0.150825589446228,0.503473668805633,0.557467898181818;0.147131503408444,0.512956834459261,0.556973310000000;0.143471883829899,0.522437469463666,0.556320082727273;0.139862368281972,0.531913801618953,0.555483802727273;0.136327055249074,0.541395208830542,0.554455854848485;0.132916109831062,0.550875736269022,0.553208389090909;0.129679700141859,0.560362949393940,0.551736992922043;0.126691849933974,0.569851652424243,0.550000353976397;0.124058384694146,0.579341890000000,0.547991088483562;0.121878703847449,0.588831927575758,0.545681957450192;0.120322967444783,0.598318657878788,0.543063654656023;0.119504013694763,0.607798205454545,0.540108020815272;0.119627227014187,0.617265840000000,0.536802622929029;0.120817955131498,0.626716594242424,0.533125824595036;0.123237555331950,0.636144222727273,0.529064063047073;0.127018218626169,0.645541919090909,0.524597827878853;0.132201029923855,0.654903652121212,0.519720218479327;0.138902195101824,0.664219406363636,0.514402555647879;0.147042899636700,0.673483826666667,0.508651464152217;0.156648777557568,0.682685910606061,0.502437033673954;0.167624510253113,0.691818275454545,0.495761624741298;0.179901071494507,0.700871520000000,0.488616629927191;0.193409820304154,0.709834368787879,0.480975065451614;0.208030450000000,0.718700950000000,0.472873300000000;0.223729647943914,0.727454405151515,0.464232692803522;0.240385167388249,0.736091528484848,0.455123515112494;0.257953957698864,0.744596916363637,0.445490568609760;0.276364167849942,0.752962188181818,0.435351996909506;0.295560058617270,0.761177489090909,0.424720298554597;0.315502049910523,0.769227506363637,0.413536087136257;0.336132751905684,0.777109131818182,0.401902830364368;0.357432723751875,0.784800756969697,0.389668672499225;0.379187624631023,0.792301949090909,0.376892663178523;0.401819548310649,0.799596016060606,0.363818228329961;0.424885391739474,0.806673890000000,0.350103656442721;0.448511278088871,0.813529260000000,0.335893595584377;0.472586220217279,0.820144256666667,0.321189578778901;0.497189866132354,0.826522383333333,0.306013238427748;0.522176081687851,0.832642349090909,0.290368248699914;0.547608085241283,0.838509068787879,0.274283322771435;0.573399871636692,0.844112580606061,0.257788365171587;0.599513835161838,0.849450267272727,0.240926674122160;0.625947092886084,0.854528077878788,0.223759524235073;0.652570828837514,0.859336903636364,0.206372684144584;0.679428057477040,0.863897171818182,0.188888178715576;0.706375667487402,0.868206316666667,0.171497874246839;0.733413255380740,0.872287558787879,0.154463130733397;0.760450702191504,0.876156194545455,0.138186779876540;0.787409001675806,0.879833884545455,0.123280196660836;0.814259177906714,0.883352472727273,0.110486942363159;0.840870545180796,0.886734702727273,0.101041357644058;0.867241812961043,0.890020479696970,0.0958677673730973;0.895124113939394,0.895095662468121,0.0960436694934357;0.918932211818182,0.896442206000830,0.101626697171734;0.944161741818182,0.899632578395113,0.112119840357606;0.968933641515152,0.902867128076890,0.126590331216594;0.993247890000000,0.906156570000000,0.143936200000000];
	colormap(cmap)
elseif get(H.colormap, 'Value') == 4 % inferno
	cmap = [0.00146159096000000,0.000466127766000000,0.0138655200000000;0.00399889256167163,0.00287953184509436,0.0280794670818182;0.00795127879887381,0.00636563464942455,0.0480946763272727;0.0133413427376349,0.0107186192562840,0.0695702669090909;0.0202832010103144,0.0157475324348777,0.0913609393696970;0.0289795978504996,0.0212350138796010,0.113567813696970;0.0397217191413972,0.0269214611172503,0.136281385727273;0.0517865237979150,0.0325367550978278,0.159531830393939;0.0643437732434502,0.0377498532623961,0.183290302909091;0.0775923173844421,0.0421673192071302,0.207524301636364;0.0916216500755484,0.0453405008822348,0.232043876727273;0.106525154463262,0.0471492247152560,0.256590945000000;0.122331601345294,0.0475439738839218,0.280778409363636;0.138952211477325,0.0465727258510071,0.304031679636364;0.156258364334311,0.0445007623305026,0.325819520909091;0.173954939579936,0.0418067727716278,0.345479181272727;0.191823551203119,0.0391204811163078,0.362738271909091;0.209622894155016,0.0371601549561695,0.377433568575758;0.227214636395263,0.0364060934405600,0.389682109818182;0.244558945419825,0.0370281786609092,0.399785207303030;0.261615682280493,0.0391236431060528,0.407958540515152;0.278437295327159,0.0424958887899517,0.414593538272727;0.295039349061702,0.0468596811613591,0.419873028000000;0.311475148430300,0.0519108275519758,0.424059248212121;0.327775155288748,0.0574270105178404,0.427304422909091;0.343975108835925,0.0632265730802830,0.429736606212121;0.360095711996609,0.0691767069549141,0.431479396181818;0.376175208151901,0.0751898579699384,0.432574307181818;0.392210841091546,0.0812091009414445,0.433117718636364;0.408237495148001,0.0871944887397472,0.433122440848485;0.424255000660395,0.0931259107413702,0.432631369818182;0.440264663545455,0.0989921803825824,0.431671557501847;0.456291102666667,0.104795933940443,0.430239227656651;0.472328255000000,0.110546584000000,0.428334320000000;0.488378092787879,0.116241601262343,0.425991582139122;0.504437674212121,0.121906642029904,0.423182870705644;0.520504280000000,0.127551450310552,0.419926708425463;0.536572723909091,0.133197548810781,0.416212802087094;0.552635898333333,0.138866077566695,0.412039314016187;0.568684763818182,0.144578822918171,0.407414276231730;0.584709655727273,0.150362237949872,0.402323007199250;0.600696829181818,0.156242241454892,0.396784358637823;0.616634938454546,0.162246280013946,0.390783833411482;0.632506746727273,0.168404831523849,0.384336677113617;0.648296214666667,0.174747877792274,0.377445191416445;0.663987527818182,0.181304165317645,0.370113176077319;0.679555909909091,0.188110937602704,0.362360175938572;0.694987324636364,0.195192406546200,0.354191497382138;0.710252113727273,0.202588963435991,0.345624853417491;0.725334360363636,0.210323296834924,0.336673126836953;0.740205661636364,0.218429642432735,0.327358989628286;0.754840583909091,0.226936239596084,0.317701515291581;0.769219910848485,0.235862706073157,0.307723391693835;0.783304905030303,0.245244335555584,0.297441438148676;0.797085648090909,0.255085905613756,0.286885476851085;0.810519941000000,0.265417765448960,0.276073292872144;0.823594678545454,0.276225169086520,0.265040926797981;0.836280707909091,0.287556432055558,0.253792009268985;0.848550357454545,0.299387738449111,0.242356636167536;0.860395631575758,0.311742348508969,0.230744085287119;0.871771440909091,0.324575256603181,0.218981812084315;0.882686740242424,0.337919951110913,0.207066184040693;0.893103441484849,0.351732717214752,0.195013810306050;0.903020608727273,0.366016598725349,0.182820715969609;0.912424088545455,0.380750244661433,0.170486123016767;0.921294013696970,0.395903261243756,0.158005952723798;0.929644083000000,0.411479007000000,0.145366973000000;0.937433156060606,0.427417913184157,0.132564472617524;0.944690633606061,0.443735751668869,0.119586014602270;0.951389878727273,0.460386443664994,0.106433454812169;0.957537507242424,0.477359614069479,0.0931232849673625;0.963133260303030,0.494637272873435,0.0797067075468474;0.968159191818182,0.512184479207010,0.0663110878697415;0.972638410878788,0.530008165941668,0.0531745184693875;0.976534780424243,0.548059957076380,0.0408510427419464;0.979876342000000,0.566352246795761,0.0308821177071040;0.982641682969697,0.584853337635102,0.0250467039957242;0.984832270333333,0.603554919452185,0.0238048668232048;0.986452054636364,0.622436923740861,0.0276118693981342;0.987475419090909,0.641499284824589,0.0373252497034655;0.987927448363636,0.660706037272013,0.0521490646874560;0.987771853181818,0.680074857919662,0.0698596082992870;0.987032646575758,0.699564242980266,0.0894210735178051;0.985694969818182,0.719173813683700,0.110455141280859;0.983755442818182,0.738892131846950,0.132774444135988;0.981237396757576,0.758672996544754,0.156300248333453;0.978131988757576,0.778541102518789,0.181133500951378;0.974496941727273,0.798402075176654,0.207291984802552;0.970344704666667,0.818284067764030,0.235014386250955;0.965794427787879,0.838073446406604,0.264412724627449;0.960969383363636,0.857711851608518,0.295747752853543;0.956110448515152,0.877103565575226,0.329299218234636;0.951596796727273,0.896011057906944,0.365195702069798;0.948089375181818,0.914303405623325,0.403680602262447;0.946392919636364,0.931557123825968,0.444334021071604;0.948585717757576,0.948502090319137,0.486431112269774;0.952486759820053,0.962034649818182,0.528595221457009;0.961213816431732,0.975178648424242,0.569545808080956;0.973433921233276,0.987179065969697,0.608337748116230;0.988362068000000,0.998364143000000,0.644924005000000];
	colormap(cmap)
elseif get(H.colormap, 'Value') == 5 % magma
	cmap = [0.00146159096000000,0.000466127766000000,0.0138655200000000;0.00396963249787467,0.00295782740809874,0.0273104854393939;0.00785667780827875,0.00659792290147526,0.0461656953848485;0.0130792148733772,0.0112257533463670,0.0665074171272727;0.0196678017616254,0.0167072290056517,0.0870164943363636;0.0277090244894271,0.0228930878425070,0.107803754121212;0.0373537945495923,0.0296086745430926,0.128984709181818;0.0481884228949725,0.0366903137309453,0.150584990090909;0.0592262029289913,0.0437513428509191,0.172708162909091;0.0705722209499949,0.0501428903038421,0.195357867272727;0.0823131585145148,0.0557324419696763,0.218552009545455;0.0945649101113795,0.0604522303538439,0.242268000000000;0.107431830934813,0.0642175434689971,0.266431248181818;0.121020864821821,0.0668858746509098,0.290955213575758;0.135401060496669,0.0684102316624284,0.315577935454545;0.150619874761647,0.0686866003912929,0.339988689636364;0.166652661838188,0.0677916481367519,0.363715844393939;0.183388711792418,0.0659198419727293,0.386174706333333;0.200615203661423,0.0635238948216726,0.406738160272727;0.218095535739107,0.0612106484662445,0.424983023575758;0.235538370813556,0.0597007801980943,0.440559594636364;0.252820013054710,0.0594413931672472,0.453653383090909;0.269804305426194,0.0607408574690535,0.464387015666667;0.286502645903444,0.0635024394392208,0.473180894515151;0.302926383510630,0.0675218434699115,0.480344646545455;0.319113780189581,0.0725120341052126,0.486179326272727;0.335119903520351,0.0781672729642440,0.490971497090909;0.350985666787874,0.0842682619994275,0.494873744636364;0.366753349184250,0.0906170005373253,0.498092491848485;0.382457941431308,0.0970895571224863,0.500718510666667;0.398129294542111,0.103588151949924,0.502856182090909;0.413790436524552,0.110051807845278,0.504569460424242;0.429467150565459,0.116438271726955,0.505902878606061;0.445163096000000,0.122724371000000,0.506900806000000;0.460918625430740,0.128886954465657,0.507565488848485;0.476716010820867,0.134928050278637,0.507931392393940;0.492582630743639,0.140841429406746,0.507994081727273;0.509329079090909,0.146629607480763,0.508589300873485;0.524515405212121,0.152303606109150,0.507229873618836;0.540600729000000,0.157865121373464,0.506389106044112;0.556761543121212,0.163332659090695,0.505215850620604;0.573001300727273,0.168711800038572,0.503733280014819;0.589312913545455,0.174024612022161,0.501900266237818;0.605693982333333,0.179285374176889,0.499722099447472;0.622137057333333,0.184515265025090,0.497181812713551;0.638632839454546,0.189736741408806,0.494262267333334;0.655171937909091,0.194975290837411,0.490967534760319;0.671739381787879,0.200258508592035,0.487267801485588;0.688320409818182,0.205620901746345,0.483174961564414;0.704895679272727,0.211095652046855,0.478666168427356;0.721443969454546,0.216724165127206,0.473743098652091;0.737938515181818,0.222552794269508,0.468404760588146;0.754351323212121,0.228626973857886,0.462649703560083;0.770641950181818,0.235014275617009,0.456495758558116;0.786777335636364,0.241761787433362,0.449946841969349;0.802703594000000,0.248952518583233,0.443025054841077;0.818371546242424,0.256649484421971,0.435766306215733;0.833717167454546,0.264936247977841,0.428215469664703;0.848665468181818,0.273901792686467,0.420430368284165;0.863151987090909,0.283611269949446,0.412496955352519;0.877060488545455,0.294181815349183,0.404521639185233;0.890333693878788,0.305646093513659,0.396635975927565;0.902848141545455,0.318093093463582,0.389011620477855;0.914536298545455,0.331534161396806,0.381834800851296;0.925323023969697,0.345970754366781,0.375319978264204;0.935139844303030,0.361375304989207,0.369690039320443;0.944006448000000,0.377642889000000,0.365136328000000;0.951873471606061,0.394691302771497,0.361876665974739;0.958840615666667,0.412380228926801,0.359956421221783;0.964938695545455,0.430569882156238,0.359513108288860;0.970256725848485,0.449137421949103,0.360529004573765;0.974876232818182,0.467970515953116,0.362972209805602;0.978862331545455,0.486976844361431,0.366823367427078;0.982315711363636,0.506076211231413,0.371944633729994;0.985271162848485,0.525221572274520,0.378317349457379;0.987807335272727,0.544368653518903,0.385782917665487;0.989950356151515,0.563500450610526,0.394284979665672;0.991770686000000,0.582576935977516,0.403726455418414;0.993276389000000,0.601606130700794,0.414016148522486;0.994516603212121,0.620570178810127,0.425105381646187;0.995500435969697,0.639471906086101,0.436895180786394;0.996252059454545,0.658319055920175,0.449360950421359;0.996806738575758,0.677093558559539,0.462419504421512;0.997163117363636,0.695815596806649,0.476042482444242;0.997334562909091,0.714491410452500,0.490190810638697;0.997341824090909,0.733109808085957,0.504819031935832;0.997182061575758,0.751707754118951,0.519922922213019;0.996882672909091,0.770250806213677,0.535451177833651;0.996436258333333,0.788784593695108,0.551410576685972;0.995871274424242,0.807280515735869,0.567764062926975;0.995184503454545,0.825758484186287,0.584508787891694;0.994404788484849,0.844225426240777,0.601627866275212;0.993554996575758,0.862645005470651,0.619092775521772;0.992617645545455,0.881101684326737,0.636922755508793;0.991644614909091,0.899505148501783,0.655063315008503;0.990678935515152,0.917915809762457,0.673495346953656;0.989710901818182,0.936308315019579,0.692195255568149;0.988771666121212,0.954683151382698,0.711124451497506;0.987887716454545,0.973094593288114,0.730242033067517;0.987052509000000,0.991437853000000,0.749504188000000];
	colormap(cmap)
elseif get(H.colormap, 'Value') == 6 % plasma
	cmap = [0.0503832136000000,0.0298028976000000,0.527974883000000;0.0815823807877956,0.0265867041616092,0.540684671000000;0.107355169340663,0.0241960396818818,0.551989044484848;0.130055959529551,0.0224284389385021,0.562206488000000;0.150963769899172,0.0210020183647598,0.571623448878788;0.170659552102410,0.0197629613348841,0.580402518363636;0.189458576380101,0.0185996376756421,0.588637794181818;0.207643102940095,0.0174279699606346,0.596421397545455;0.225301872688235,0.0162007630133308,0.603770644212121;0.242598378265279,0.0148813508620481,0.610733389727273;0.259588036546517,0.0134472741785156,0.617307058212121;0.276337220269479,0.0119025077210060,0.623494091333333;0.292893648330705,0.0102714993782007,0.629290897727273;0.309274715702800,0.00858101792647744,0.634666541757576;0.325529158909198,0.00687539827389696,0.639621313000000;0.341650564862912,0.00521919672377208,0.644106100818182;0.357670324457706,0.00368037854366705,0.648114138151515;0.373587164644139,0.00234681952524928,0.651605264818182;0.389405956422400,0.00131800879488230,0.654548395181818;0.405133198647192,0.000689094521384467,0.656926097757576;0.420755875278142,0.000606100905319985,0.658681816363636;0.436278993165460,0.00116457098773206,0.659821798090909;0.451690623877970,0.00252963535096137,0.660286766333333;0.466983921357964,0.00481978013088795,0.660080674393939;0.482146201834980,0.00819085131002113,0.659177593000000;0.497168732943481,0.0128039450697855,0.657558703424243;0.512032716574328,0.0187575817324091,0.655239315090909;0.526738848006019,0.0262870398582799,0.652183564090909;0.541253177578868,0.0354365503833947,0.648442118424242;0.555581760485189,0.0460623636178491,0.643999015151515;0.569697622830225,0.0569398273251149,0.638896913000000;0.583589396308280,0.0679321395407872,0.633162289818182;0.597263474449149,0.0790301880894014,0.626824595757576;0.610667469000000,0.0902039303000000,0.619950811000000;0.623836675181818,0.101447557584133,0.612560080838201;0.636757831030303,0.112755522437882,0.604730476067744;0.649416458363636,0.124101192641246,0.596504589747760;0.661815243878788,0.135478908455582,0.587944691745968;0.673955190303030,0.146879660768836,0.579108238920008;0.685831136727273,0.158286789168903,0.570042708688667;0.697458333757576,0.169706894882675,0.560808730453804;0.708826776060606,0.181117753758607,0.551441117489391;0.719956296272727,0.192531302993559,0.541992432847761;0.730846036333333,0.203936499160041,0.532493983337734;0.741505738666667,0.215334650515528,0.522982180953011;0.751946522090909,0.226729739332939,0.513482869792766;0.762168657242424,0.238114989727708,0.504011282879754;0.772190498181818,0.249504237740860,0.494591589945520;0.782008446181818,0.260888390328339,0.485230372282859;0.791638609000000,0.272281431303064,0.475941595252205;0.801082810515152,0.283683906874827,0.466724084059951;0.810346632454545,0.295101291752511,0.457579992809514;0.819438717242424,0.306542173393512,0.448517266689175;0.828354612848485,0.318007145711176,0.439516850465082;0.837106149636364,0.329510637411159,0.430589153422853;0.845686518333333,0.341052140294506,0.421717568715355;0.854101781787879,0.352644734685166,0.412901697651499;0.862348915545455,0.364293805375540,0.404131887770853;0.870424443666667,0.376006253633586,0.395397204434765;0.878330569363636,0.387592346112036,0.386501689843391;0.886053636545455,0.399640114467872,0.378028082854842;0.893598925060606,0.411605256867961,0.369362060525727;0.900951841666667,0.423648956320469,0.360708674866815;0.908110384000000,0.435804736705972,0.352056236356083;0.915065908454545,0.448074507504643,0.343400955948958;0.921805652030303,0.460453173834215,0.334741039051357;0.928329275000000,0.472975465000000,0.326066550000000;0.934612544121212,0.485606184423229,0.317385904391242;0.940659125666667,0.498392429028170,0.308685672625678;0.946448815909091,0.511314420914924,0.299973503727936;0.951975104242424,0.524387760112599,0.291248773002625;0.957226451212121,0.537620043783125,0.282508460022751;0.962184404090909,0.551001532800762,0.273763441238937;0.966850808454545,0.564555761913269,0.265015037698232;0.971192722696970,0.578262908971352,0.256269885881504;0.975216415454546,0.592146646516460,0.247536698277106;0.978899223575758,0.606196083659726,0.238832215174876;0.982230840666667,0.620416963499396,0.230171497594631;0.985200593090909,0.634816659486345,0.221567957914143;0.987781899242424,0.649384314469667,0.213056392841293;0.989980536060606,0.664134812298712,0.204664041574770;0.991759461636364,0.679054050392784,0.196443526629633;0.993121761575758,0.694154252342995,0.188439001779935;0.994041833030303,0.709429736461378,0.180722256300012;0.994502779818182,0.724880985557720,0.173377462450791;0.994498941575758,0.740509760647437,0.166492641839155;0.993991486363636,0.756309810346189,0.160212905824302;0.992985247636364,0.772286712379486,0.154629980669400;0.991438210000000,0.788435499056204,0.149931542862865;0.989359350090909,0.804749959302527,0.146244864397980;0.986711400727273,0.821233241660880,0.143703110258317;0.983488164848485,0.837877046489316,0.142439453351283;0.979690508272727,0.854668834730875,0.142448146001543;0.975271192090909,0.871625557374025,0.143738785611683;0.970279664727273,0.888707868358415,0.146051808241278;0.964702926090909,0.905927564523120,0.149010339993564;0.958602670181818,0.923253649231005,0.151796687168694;0.952114072393939,0.940649752191961,0.152924869273177;0.945590474366293,0.958043580545455,0.148864760271971;0.940015097000001,0.975158357000000,0.131325517000000];
	colormap(cmap)
elseif get(H.colormap, 'Value') == 7
	colormap(hsv)
elseif get(H.colormap, 'Value') == 8
	colormap(hot)
elseif get(H.colormap, 'Value') == 9
	colormap(cool)
elseif get(H.colormap, 'Value') == 10
	colormap(spring)
elseif get(H.colormap, 'Value') == 11
	colormap(summer)
elseif get(H.colormap, 'Value') == 12
	colormap(winter)
elseif get(H.colormap, 'Value') == 13
	colormap(gray)
elseif get(H.colormap, 'Value') == 14
	colormap(bone)
elseif get(H.colormap, 'Value') == 15
	colormap(copper)
elseif get(H.colormap, 'Value') == 16
	colormap(pink)
elseif get(H.colormap, 'Value') == 17
	colormap(lines)
elseif get(H.colormap, 'Value') == 18
	colormap(colorcube)
elseif get(H.colormap, 'Value') == 19
	colormap(prism)
elseif get(H.colormap, 'Value') == 20
	colormap(flag)
elseif get(H.colormap, 'Value') == 21
	cmap = parula(100);
elseif get(H.colormap, 'Value') == 22
	cmap = jet(100);
elseif get(H.colormap, 'Value') == 23 % viridis
	cmap = [0.267004010000000,0.00487432999999996,0.329415190000000;0.270724607511462,0.0176652160512586,0.344769972121212;0.273978467617639,0.0324335566589644,0.359714782727273;0.276740111256717,0.0486435361030842,0.374200790909091;0.279019684443310,0.0638558833388514,0.388205733939394;0.280814765409863,0.0782353984940852,0.401703264242424;0.282100725961245,0.0920580901280188,0.414649596363636;0.282915170452919,0.105548531616562,0.427042981515152;0.283209472957882,0.118759488999863,0.438823438181818;0.283033163562756,0.131803230808035,0.450002373636364;0.282364813092189,0.144697446807648,0.460542025151515;0.281222468595490,0.157473495160734,0.470433883333333;0.279632529600785,0.170150606353514,0.479678647272727;0.277575440232598,0.182717942222353,0.488249160606061;0.275123881872254,0.195196027728210,0.496181027272727;0.272243952984566,0.207559367368487,0.503447450000000;0.269013522013221,0.219818500459145,0.510092578181818;0.265438240370107,0.231957578751491,0.516121900000000;0.261551797955654,0.243968561436998,0.521561309090909;0.257417641472282,0.255851268558595,0.526452578787879;0.253040011607521,0.267570556865835,0.530805076666667;0.248464280468145,0.279175713642699,0.534681548181818;0.243734112883201,0.290606940928501,0.538097133333333;0.238884953989729,0.301899364460921,0.541105172727273;0.233953081171962,0.313038496125541,0.543737825454545;0.228976889614729,0.324018317807404,0.546031593939394;0.223983970748479,0.334865848570125,0.548030504545455;0.219006453767903,0.345547358694835,0.549753681818182;0.214067141455560,0.356107986631125,0.551248122424243;0.209193388419200,0.366525080091998,0.552532920606061;0.204401172379751,0.376822958111392,0.553639791818182;0.199703752908650,0.387006740038878,0.554589377272727;0.195113567402670,0.397077295560826,0.555398793636364;0.190631350000000,0.407061480000000,0.556089070000000;0.186266651073365,0.416942806319376,0.556665632121212;0.182009290976797,0.426755840949686,0.557144662121212;0.177858279216527,0.436494845690706,0.557528030000000;0.173802513136880,0.446175679978607,0.557820390303030;0.169831254900564,0.455807900792392,0.558022376363636;0.165935264912133,0.465392766689553,0.558129257272727;0.162096794125451,0.474949940448296,0.558138912121212;0.158306335670090,0.484473155679030,0.558036842424243;0.154551121588504,0.493981332906598,0.557818586363636;0.150825589446228,0.503473668805633,0.557467898181818;0.147131503408444,0.512956834459261,0.556973310000000;0.143471883829899,0.522437469463666,0.556320082727273;0.139862368281972,0.531913801618953,0.555483802727273;0.136327055249074,0.541395208830542,0.554455854848485;0.132916109831062,0.550875736269022,0.553208389090909;0.129679700141859,0.560362949393940,0.551736992922043;0.126691849933974,0.569851652424243,0.550000353976397;0.124058384694146,0.579341890000000,0.547991088483562;0.121878703847449,0.588831927575758,0.545681957450192;0.120322967444783,0.598318657878788,0.543063654656023;0.119504013694763,0.607798205454545,0.540108020815272;0.119627227014187,0.617265840000000,0.536802622929029;0.120817955131498,0.626716594242424,0.533125824595036;0.123237555331950,0.636144222727273,0.529064063047073;0.127018218626169,0.645541919090909,0.524597827878853;0.132201029923855,0.654903652121212,0.519720218479327;0.138902195101824,0.664219406363636,0.514402555647879;0.147042899636700,0.673483826666667,0.508651464152217;0.156648777557568,0.682685910606061,0.502437033673954;0.167624510253113,0.691818275454545,0.495761624741298;0.179901071494507,0.700871520000000,0.488616629927191;0.193409820304154,0.709834368787879,0.480975065451614;0.208030450000000,0.718700950000000,0.472873300000000;0.223729647943914,0.727454405151515,0.464232692803522;0.240385167388249,0.736091528484848,0.455123515112494;0.257953957698864,0.744596916363637,0.445490568609760;0.276364167849942,0.752962188181818,0.435351996909506;0.295560058617270,0.761177489090909,0.424720298554597;0.315502049910523,0.769227506363637,0.413536087136257;0.336132751905684,0.777109131818182,0.401902830364368;0.357432723751875,0.784800756969697,0.389668672499225;0.379187624631023,0.792301949090909,0.376892663178523;0.401819548310649,0.799596016060606,0.363818228329961;0.424885391739474,0.806673890000000,0.350103656442721;0.448511278088871,0.813529260000000,0.335893595584377;0.472586220217279,0.820144256666667,0.321189578778901;0.497189866132354,0.826522383333333,0.306013238427748;0.522176081687851,0.832642349090909,0.290368248699914;0.547608085241283,0.838509068787879,0.274283322771435;0.573399871636692,0.844112580606061,0.257788365171587;0.599513835161838,0.849450267272727,0.240926674122160;0.625947092886084,0.854528077878788,0.223759524235073;0.652570828837514,0.859336903636364,0.206372684144584;0.679428057477040,0.863897171818182,0.188888178715576;0.706375667487402,0.868206316666667,0.171497874246839;0.733413255380740,0.872287558787879,0.154463130733397;0.760450702191504,0.876156194545455,0.138186779876540;0.787409001675806,0.879833884545455,0.123280196660836;0.814259177906714,0.883352472727273,0.110486942363159;0.840870545180796,0.886734702727273,0.101041357644058;0.867241812961043,0.890020479696970,0.0958677673730973;0.895124113939394,0.895095662468121,0.0960436694934357;0.918932211818182,0.896442206000830,0.101626697171734;0.944161741818182,0.899632578395113,0.112119840357606;0.968933641515152,0.902867128076890,0.126590331216594;0.993247890000000,0.906156570000000,0.143936200000000];
elseif get(H.colormap, 'Value') == 24 % inferno
	cmap = [0.00146159096000000,0.000466127766000000,0.0138655200000000;0.00399889256167163,0.00287953184509436,0.0280794670818182;0.00795127879887381,0.00636563464942455,0.0480946763272727;0.0133413427376349,0.0107186192562840,0.0695702669090909;0.0202832010103144,0.0157475324348777,0.0913609393696970;0.0289795978504996,0.0212350138796010,0.113567813696970;0.0397217191413972,0.0269214611172503,0.136281385727273;0.0517865237979150,0.0325367550978278,0.159531830393939;0.0643437732434502,0.0377498532623961,0.183290302909091;0.0775923173844421,0.0421673192071302,0.207524301636364;0.0916216500755484,0.0453405008822348,0.232043876727273;0.106525154463262,0.0471492247152560,0.256590945000000;0.122331601345294,0.0475439738839218,0.280778409363636;0.138952211477325,0.0465727258510071,0.304031679636364;0.156258364334311,0.0445007623305026,0.325819520909091;0.173954939579936,0.0418067727716278,0.345479181272727;0.191823551203119,0.0391204811163078,0.362738271909091;0.209622894155016,0.0371601549561695,0.377433568575758;0.227214636395263,0.0364060934405600,0.389682109818182;0.244558945419825,0.0370281786609092,0.399785207303030;0.261615682280493,0.0391236431060528,0.407958540515152;0.278437295327159,0.0424958887899517,0.414593538272727;0.295039349061702,0.0468596811613591,0.419873028000000;0.311475148430300,0.0519108275519758,0.424059248212121;0.327775155288748,0.0574270105178404,0.427304422909091;0.343975108835925,0.0632265730802830,0.429736606212121;0.360095711996609,0.0691767069549141,0.431479396181818;0.376175208151901,0.0751898579699384,0.432574307181818;0.392210841091546,0.0812091009414445,0.433117718636364;0.408237495148001,0.0871944887397472,0.433122440848485;0.424255000660395,0.0931259107413702,0.432631369818182;0.440264663545455,0.0989921803825824,0.431671557501847;0.456291102666667,0.104795933940443,0.430239227656651;0.472328255000000,0.110546584000000,0.428334320000000;0.488378092787879,0.116241601262343,0.425991582139122;0.504437674212121,0.121906642029904,0.423182870705644;0.520504280000000,0.127551450310552,0.419926708425463;0.536572723909091,0.133197548810781,0.416212802087094;0.552635898333333,0.138866077566695,0.412039314016187;0.568684763818182,0.144578822918171,0.407414276231730;0.584709655727273,0.150362237949872,0.402323007199250;0.600696829181818,0.156242241454892,0.396784358637823;0.616634938454546,0.162246280013946,0.390783833411482;0.632506746727273,0.168404831523849,0.384336677113617;0.648296214666667,0.174747877792274,0.377445191416445;0.663987527818182,0.181304165317645,0.370113176077319;0.679555909909091,0.188110937602704,0.362360175938572;0.694987324636364,0.195192406546200,0.354191497382138;0.710252113727273,0.202588963435991,0.345624853417491;0.725334360363636,0.210323296834924,0.336673126836953;0.740205661636364,0.218429642432735,0.327358989628286;0.754840583909091,0.226936239596084,0.317701515291581;0.769219910848485,0.235862706073157,0.307723391693835;0.783304905030303,0.245244335555584,0.297441438148676;0.797085648090909,0.255085905613756,0.286885476851085;0.810519941000000,0.265417765448960,0.276073292872144;0.823594678545454,0.276225169086520,0.265040926797981;0.836280707909091,0.287556432055558,0.253792009268985;0.848550357454545,0.299387738449111,0.242356636167536;0.860395631575758,0.311742348508969,0.230744085287119;0.871771440909091,0.324575256603181,0.218981812084315;0.882686740242424,0.337919951110913,0.207066184040693;0.893103441484849,0.351732717214752,0.195013810306050;0.903020608727273,0.366016598725349,0.182820715969609;0.912424088545455,0.380750244661433,0.170486123016767;0.921294013696970,0.395903261243756,0.158005952723798;0.929644083000000,0.411479007000000,0.145366973000000;0.937433156060606,0.427417913184157,0.132564472617524;0.944690633606061,0.443735751668869,0.119586014602270;0.951389878727273,0.460386443664994,0.106433454812169;0.957537507242424,0.477359614069479,0.0931232849673625;0.963133260303030,0.494637272873435,0.0797067075468474;0.968159191818182,0.512184479207010,0.0663110878697415;0.972638410878788,0.530008165941668,0.0531745184693875;0.976534780424243,0.548059957076380,0.0408510427419464;0.979876342000000,0.566352246795761,0.0308821177071040;0.982641682969697,0.584853337635102,0.0250467039957242;0.984832270333333,0.603554919452185,0.0238048668232048;0.986452054636364,0.622436923740861,0.0276118693981342;0.987475419090909,0.641499284824589,0.0373252497034655;0.987927448363636,0.660706037272013,0.0521490646874560;0.987771853181818,0.680074857919662,0.0698596082992870;0.987032646575758,0.699564242980266,0.0894210735178051;0.985694969818182,0.719173813683700,0.110455141280859;0.983755442818182,0.738892131846950,0.132774444135988;0.981237396757576,0.758672996544754,0.156300248333453;0.978131988757576,0.778541102518789,0.181133500951378;0.974496941727273,0.798402075176654,0.207291984802552;0.970344704666667,0.818284067764030,0.235014386250955;0.965794427787879,0.838073446406604,0.264412724627449;0.960969383363636,0.857711851608518,0.295747752853543;0.956110448515152,0.877103565575226,0.329299218234636;0.951596796727273,0.896011057906944,0.365195702069798;0.948089375181818,0.914303405623325,0.403680602262447;0.946392919636364,0.931557123825968,0.444334021071604;0.948585717757576,0.948502090319137,0.486431112269774;0.952486759820053,0.962034649818182,0.528595221457009;0.961213816431732,0.975178648424242,0.569545808080956;0.973433921233276,0.987179065969697,0.608337748116230;0.988362068000000,0.998364143000000,0.644924005000000];
elseif get(H.colormap, 'Value') == 25 % magma
	cmap = [0.00146159096000000,0.000466127766000000,0.0138655200000000;0.00396963249787467,0.00295782740809874,0.0273104854393939;0.00785667780827875,0.00659792290147526,0.0461656953848485;0.0130792148733772,0.0112257533463670,0.0665074171272727;0.0196678017616254,0.0167072290056517,0.0870164943363636;0.0277090244894271,0.0228930878425070,0.107803754121212;0.0373537945495923,0.0296086745430926,0.128984709181818;0.0481884228949725,0.0366903137309453,0.150584990090909;0.0592262029289913,0.0437513428509191,0.172708162909091;0.0705722209499949,0.0501428903038421,0.195357867272727;0.0823131585145148,0.0557324419696763,0.218552009545455;0.0945649101113795,0.0604522303538439,0.242268000000000;0.107431830934813,0.0642175434689971,0.266431248181818;0.121020864821821,0.0668858746509098,0.290955213575758;0.135401060496669,0.0684102316624284,0.315577935454545;0.150619874761647,0.0686866003912929,0.339988689636364;0.166652661838188,0.0677916481367519,0.363715844393939;0.183388711792418,0.0659198419727293,0.386174706333333;0.200615203661423,0.0635238948216726,0.406738160272727;0.218095535739107,0.0612106484662445,0.424983023575758;0.235538370813556,0.0597007801980943,0.440559594636364;0.252820013054710,0.0594413931672472,0.453653383090909;0.269804305426194,0.0607408574690535,0.464387015666667;0.286502645903444,0.0635024394392208,0.473180894515151;0.302926383510630,0.0675218434699115,0.480344646545455;0.319113780189581,0.0725120341052126,0.486179326272727;0.335119903520351,0.0781672729642440,0.490971497090909;0.350985666787874,0.0842682619994275,0.494873744636364;0.366753349184250,0.0906170005373253,0.498092491848485;0.382457941431308,0.0970895571224863,0.500718510666667;0.398129294542111,0.103588151949924,0.502856182090909;0.413790436524552,0.110051807845278,0.504569460424242;0.429467150565459,0.116438271726955,0.505902878606061;0.445163096000000,0.122724371000000,0.506900806000000;0.460918625430740,0.128886954465657,0.507565488848485;0.476716010820867,0.134928050278637,0.507931392393940;0.492582630743639,0.140841429406746,0.507994081727273;0.509329079090909,0.146629607480763,0.508589300873485;0.524515405212121,0.152303606109150,0.507229873618836;0.540600729000000,0.157865121373464,0.506389106044112;0.556761543121212,0.163332659090695,0.505215850620604;0.573001300727273,0.168711800038572,0.503733280014819;0.589312913545455,0.174024612022161,0.501900266237818;0.605693982333333,0.179285374176889,0.499722099447472;0.622137057333333,0.184515265025090,0.497181812713551;0.638632839454546,0.189736741408806,0.494262267333334;0.655171937909091,0.194975290837411,0.490967534760319;0.671739381787879,0.200258508592035,0.487267801485588;0.688320409818182,0.205620901746345,0.483174961564414;0.704895679272727,0.211095652046855,0.478666168427356;0.721443969454546,0.216724165127206,0.473743098652091;0.737938515181818,0.222552794269508,0.468404760588146;0.754351323212121,0.228626973857886,0.462649703560083;0.770641950181818,0.235014275617009,0.456495758558116;0.786777335636364,0.241761787433362,0.449946841969349;0.802703594000000,0.248952518583233,0.443025054841077;0.818371546242424,0.256649484421971,0.435766306215733;0.833717167454546,0.264936247977841,0.428215469664703;0.848665468181818,0.273901792686467,0.420430368284165;0.863151987090909,0.283611269949446,0.412496955352519;0.877060488545455,0.294181815349183,0.404521639185233;0.890333693878788,0.305646093513659,0.396635975927565;0.902848141545455,0.318093093463582,0.389011620477855;0.914536298545455,0.331534161396806,0.381834800851296;0.925323023969697,0.345970754366781,0.375319978264204;0.935139844303030,0.361375304989207,0.369690039320443;0.944006448000000,0.377642889000000,0.365136328000000;0.951873471606061,0.394691302771497,0.361876665974739;0.958840615666667,0.412380228926801,0.359956421221783;0.964938695545455,0.430569882156238,0.359513108288860;0.970256725848485,0.449137421949103,0.360529004573765;0.974876232818182,0.467970515953116,0.362972209805602;0.978862331545455,0.486976844361431,0.366823367427078;0.982315711363636,0.506076211231413,0.371944633729994;0.985271162848485,0.525221572274520,0.378317349457379;0.987807335272727,0.544368653518903,0.385782917665487;0.989950356151515,0.563500450610526,0.394284979665672;0.991770686000000,0.582576935977516,0.403726455418414;0.993276389000000,0.601606130700794,0.414016148522486;0.994516603212121,0.620570178810127,0.425105381646187;0.995500435969697,0.639471906086101,0.436895180786394;0.996252059454545,0.658319055920175,0.449360950421359;0.996806738575758,0.677093558559539,0.462419504421512;0.997163117363636,0.695815596806649,0.476042482444242;0.997334562909091,0.714491410452500,0.490190810638697;0.997341824090909,0.733109808085957,0.504819031935832;0.997182061575758,0.751707754118951,0.519922922213019;0.996882672909091,0.770250806213677,0.535451177833651;0.996436258333333,0.788784593695108,0.551410576685972;0.995871274424242,0.807280515735869,0.567764062926975;0.995184503454545,0.825758484186287,0.584508787891694;0.994404788484849,0.844225426240777,0.601627866275212;0.993554996575758,0.862645005470651,0.619092775521772;0.992617645545455,0.881101684326737,0.636922755508793;0.991644614909091,0.899505148501783,0.655063315008503;0.990678935515152,0.917915809762457,0.673495346953656;0.989710901818182,0.936308315019579,0.692195255568149;0.988771666121212,0.954683151382698,0.711124451497506;0.987887716454545,0.973094593288114,0.730242033067517;0.987052509000000,0.991437853000000,0.749504188000000];
elseif get(H.colormap, 'Value') == 26 % plasma
	cmap = [0.0503832136000000,0.0298028976000000,0.527974883000000;0.0815823807877956,0.0265867041616092,0.540684671000000;0.107355169340663,0.0241960396818818,0.551989044484848;0.130055959529551,0.0224284389385021,0.562206488000000;0.150963769899172,0.0210020183647598,0.571623448878788;0.170659552102410,0.0197629613348841,0.580402518363636;0.189458576380101,0.0185996376756421,0.588637794181818;0.207643102940095,0.0174279699606346,0.596421397545455;0.225301872688235,0.0162007630133308,0.603770644212121;0.242598378265279,0.0148813508620481,0.610733389727273;0.259588036546517,0.0134472741785156,0.617307058212121;0.276337220269479,0.0119025077210060,0.623494091333333;0.292893648330705,0.0102714993782007,0.629290897727273;0.309274715702800,0.00858101792647744,0.634666541757576;0.325529158909198,0.00687539827389696,0.639621313000000;0.341650564862912,0.00521919672377208,0.644106100818182;0.357670324457706,0.00368037854366705,0.648114138151515;0.373587164644139,0.00234681952524928,0.651605264818182;0.389405956422400,0.00131800879488230,0.654548395181818;0.405133198647192,0.000689094521384467,0.656926097757576;0.420755875278142,0.000606100905319985,0.658681816363636;0.436278993165460,0.00116457098773206,0.659821798090909;0.451690623877970,0.00252963535096137,0.660286766333333;0.466983921357964,0.00481978013088795,0.660080674393939;0.482146201834980,0.00819085131002113,0.659177593000000;0.497168732943481,0.0128039450697855,0.657558703424243;0.512032716574328,0.0187575817324091,0.655239315090909;0.526738848006019,0.0262870398582799,0.652183564090909;0.541253177578868,0.0354365503833947,0.648442118424242;0.555581760485189,0.0460623636178491,0.643999015151515;0.569697622830225,0.0569398273251149,0.638896913000000;0.583589396308280,0.0679321395407872,0.633162289818182;0.597263474449149,0.0790301880894014,0.626824595757576;0.610667469000000,0.0902039303000000,0.619950811000000;0.623836675181818,0.101447557584133,0.612560080838201;0.636757831030303,0.112755522437882,0.604730476067744;0.649416458363636,0.124101192641246,0.596504589747760;0.661815243878788,0.135478908455582,0.587944691745968;0.673955190303030,0.146879660768836,0.579108238920008;0.685831136727273,0.158286789168903,0.570042708688667;0.697458333757576,0.169706894882675,0.560808730453804;0.708826776060606,0.181117753758607,0.551441117489391;0.719956296272727,0.192531302993559,0.541992432847761;0.730846036333333,0.203936499160041,0.532493983337734;0.741505738666667,0.215334650515528,0.522982180953011;0.751946522090909,0.226729739332939,0.513482869792766;0.762168657242424,0.238114989727708,0.504011282879754;0.772190498181818,0.249504237740860,0.494591589945520;0.782008446181818,0.260888390328339,0.485230372282859;0.791638609000000,0.272281431303064,0.475941595252205;0.801082810515152,0.283683906874827,0.466724084059951;0.810346632454545,0.295101291752511,0.457579992809514;0.819438717242424,0.306542173393512,0.448517266689175;0.828354612848485,0.318007145711176,0.439516850465082;0.837106149636364,0.329510637411159,0.430589153422853;0.845686518333333,0.341052140294506,0.421717568715355;0.854101781787879,0.352644734685166,0.412901697651499;0.862348915545455,0.364293805375540,0.404131887770853;0.870424443666667,0.376006253633586,0.395397204434765;0.878330569363636,0.387592346112036,0.386501689843391;0.886053636545455,0.399640114467872,0.378028082854842;0.893598925060606,0.411605256867961,0.369362060525727;0.900951841666667,0.423648956320469,0.360708674866815;0.908110384000000,0.435804736705972,0.352056236356083;0.915065908454545,0.448074507504643,0.343400955948958;0.921805652030303,0.460453173834215,0.334741039051357;0.928329275000000,0.472975465000000,0.326066550000000;0.934612544121212,0.485606184423229,0.317385904391242;0.940659125666667,0.498392429028170,0.308685672625678;0.946448815909091,0.511314420914924,0.299973503727936;0.951975104242424,0.524387760112599,0.291248773002625;0.957226451212121,0.537620043783125,0.282508460022751;0.962184404090909,0.551001532800762,0.273763441238937;0.966850808454545,0.564555761913269,0.265015037698232;0.971192722696970,0.578262908971352,0.256269885881504;0.975216415454546,0.592146646516460,0.247536698277106;0.978899223575758,0.606196083659726,0.238832215174876;0.982230840666667,0.620416963499396,0.230171497594631;0.985200593090909,0.634816659486345,0.221567957914143;0.987781899242424,0.649384314469667,0.213056392841293;0.989980536060606,0.664134812298712,0.204664041574770;0.991759461636364,0.679054050392784,0.196443526629633;0.993121761575758,0.694154252342995,0.188439001779935;0.994041833030303,0.709429736461378,0.180722256300012;0.994502779818182,0.724880985557720,0.173377462450791;0.994498941575758,0.740509760647437,0.166492641839155;0.993991486363636,0.756309810346189,0.160212905824302;0.992985247636364,0.772286712379486,0.154629980669400;0.991438210000000,0.788435499056204,0.149931542862865;0.989359350090909,0.804749959302527,0.146244864397980;0.986711400727273,0.821233241660880,0.143703110258317;0.983488164848485,0.837877046489316,0.142439453351283;0.979690508272727,0.854668834730875,0.142448146001543;0.975271192090909,0.871625557374025,0.143738785611683;0.970279664727273,0.888707868358415,0.146051808241278;0.964702926090909,0.905927564523120,0.149010339993564;0.958602670181818,0.923253649231005,0.151796687168694;0.952114072393939,0.940649752191961,0.152924869273177;0.945590474366293,0.958043580545455,0.148864760271971;0.940015097000001,0.975158357000000,0.131325517000000];
elseif get(H.colormap, 'Value') == 27
	cmap = hsv(100);
elseif get(H.colormap, 'Value') == 28
	cmap = hot(100);
elseif get(H.colormap, 'Value') == 29
	cmap = cool(100);
elseif get(H.colormap, 'Value') == 30
	cmap = spring(100);
elseif get(H.colormap, 'Value') == 31
	cmap = summer(100);
elseif get(H.colormap, 'Value') == 32
	cmap = winter(100);
elseif get(H.colormap, 'Value') == 33
	cmap = gray(100);
elseif get(H.colormap, 'Value') == 34
	cmap = bone(100);
elseif get(H.colormap, 'Value') == 35
	cmap = copper(100);
elseif get(H.colormap, 'Value') == 36
	cmap = pink(100);
elseif get(H.colormap, 'Value') == 37
	cmap = lines(100);
elseif get(H.colormap, 'Value') == 38
	cmap = colorcube(100);
elseif get(H.colormap, 'Value') == 39
	cmap = prism(100);
elseif get(H.colormap, 'Value') == 40
	cmap = flag(100);	
end

if get(H.colormap,'Value') > 20 
	cmap(1:100-str2num(get(H.Peak,'String')),:) = 1;
	colormap(cmap)
end

fig = uifigure;
set(fig, 'Position', [800         500         400         75])
d = uiprogressdlg(fig,'Message','Making plots! Please wait...');

% Main plots
for i = 1:N
	
	if H.export_plot == 0 && H.save_plot == 0
		ax(i) = axes(H.axes1, 'Position', pos(i,:));
	end
	if H.export_plot == 1 || H.save_plot == 1
		ax(i) = axes(F, 'Position', pos(i,:));
	end
	hold on
	if get(H.plotKDE,'Value') == 1
		if get(H.plot_heat,'Value') == 1
			surf(ax(i),X1,Y1,density1(:,:,i),'FaceAlpha',transp,'EdgeColor','none');
		end
	end
	if get(H.plotCDF,'Value') == 1
		if get(H.plot_heat,'Value') == 1
			surf(ax(i),X1,Y1,CDF1_Q1(:,:,i),'FaceAlpha',transp,'EdgeColor','none');
		end
	end
	ax(i).TickDir = 'out';
	ax(i).TickLength = [0.01 0.02];
	if get(H.d2,'Value') == 1
		if axoffx(i,1) == 1
			ax(i).XTickLabel = [];
		end
		if axoffx(i,1) == 0
			xlabel(get(H.x_lab,'String'))
		end
		if axoffyz(i,1) == 1
			ax(i).YTickLabel = [];
			ax(i).ZTickLabel = [];
		end
		if axoffyz(i,1) == 0
			ylabel(get(H.y_lab,'String'))
			zlabel(get(H.z_lab,'String'))
		end
		title(Name(i,1), 'Interpreter', 'none')
		axis([str2double(get(H.xmin,'String')),str2double(get(H.xmax,'String')),str2double(get(H.ymin,'String')),str2double(get(H.ymax,'String'))]);
		view(2)
	end
	if get(H.d3,'Value') == 1
		if axoffx(i,1) == 0
			xlabel(get(H.x_lab,'String'))
		end
		if axoffyz(i,1) == 0
			ylabel(get(H.y_lab,'String'))
			zlabel(get(H.z_lab,'String'))
		end
		title(Name(i,1), 'Interpreter', 'none')
		view(3)
	end
	if get(H.gridon,'Value') == 1
		grid on
	end
	box on
	axis square
	
	if get(H.plot_scat3,'Value') == 1
		data2 = data1(:,i*2-1:i*2);
		data2 = data2(any(data2 ~= 0,2),:);
		for j = 1:length(data2(:,1))
			tmpx = val2ind(X1(1,:),data2(j,1));
			tmpy = val2ind(Y1(:,1),data2(j,2));
			X_index(j,1) = tmpx(1,1);
			Y_index(j,1) = tmpy(1,1);
			clear tmpx
			clear tmpy
		end
		for j = 1:length(data2(:,1))
			Z(j,1) = density1(Y_index(j,1),X_index(j,1),i);
		end
		scatter3(data2(:,1),data2(:,2),Z + Z.*0.05, size1, mark, 'MarkerEdgeColor', edge, 'MarkerFaceColor', face);
		clear data2 Z
	end
	
	if get(H.Peak_chk,'Value') == 1
		if get(H.plotKDE,'Value') == 1
			max_density = max(max(density1(:,:,i)));
			max_density_conf = max_density - max_density*str2num(get(H.Peak,'String'))*.01;
			contour3(X1,Y1,density1(:,:,i),[max_density_conf max_density_conf],cont, 'LineWidth', str2num(get(H.contour_w,'String')));
			clear max_density max_density
		end
		if get(H.plotCDF,'Value') == 1
			max_density = max(max(CDF1_Q1(:,:,i)));
			max_density_conf = max_density - max_density*str2num(get(H.Peak,'String'))*.01;
			contour3(X1,Y1,CDF1_Q1(:,:,i),[max_density_conf max_density_conf],cont, 'LineWidth', str2num(get(H.contour_w,'String')));
			clear max_density max_density
		end
	end
	
	if get(H.Vol_chk,'Value') == 1
		if get(H.plotKDE,'Value') == 1
			contour_level = findsig (density1(:,:,i), str2num(get(H.Vol,'String'))*.01);
			contour3(X1,Y1,density1(:,:,i),[contour_level contour_level],cont, 'LineWidth', str2num(get(H.contour_w,'String')));
			clear contour_level
		end
		if get(H.plotCDF,'Value') == 1
			max_density = max(max(CDF1_Q1(:,:,i)));
			max_density_conf = max_density - max_density*str2num(get(H.Peak,'String'))*.01;
			contour3(X1,Y1,CDF1_Q1(:,:,i),[max_density_conf max_density_conf],cont, 'LineWidth', str2num(get(H.contour_w,'String')));
			clear max_density max_density
		end
	end
	
	d.Value = i/N;
	d.Message = 'Making plots! Please wait...';
	
end


if get(H.syncax,'Value') == 1 %option to synchronize axes
	Link = linkprop(ax,{'CameraUpVector', 'CameraPosition', 'CameraTarget', 'XLim', 'YLim', 'ZLim'});
	setappdata(gcf, 'StoreTheLink', Link);
end

if H.save_plot == 1
	[file,path] = uiputfile('*.eps','Save file');
	if get(H.Peak_chk,'Value') == 1 && get(H.plot_heat,'Value') == 0 && get(H.plot_scat3,'Value') == 0
		print(F,'-depsc','-painters',[path file]);
		epsclean([path file]);
	elseif get(H.Vol_chk,'Value') == 1 && get(H.plot_heat,'Value') == 0 && get(H.plot_scat3,'Value') == 0
		print(F,'-depsc','-painters',[path file]);
		epsclean([path file]);
	elseif get(H.plot_heat,'Value') == 1
		print(F,'-depsc',[path file]);
	else
		print(F,'-depsc','-painters',[path file]);
	end
end
H.export_plot = 0;
H.save_plot = 0;
close(fig)
guidata(hObject,H);

function RunAllSave_Callback(hObject, eventdata, H)
dat{H.N*5+16,H.N+1} = [];
dat(1,1) = {'DZstats2D Results'};
dat(3,1) = {'Cross-correlation'};
dat(4,2:H.N+1) = H.Name;
dat(5:H.N+4,1) = H.Name;
dat(5:H.N+4,2:H.N+1) = num2cell(H.R2D);

dat(H.N+6,1) = {'Likeness'};
dat(H.N+7,2:H.N+1) = H.Name;
dat(H.N+8:H.N*2+7,1) = H.Name;
dat(H.N+8:H.N*2+7,2:H.N+1) = num2cell(H.L2D);

dat(H.N*2+9,1) = {'Similarity'};
dat(H.N*2+10,2:H.N+1) = H.Name;
dat(H.N*2+11:H.N*3+10,1) = H.Name;
dat(H.N*2+11:H.N*3+10,2:H.N+1) = num2cell(H.S2D);

dat(H.N*3+12,1) = {'K-S Test D'};
dat(H.N*3+13,2:H.N+1) = H.Name;
dat(H.N*3+14:H.N*4+13,1) = H.Name;
dat(H.N*3+14:H.N*4+13,2:H.N+1) = num2cell(H.D2D);

dat(H.N*4+15,1) = {'Kuiper Test V'};
dat(H.N*4+16,2:H.N+1) = H.Name;
dat(H.N*4+17:H.N*5+16,1) = H.Name;
dat(H.N*4+17:H.N*5+16,2:H.N+1) = num2cell(H.V2D);

dat(H.N*5+18,1) = {'Parameters'};
dat(H.N*5+19,1:2) = [{'X label'},get(H.x_lab,'String')];
dat(H.N*5+20,1:2) = [{'Y label'},get(H.y_lab,'String')];
dat(H.N*5+21,1:2) = [{'Z label'},get(H.z_lab,'String')];
dat(H.N*5+22,1:2) = [{'X min'},str2num(get(H.xmin,'String'))];
dat(H.N*5+23,1:2) = [{'X max'},str2num(get(H.xmax,'String'))];
dat(H.N*5+24,1:2) = [{'Y min'},str2num(get(H.ymin,'String'))];
dat(H.N*5+25,1:2) = [{'Y max'},str2num(get(H.ymax,'String'))];
dat(H.N*5+26,1) = {'Grid on?'};
if get(H.gridon, 'Value') == 1
	dat(H.N*5+26,2) = {'Yes'};
else
	dat(H.N*5+26,2) = {'No'};
end
dat(H.N*5+27,1) = {'Contour color'};
if get(H.contour_color, 'Value') == 1
	dat(H.N*5+27,2) = {'Red'};
elseif get(H.contour_color, 'Value') == 2
	dat(H.N*5+27,2) = {'Green'};
elseif get(H.contour_color, 'Value') == 3
	dat(H.N*5+27,2) = {'Blue'};
elseif get(H.contour_color, 'Value') == 4
	dat(H.N*5+27,2) = {'Yelow'};
elseif get(H.contour_color, 'Value') == 5
	dat(H.N*5+27,2) = {'Magenta'};
elseif get(H.contour_color, 'Value') == 6
	dat(H.N*5+27,2) = {'Cyan'};	
elseif get(H.contour_color, 'Value') == 7
	dat(H.N*5+27,2) = {'White'};
elseif get(H.contour_color, 'Value') == 8
	dat(H.N*5+27,2) = {'Black'};
elseif get(H.contour_color, 'Value') == 9
	dat(H.N*5+27,2) = {'None'};	
end
dat(H.N*5+28,1:2) = [{'Contour width'},str2num(get(H.contour_w,'String'))];
dat(H.N*5+29,1) = {'Contour type'};
dat(H.N*5+30,1) = {'Contour percent'};
if get(H.Peak_chk, 'Value') == 1
	dat(H.N*5+29,2) = {'From peak density'};
	dat(H.N*5+30,2) = {str2num(get(H.Peak,'String'))};
end
if get(H.Vol_chk, 'Value') == 1
	dat(H.N*5+29,2) = {'By volume'};
	dat(H.N*5+30,2) = {str2num(get(H.Vol,'String'))};
end
dat(H.N*5+31,1) = {'Scatter plot?'};
dat(H.N*5+32,1) = {'Marker type'};
dat(H.N*5+33,1) = {'Marker size'};
dat(H.N*5+34,1) = {'Face color'};
dat(H.N*5+35,1) = {'Edge color'};
dat(H.N*5+36,1) = {'Edge width'};
if get(H.plot_scat3,'Value') == 1
	dat(H.N*5+31,2) = {'Yes'};
	if get(H.marker, 'Value') == 1
		dat(H.N*5+32,2) = {'Circle'};
	elseif get(H.marker, 'Value') == 2
		dat(H.N*5+32,2) = {'Plus sign'};
	elseif get(H.marker, 'Value') == 3
		dat(H.N*5+32,2) = {'Asterisk'};
	elseif get(H.marker, 'Value') == 4
		dat(H.N*5+32,2) = {'Point'};
	elseif get(H.marker, 'Value') == 5
		dat(H.N*5+32,2) = {'Cross'};
	elseif get(H.marker, 'Value') == 6
		dat(H.N*5+32,2) = {'Square'};
	elseif get(H.marker, 'Value') == 7
		dat(H.N*5+32,2) = {'Diamond'};
	elseif get(H.marker, 'Value') == 8
		dat(H.N*5+32,2) = {'Upward-pointing triangle'};
	elseif get(H.marker, 'Value') == 9
		dat(H.N*5+32,2) = {'Downward-pointing triangle'};
	elseif get(H.marker, 'Value') == 10
		dat(H.N*5+32,2) = {'Right-pointing triangle'};
	elseif get(H.marker, 'Value') == 11
		dat(H.N*5+32,2) = {'Left-pointing triangle'};
	elseif get(H.marker, 'Value') == 12
		dat(H.N*5+32,2) = {'Five-pointed star (pentagram)'};
	elseif get(H.marker, 'Value') == 13
		dat(H.N*5+32,2) = {'Six-pointed star (hexagram)'};
	elseif get(H.marker, 'Value') == 14
		dat(H.N*5+32,2) = {'None'};
	end
	dat(H.N*5+33,2) = {str2num(get(H.size1,'String'))};	
	if get(H.s_color, 'Value') == 1
		dat(H.N*5+34,2) = {'Red'};
	elseif get(H.s_color, 'Value') == 2
		dat(H.N*5+34,2) = {'Green'};
	elseif get(H.s_color, 'Value') == 3
		dat(H.N*5+34,2) = {'Blue'};
	elseif get(H.s_color, 'Value') == 4
		dat(H.N*5+34,2) = {'Yelow'};
	elseif get(H.s_color, 'Value') == 5
		dat(H.N*5+34,2) = {'Magenta'};
	elseif get(H.s_color, 'Value') == 6
		dat(H.N*5+34,2) = {'Cyan'};
	elseif get(H.s_color, 'Value') == 7
		dat(H.N*5+34,2) = {'White'};
	elseif get(H.s_color, 'Value') == 8
		dat(H.N*5+34,2) = {'Black'};
	elseif get(H.s_color, 'Value') == 9
		dat(H.N*5+34,2) = {'None'};
	end
	if get(H.s_color, 'Value') == 1
		dat(H.N*5+35,2) = {'Red'};
	elseif get(H.s_color, 'Value') == 2
		dat(H.N*5+35,2) = {'Green'};
	elseif get(H.s_color, 'Value') == 3
		dat(H.N*5+35,2) = {'Blue'};
	elseif get(H.s_color, 'Value') == 4
		dat(H.N*5+35,2) = {'Yelow'};
	elseif get(H.s_color, 'Value') == 5
		dat(H.N*5+35,2) = {'Magenta'};
	elseif get(H.s_color, 'Value') == 6
		dat(H.N*5+35,2) = {'Cyan'};
	elseif get(H.s_color, 'Value') == 7
		dat(H.N*5+35,2) = {'White'};
	elseif get(H.s_color, 'Value') == 8
		dat(H.N*5+35,2) = {'Black'};
	elseif get(H.s_color, 'Value') == 9
		dat(H.N*5+35,2) = {'None'};
	end	
	dat(H.N*5+36,2) = {str2num(get(H.edge_t,'String'))};
else
	dat(H.N*5+31,2) = {'No'};
	dat(H.N*5+32,2) = {'N/A'};
	dat(H.N*5+33,2) = {'N/A'};
	dat(H.N*5+34,2) = {'N/A'};
	dat(H.N*5+35,2) = {'N/A'};
	dat(H.N*5+36,2) = {'N/A'};
end
dat(H.N*5+37,1) = {'Density plot?'};
if get(H.plot_heat, 'Value') == 1
	dat(H.N*5+37,2) = {'Yes'};
else
	dat(H.N*5+37,2) = {'No'};
end
%get(H.colormap,'Value');
dat(H.N*5+38,1:2) = [{'Grid spacing'},str2num(get(H.gridspacing,'String'))];
dat(H.N*5+39,1) = {'Transparency'};
if get(H.transparency, 'Value') == 1
	dat(H.N*5+39,2) = num2cell(1);
elseif get(H.transparency, 'Value') == 2
	dat(H.N*5+39,2) = num2cell(0.75);
elseif get(H.transparency, 'Value') == 3
	dat(H.N*5+39,2) = num2cell(0.5);
elseif get(H.transparency, 'Value') == 4
	dat(H.N*5+39,2) = num2cell(0.25);
elseif get(H.transparency, 'Value') == 5
	dat(H.N*5+39,2) = num2cell(0);
end
dat(H.N*5+40,1) = {'Bandwidth type'};
if get(H.setbandwidth, 'Value') == 1
	dat(H.N*5+40,2) = {'Set'};
end
if get(H.optimized, 'Value') == 1
	dat(H.N*5+40,2) = {'Optimized'};
end
dat(H.N*5+41,1) = {'Bandwidths'};
dat(H.N*5+42,1) = {'Name'};
dat(H.N*5+42,2) = {'Bandwidth X'};
dat(H.N*5+42,3) = {'Bandwidth Y'};
dat(H.N*5+43:H.N*5+42+H.N,1) = H.Name;
if get(H.setbandwidth, 'Value') == 1
	dat(H.N*5+43:H.N*5+42+H.N,2) = {str2num(get(H.setX,'String'))};
	dat(H.N*5+43:H.N*5+42+H.N,3) = {str2num(get(H.setY,'String'))};
end
if get(H.optimized, 'Value') == 1
	dat(H.N*5+43:H.N*5+42+H.N,2:3) = num2cell(H.bandwidth1);
end

[file,path] = uiputfile('*.xls','Save file');
writetable(table(dat),[path file], 'FileType', 'spreadsheet', 'WriteVariableNames', 0);

function FAQs_Callback(hObject, eventdata, H)
%{
txt = [...
{'What is a citable reference for this program?'};...
{'Reference: Sundell, K.E. and Saylor, J.E. (in prep), Two-dimensional quantitative comparison'};...
{'of paired geochronology-geochemistry data, Earth and Planetary Science Letters.'};...
{'     '};...
{'What is the best format to save vector images?'};...
strcat({'     '},{'The program automatically saves as .eps when pressing the Save Plot'});...
strcat({'     '},{'push button. Alternatively, you may export the figure using the Export'});... 
strcat({'     '},{'Plot push button. Here you may save as .svg or .tif which also work well'});... 
strcat({'     '},{'for editing.'});
{'     '};...
{'Why can?t I edit the axes in Illustrator after exporting?'};...
strcat({'     '},{'If an intensity map was exported then the figure will no longer be a vector'});...
strcat({'     '},{'file. Rather, it will be a raster (basically a grid of pixels, like a digital'});... 
strcat({'     '},{'photo). The best way to make an intensity plot figure with editable axes'});... 
strcat({'     '},{'is to export the intensity map separately. The figures will be the exact'});... 
strcat({'     '},{'same size and shape upon opening in Illustrator. A helpful tool is'});... 
strcat({'     '},{'ctrl+F (command+F for mac) which is ?paste in front?. This places'});... 
strcat({'     '},{'cut/copied objects in the same location as they were.'});...
{'     '};...
{'What are the steps to make a combined intensity plot + scatter plot + contour'};...
{'plot where I can easily fill/edit the contours?'};...
strcat({'     '},{'This requires different rendering of graphics when saving different types of'});... 
strcat({'     '},{'plots (i.e., scatter vs intensity vs lines, etc). These different renderings are'});... 
strcat({'     '},{'built into the program. So unfortunately, you will need to save and manipulate'});... 
strcat({'     '},{'multiple figures... Luckily, this is pretty easy! Here are the steps:'});...
strcat({'          '},{'(1) Plot only the intensity map. Save using the Save Plot pushbutton.'});...
strcat({'          '},{'(2) Plot only the scatter plot. The program will save as a vector image.'});...
strcat({'          '},{'(3) Plot only the contours. The program will save as a vector image, then'});... 
strcat({'              '},{'simplify the polygons for ease of editing. You will thank yourself for'});...
strcat({'              '},{'doing this separately! Otherwise it is a pain to fill them in Illustrator.'});...
strcat({'          '},{'(4) Open the intensity plot in Illustrator. Add a clipping mask or white'});...
strcat({'              '},{'boxes to cover the uneditable axes.'});... 
strcat({'          '},{'(5) Open the Contour Plot. Copy and "paste in front" (ctrl+f or command+'});...
strcat({'              '},{'f) in the Intensity Plot file. Do this in a new layer in Illustrator if you have'});...
strcat({'              '},{'used a clipping mask.'});...
strcat({'          '},{'(6) Repeat part 5 for the Scatter Plot. I recommend placing the different'});...
strcat({'              '},{'plots in different layers. Organization is key!'})];
%}
FAQs

function exampledata_Callback(hObject, eventdata, H)
ExampleData

function gridspacing_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	build_Callback(hObject, eventdata, H)
end

function setbandwidth_Callback(hObject, eventdata, H)
set(H.setbandwidth,'Value',1);
set(H.optimized,'Value',0);
set(H.printkern,'Enable','off')
if H.dataloaded == 1;
	build_Callback(hObject, eventdata, H)
end

function setX_Callback(hObject, eventdata, H)
set(H.setbandwidth,'Value',1);
set(H.optimized,'Value',0);
set(H.printkern,'Enable','off')
if H.dataloaded == 1;
	build_Callback(hObject, eventdata, H)
end

function setY_Callback(hObject, eventdata, H)
set(H.setbandwidth,'Value',1);
set(H.optimized,'Value',0);
set(H.printkern,'Enable','off')
if H.dataloaded == 1;
	build_Callback(hObject, eventdata, H)
end

function optimized_Callback(hObject, eventdata, H)
set(H.setbandwidth,'Value',0);
set(H.optimized,'Value',1);
set(H.printkern,'Enable','on')
if H.dataloaded == 1;
	build_Callback(hObject, eventdata, H)
end

function printkern_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	bandwidth1 = H.bandwidth1;
	dat = [H.Name,num2cell(bandwidth1)];
	h = figure('Name','Optimized Kernel Bandwidths','NumberTitle','off', 'MenuBar', 'none');
	u = uitable('data',dat, 'ColumnNames', {'Name', 'X', 'Y'});
	set(h,'outerposition', [680 328 280+15 320]);
	set(u,'Position',[1 1 280 300])
	set(u,'Units','normalized')
end

function x_lab_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function xmin_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	build_Callback(hObject, eventdata, H)
end

function xmax_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	build_Callback(hObject, eventdata, H)
end

function y_lab_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function ymin_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	build_Callback(hObject, eventdata, H)
end

function ymax_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	build_Callback(hObject, eventdata, H)
end

function z_lab_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function gridon_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function plot_scat3_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function marker_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function s_color_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function size1_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function edge_t_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function contour_color_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function contour_w_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function Peak_chk_Callback(hObject, eventdata, H)
%set(H.Peak_chk,'Value',1)
set(H.Vol_chk,'Value',0)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function Peak_Callback(hObject, eventdata, H)
set(H.Peak_chk,'Value',1)
set(H.Vol_chk,'Value',0)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function Vol_chk_Callback(hObject, eventdata, H)
set(H.Peak_chk,'Value',0)
%set(H.Vol_chk,'Value',1)

if get(H.colormap,'Value') > 20 
	set(H.colormap,'Value',get(H.colormap,'Value')-20)
end
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function Vol_Callback(hObject, eventdata, H)
set(H.Peak_chk,'Value',0)
set(H.Vol_chk,'Value',1)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function MDSplot_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	if get(H.plot_R2D,'Value') == 1
		colors = jet(H.N);
		[XY,stress,disparities] = mdscale_new(1-H.R2D,2,'Criterion','stress'); % 2D MDS plot and metric squared stress only
		X=XY(:,1);
		Y=XY(:,2);
		dx=0.01;
		f = figure('Name','2D Multidimensional Scaling Bivariate Cross-correlation Values','NumberTitle','off');
		hold on
		for i=1:H.N
			scatter(X(i),Y(i),250, 'o', 'MarkerFaceColor',colors(i, :),'MarkerEdgeColor','black');
		end
		[rubbish,i] = sort(H.R2D,1,'descend');
		YX=XY(i(2,:),:);
		YZ=XY(i(3,:),:);
		text(X+dx,Y+dx,H.Name, 'FontSize',16, 'Interpreter', 'none');
		set(gca,'FontSize',16)
		%title('Cross-correlation')
		xlabel('Dimension I')
		ylabel('Dimension II')
	end
	if get(H.plot_L2D,'Value') == 1
		colors = jet(H.N);
		[XY,stress,disparities] = mdscale_new(1-H.L2D,2,'Criterion','stress'); % 2D MDS plot and metric squared stress only
		X=XY(:,1);
		Y=XY(:,2);
		dx=0.01;
		f = figure('Name','2D Multidimensional Scaling of Likeness Values','NumberTitle','off');
		hold on
		for i=1:H.N
			scatter(X(i),Y(i),250, 'o', 'MarkerFaceColor',colors(i, :),'MarkerEdgeColor','black');
		end
		[rubbish,i] = sort(H.L2D,1,'descend');
		YX=XY(i(2,:),:);
		YZ=XY(i(3,:),:);
		text(X+dx,Y+dx,H.Name, 'FontSize',16, 'Interpreter', 'none');
		set(gca,'FontSize',16)
		%title('Likeness')
		xlabel('Dimension I')
		ylabel('Dimension II')
	end
	if get(H.plot_S2D,'Value') == 1
		colors = jet(H.N);
		[XY,stress,disparities] = mdscale_new(1-H.S2D,2,'Criterion','stress'); % 2D MDS plot and metric squared stress only
		X=XY(:,1);
		Y=XY(:,2);
		dx=0.01;
		f = figure('Name','2D Multidimensional Scaling of Bivariate Similarity Values','NumberTitle','off');
		hold on
		for i=1:H.N
			scatter(X(i),Y(i),250, 'o', 'MarkerFaceColor',colors(i, :),'MarkerEdgeColor','black');
		end
		[rubbish,i] = sort(H.S2D,1,'descend');
		YX=XY(i(2,:),:);
		YZ=XY(i(3,:),:);
		text(X+dx,Y+dx,H.Name, 'FontSize',16, 'Interpreter', 'none');
		set(gca,'FontSize',16)
		%title('Similarity')
		xlabel('Dimension I')
		ylabel('Dimension II')
	end
	if get(H.plot_D2D,'Value') == 1
		colors = jet(H.N);
		[XY,stress,disparities] = mdscale_new(H.D2D,2,'Criterion','stress'); % 2D MDS plot and metric squared stress only
		X=XY(:,1);
		Y=XY(:,2);
		dx=0.01;
		f = figure('Name','2D Multidimensional Scaling of Bivariate K-S Test D Values','NumberTitle','off');
		hold on
		for i=1:H.N
			scatter(X(i),Y(i),250, 'o', 'MarkerFaceColor',colors(i, :),'MarkerEdgeColor','black');
		end
		[rubbish,i] = sort(H.D2D,1,'descend');
		YX=XY(i(2,:),:);
		YZ=XY(i(3,:),:);
		text(X+dx,Y+dx,H.Name, 'FontSize',16, 'Interpreter', 'none');
		set(gca,'FontSize',16)
		%title('K-S Test D Values')
		xlabel('Dimension I')
		ylabel('Dimension II')
	end
	if get(H.plot_V2D,'Value') == 1
		colors = jet(H.N);
		[XY,stress,disparities] = mdscale_new(H.V2D,2,'Criterion','stress'); % 2D MDS plot and metric squared stress only
		X=XY(:,1);
		Y=XY(:,2);
		dx=0.01;
		f = figure('Name','2D Multidimensional Scaling of Kuiper Test V Values','NumberTitle','off');
		hold on
		for i=1:H.N
			scatter(X(i),Y(i),250, 'o', 'MarkerFaceColor',colors(i, :),'MarkerEdgeColor','black');
		end
		[rubbish,i] = sort(H.V2D,1,'descend');
		YX=XY(i(2,:),:);
		YZ=XY(i(3,:),:);
		text(X+dx,Y+dx,H.Name, 'FontSize',16, 'Interpreter', 'none');
		set(gca,'FontSize',16)
		%title('Kuiper Test V Values')
		xlabel('Dimension I')
		ylabel('Dimension II')
	end
	addToolbarExplorationButtons(f)
end

function MC_Callback(hObject, eventdata, H)
samplesizes = H.samplesizes;
Title = 'Monte Carlo Resampling';
Options.Resize = 'on';
Options.CancelButton = 'on';
Options.ButtonNames = {'OK','Cancel'}; %<- default names, included here just for illustration
Option.Dim = 1; % Horizontal dimension in fields

Prompt = {};
Formats = {};
DefAns = struct([]);
Prompt(1,:) = {[],[],[]};
Formats(1,1).type = 'text';

Prompt(1,:) = {['Monte Carlo resampling routine. If resampling without replacement then the maximum number of subsamples is the smallest sample size. Number of trials is the number of times the input data set is resampled. Results are reported as mean and 1 standard deviation for each metric.'],[],[]};
Formats(1,1).type = 'text';

Prompt(2,:) = {[strcat({'Number of Subsamples (smallest sample size ='},{' '},sprintf('%.0f',min(samplesizes)),{')'})],[],[]};
Formats(2,1).type = 'edit';
Formats(2,1).format = 'integer';
Formats(2,1).limits = [0 999999999]; % 9-digits (positive #)
Formats(2,1).size = 80;
Formats(2,1).unitsloc = 'bottomleft';

Prompt(3,:) = {'Number of Trials',[],[]};
Formats(3,1).type = 'edit';
Formats(3,1).format = 'integer';
Formats(3,1).limits = [0 999999999]; % 9-digits (positive #)
Formats(3,1).size = 80;
Formats(3,1).unitsloc = 'bottomleft';

Prompt(4,:) = {'Type of Resampling',[],[]};
Formats(4,1).type = 'list';
Formats(4,1).format = 'text';
Formats(4,1).style = 'radiobutton';
Formats(4,1).items = {'With Replacement' 'Without Replacement'};

[Answer,Cancelled] = inputsdlg(Prompt,Title,Formats,DefAns,Options);

subsamples = cell2num(Answer(2));
trials = cell2num(Answer(3));
numbers = H.numbers;
data_tmp = H.data_tmp;
Name = H.Name;
N = H.N;
text1 = H.text1;

if get(H.optimized,'Value') == 1
	botev = 1;
	set(H.printkern,'Enable','on')
end
if get(H.setbandwidth,'Value') == 1
	botev = 0;
	bandwidth_x = str2double(get(H.setX,'String'));
	bandwidth_y = str2double(get(H.setY,'String'));
	set(H.printkern,'Enable','off')
end

gridspc = str2num(get(H.gridspacing,'String'));

% pull the names from the headers
for i = 1:(size(data_tmp,2)+1)/2
	Name(i,1) = text1(1,i*2-1);
end

data_tmp = numbers(1:end,:); %use temporary variable
N = size(data_tmp,2)/2; % figure out how many samples

% Filter out any data not in the range set above
for k = 1:N
	for i = 1:length(data_tmp(:,1))
		if cellfun('isempty', data_tmp(i,k*2-1)) == 0 && cellfun('isempty', data_tmp(i,k*2)) == 0
			if cell2num(data_tmp(i,k*2-1)) >= str2double(get(H.xmin,'String')) && cell2num(data_tmp(i,k*2-1)) <= str2double(get(H.xmax,'String')) && ...
					cell2num(data_tmp(i,k*2)) >= str2double(get(H.ymin,'String')) && cell2num(data_tmp(i,k*2)) <= str2double(get(H.ymax,'String'))
				data1(i,k*2-1:k*2) = cell2num(data_tmp(i,k*2-1:k*2));
			end
		end
	end
end

MIN_XY=[str2double(get(H.xmin,'String')),str2double(get(H.ymin,'String'))];
MAX_XY=[str2double(get(H.xmax,'String')),str2double(get(H.ymax,'String'))];

% make 2D kdes and 2D cdfs for samples, save as 3D matrix

f = waitbar(0, 'Calculating! Please wait...');
for t = 1:trials
	for k = 1:N
		data2 = data1(:,k*2-1:k*2);
		data2 = data2(any(data2 ~= 0,2),:);
		if ~isempty(strmatch(Answer(4), 'With Replacement')) == 1
			data3 = datasample(data2,subsamples,1,'Replace',true);
		else
			data3 = datasample(data2,subsamples,1,'Replace',false);
		end
		if botev == 0
			[bandwidth1,density1(:,:,k),X1,Y1] = kde2d_set_kernel(data3, gridspc, MIN_XY, MAX_XY, bandwidth_x, bandwidth_y);
		end
		if botev == 1
			[bandwidth1(k,1:2),density1(:,:,k),X1,Y1] = kde2d(data3, gridspc, MIN_XY, MAX_XY);
		end
		density1(:,:,k) = density1(:,:,k)./sum(sum(density1(:,:,k)));
		CDF1_Q1(:,:,k) = cumsum(cumsum(density1(:,:,k),1),2);    % take the CDF of x at y = max (y) Local CDF for Quadrant 1
		CDF1_Q2(:,:,k) = cumsum(cumsum(density1(:,:,k), 1,'reverse'), 2);            %Local CDF for Quadrant 2
		CDF1_Q3(:,:,k) = cumsum(cumsum(density1(:,:,k), 1,'reverse'), 2, 'reverse'); %Local CDF for Quadrant 3
		CDF1_Q4(:,:,k) = cumsum(cumsum(density1(:,:,k), 1), 2, 'reverse');           %Loval CDF for Quadrant 4
		clear data2 data3
	end
	%2D quantitative comparison
	count = 1;
	for j = 1:N
		for k = 1:N
			name_comp(count,1) = strcat(Name(j,1), {' vs '}, Name(k,1));
			d1 = reshape(density1(:,:,j),size(density1,1)*size(density1,2),1);
			d2 = reshape(density1(:,:,k),size(density1,1)*size(density1,2),1);
			R2D(j,k) = ((sum((d1 - mean(d1)).*(d2 - mean(d2))))/(sqrt((sum((d1 - mean(d1)).*(d1 - mean(d1))))*(sum((d2 - mean(d2)).*(d2 - mean(d2)))))))^2;
			for m = 1:size(density1,1)
				for n = 1:size(density1,2)
					Maps_L(m,n,count) = (abs(density1(m,n,j) - density1(m,n,k))/2); %Likeness map
					Maps_S(m,n,count) = sqrt(density1(m,n,j).*density1(m,n,k)); % Similarity map
				end
			end
			L2D(j,k) = 1 - sum(Maps_L(:,:,count),'All');
			if j == k
				S2D(j,k) = 1;
			else
				S2D(j,k) = sum(Maps_S(:,:,count),'All');
			end
			count = count+1;
			D2Dtmp(j,k,1) = max(max(abs(CDF1_Q1(:,:,j) - CDF1_Q1(:,:,k)),[],1)); %Maximum absolute difference for Quadrant 1
			D2Dtmp(j,k,2) = max(max(abs(CDF1_Q2(:,:,j) - CDF1_Q2(:,:,k)),[],1)); %Maximum absolute difference for Quadrant 2
			D2Dtmp(j,k,3) = max(max(abs(CDF1_Q3(:,:,j) - CDF1_Q3(:,:,k)),[],1)); %Maximum absolute difference for Quadrant 3
			D2Dtmp(j,k,4) = max(max(abs(CDF1_Q4(:,:,j) - CDF1_Q4(:,:,k)),[],1)); %Maximum absolute difference for Quadrant 4
			D2D = max(D2Dtmp, [], 3);
			V2Dtmp(j,k,1) = max( max(CDF1_Q1(:,:,j) - CDF1_Q1(:,:,k),[],1) + max(CDF1_Q1(:,:,k) - CDF1_Q1(:,:,j),[],1) );
			V2Dtmp(j,k,2) = max( max(CDF1_Q2(:,:,j) - CDF1_Q2(:,:,k),[],1) + max(CDF1_Q2(:,:,k) - CDF1_Q2(:,:,j),[],1) );
			V2Dtmp(j,k,3) = max( max(CDF1_Q3(:,:,j) - CDF1_Q3(:,:,k),[],1) + max(CDF1_Q3(:,:,k) - CDF1_Q3(:,:,j),[],1) );
			V2Dtmp(j,k,4) = max( max(CDF1_Q4(:,:,j) - CDF1_Q4(:,:,k),[],1) + max(CDF1_Q4(:,:,k) - CDF1_Q4(:,:,j),[],1) );
			V2Dtmp(j,k,5) = max( max(CDF1_Q1(:,:,j) - CDF1_Q1(:,:,k),[],2) + max(CDF1_Q1(:,:,k) - CDF1_Q1(:,:,j),[],2) );
			V2Dtmp(j,k,6) = max( max(CDF1_Q2(:,:,j) - CDF1_Q2(:,:,k),[],2) + max(CDF1_Q2(:,:,k) - CDF1_Q2(:,:,j),[],2) );
			V2Dtmp(j,k,7) = max( max(CDF1_Q3(:,:,j) - CDF1_Q3(:,:,k),[],2) + max(CDF1_Q3(:,:,k) - CDF1_Q3(:,:,j),[],2) );
			V2Dtmp(j,k,8) = max( max(CDF1_Q4(:,:,j) - CDF1_Q4(:,:,k),[],2) + max(CDF1_Q4(:,:,k) - CDF1_Q4(:,:,j),[],2) );
			V2D = max(V2Dtmp,[],3);
		end
	end
	R2D_out(:,:,t) = R2D;
	L2D_out(:,:,t) = L2D;
	S2D_out(:,:,t) = S2D;
	D2D_out(:,:,t) = D2D;
	V2D_out(:,:,t) = V2D;
	waitbar(t/trials, f, 'Calculating! Please wait...');
end

R2D = mean(R2D_out,3);
L2D = mean(L2D_out,3);
S2D = mean(S2D_out,3);
D2D = mean(D2D_out,3);
V2D = mean(V2D_out,3);

R2D_std = std(R2D_out,[],3);
L2D_std = std(L2D_out,[],3);
S2D_std = std(S2D_out,[],3);
D2D_std = std(D2D_out,[],3);
V2D_std = std(V2D_out,[],3);

%make conditional format color table
if get(H.CF_cmap, 'Value') == 1
	clrs1 = parula(10);
elseif get(H.CF_cmap, 'Value') == 2
	clrs1 = jet(10);
elseif get(H.CF_cmap, 'Value') == 3
	clrs1 = hsv(10);
elseif get(H.CF_cmap, 'Value') == 4
	clrs1 = hot(10);
elseif get(H.CF_cmap, 'Value') == 5
	clrs1 = cool(10);
elseif get(H.CF_cmap, 'Value') == 6
	clrs1 = spring(10);
elseif get(H.CF_cmap, 'Value') == 7
	clrs1 = summer(10);
elseif get(H.CF_cmap, 'Value') == 8
	clrs1 = winter(10);
elseif get(H.CF_cmap, 'Value') == 9
	clrs1 = gray(10);
elseif get(H.CF_cmap, 'Value') == 10
	clrs1 = bone(10);
elseif get(H.CF_cmap, 'Value') == 11
	clrs1 = copper(10);
elseif get(H.CF_cmap, 'Value') == 12
	clrs1 = pink(10);
elseif get(H.CF_cmap, 'Value') == 13
	clrs1 = lines(10);
elseif get(H.CF_cmap, 'Value') == 14
	clrs1 = colorcube(10);
elseif get(H.CF_cmap, 'Value') == 15
	clrs1 = prism(10);
elseif get(H.CF_cmap, 'Value') == 16
	clrs1 = flag(10);
end

clrs = cellstr(rgb2hex(clrs1)); % convert to hex work with html

%Cross-correlation
vals_R2D_rel{N,N} = [];
R2D_mod = R2D;
R2D_mod(R2D == 1) = NaN;
R2D_min = min(min(R2D_mod,[],'omitnan'));
R2D_max = max(max(R2D_mod,[],'omitnan'));
R2D_int = [R2D_min:(R2D_max-R2D_min)/10:R2D_max]';
for i = 1:N
	for j = 1:N
		if i == j
			vals_R2D_rel(i,j) = {sprintf('%.2f ', R2D(i,j))};
		end
		if i ~= j
			if R2D_int(1,1) <= R2D(i,j) && R2D(i,j) < R2D_int(2,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(2,1) <= R2D(i,j) && R2D(i,j) < R2D_int(3,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(3,1) <= R2D(i,j) && R2D(i,j) < R2D_int(4,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(4,1) <= R2D(i,j) && R2D(i,j) < R2D_int(5,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(5,1) <= R2D(i,j) && R2D(i,j) < R2D_int(6,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(6,1) <= R2D(i,j) && R2D(i,j) < R2D_int(7,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(7,1) <= R2D(i,j) && R2D(i,j) < R2D_int(8,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(8,1) <= R2D(i,j) && R2D(i,j) < R2D_int(9,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(9,1) <= R2D(i,j) && R2D(i,j) < R2D_int(10,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(10,1) <= R2D(i,j)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			end
		end
	end
end

vals_R2D{N,N} = [];
for i = 1:N
	for j = 1:N
		if 0 <= R2D(i,j) && R2D(i,j) < 0.1
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.1 <= R2D(i,j) && R2D(i,j) < 0.2
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.2 <= R2D(i,j) && R2D(i,j) < 0.3
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.3 <= R2D(i,j) && R2D(i,j) < 0.4
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.4 <= R2D(i,j) && R2D(i,j) < 0.5
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.5 <= R2D(i,j) && R2D(i,j) < 0.6
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.6 <= R2D(i,j) && R2D(i,j) < 0.7
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.7 <= R2D(i,j) && R2D(i,j) < 0.8
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.8 <= R2D(i,j) && R2D(i,j) < 0.9
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.9 <= R2D(i,j) <= 1.0
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		end
	end
end


%Likeness
vals_L2D_rel{N,N} = [];
L2D_mod = L2D;
L2D_mod(L2D == 1) = NaN;
L2D_min = min(min(L2D_mod,[],'omitnan'));
L2D_max = max(max(L2D_mod,[],'omitnan'));
L2D_int = [L2D_min:(L2D_max-L2D_min)/10:L2D_max]';
for i = 1:N
    for j = 1:N
        if i == j
            vals_L2D_rel(i,j) = {sprintf('%.2f ', L2D(i,j))};
        end
        if i ~= j
            if L2D_int(1,1) <= L2D(i,j) && L2D(i,j) < L2D_int(2,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(2,1) <= L2D(i,j) && L2D(i,j) < L2D_int(3,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(3,1) <= L2D(i,j) && L2D(i,j) < L2D_int(4,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(4,1) <= L2D(i,j) && L2D(i,j) < L2D_int(5,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(5,1) <= L2D(i,j) && L2D(i,j) < L2D_int(6,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(6,1) <= L2D(i,j) && L2D(i,j) < L2D_int(7,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(7,1) <= L2D(i,j) && L2D(i,j) < L2D_int(8,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(8,1) <= L2D(i,j) && L2D(i,j) < L2D_int(9,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(9,1) <= L2D(i,j) && L2D(i,j) < L2D_int(10,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(10,1) <= L2D(i,j)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            end
        end
    end
end
 
vals_L2D{N,N} = [];
for i = 1:N
    for j = 1:N
        if 0 <= L2D(i,j) && L2D(i,j) < 0.1
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.1 <= L2D(i,j) && L2D(i,j) < 0.2
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.2 <= L2D(i,j) && L2D(i,j) < 0.3
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.3 <= L2D(i,j) && L2D(i,j) < 0.4
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.4 <= L2D(i,j) && L2D(i,j) < 0.5
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.5 <= L2D(i,j) && L2D(i,j) < 0.6
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.6 <= L2D(i,j) && L2D(i,j) < 0.7
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.7 <= L2D(i,j) && L2D(i,j) < 0.8
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.8 <= L2D(i,j) && L2D(i,j) < 0.9
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.9 <= L2D(i,j) <= 1.0
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        end
    end
end

%Similarity
vals_S2D_rel{N,N} = [];
S2D_mod = S2D;
S2D_mod(S2D == 1) = NaN;
S2D_min = min(min(S2D_mod,[],'omitnan'));
S2D_max = max(max(S2D_mod,[],'omitnan'));
S2D_int = [S2D_min:(S2D_max-S2D_min)/10:S2D_max]';
for i = 1:N
    for j = 1:N
        if i == j
            vals_S2D_rel(i,j) = {sprintf('%.2f ', S2D(i,j))};
        end
        if i ~= j
            if S2D_int(1,1) <= S2D(i,j) && S2D(i,j) < S2D_int(2,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(2,1) <= S2D(i,j) && S2D(i,j) < S2D_int(3,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(3,1) <= S2D(i,j) && S2D(i,j) < S2D_int(4,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(4,1) <= S2D(i,j) && S2D(i,j) < S2D_int(5,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(5,1) <= S2D(i,j) && S2D(i,j) < S2D_int(6,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(6,1) <= S2D(i,j) && S2D(i,j) < S2D_int(7,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(7,1) <= S2D(i,j) && S2D(i,j) < S2D_int(8,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(8,1) <= S2D(i,j) && S2D(i,j) < S2D_int(9,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(9,1) <= S2D(i,j) && S2D(i,j) < S2D_int(10,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(10,1) <= S2D(i,j)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            end
        end
    end
end
 
vals_S2D{N,N} = [];
for i = 1:N
    for j = 1:N
        if 0 <= S2D(i,j) && S2D(i,j) < 0.1
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.1 <= S2D(i,j) && S2D(i,j) < 0.2
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.2 <= S2D(i,j) && S2D(i,j) < 0.3
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.3 <= S2D(i,j) && S2D(i,j) < 0.4
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.4 <= S2D(i,j) && S2D(i,j) < 0.5
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.5 <= S2D(i,j) && S2D(i,j) < 0.6
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.6 <= S2D(i,j) && S2D(i,j) < 0.7
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.7 <= S2D(i,j) && S2D(i,j) < 0.8
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.8 <= S2D(i,j) && S2D(i,j) < 0.9
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.9 <= S2D(i,j) <= 1.0
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        end
    end
end

%K-S Test D Values
vals_D2D_rel{N,N} = [];
D2D_mod = D2D;
D2D_mod(D2D == 0) = NaN;
D2D_min = min(min(D2D_mod,[],'omitnan'));
D2D_max = max(max(D2D_mod,[],'omitnan'));
D2D_int = [D2D_min:(D2D_max-D2D_min)/10:D2D_max]';
for i = 1:N
    for j = 1:N
        if i == j
            vals_D2D_rel(i,j) = {sprintf('%.2f ', D2D(i,j))};
        end
        if i ~= j
            if D2D_int(1,1) <= D2D(i,j) && D2D(i,j) < D2D_int(2,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(2,1) <= D2D(i,j) && D2D(i,j) < D2D_int(3,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(3,1) <= D2D(i,j) && D2D(i,j) < D2D_int(4,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(4,1) <= D2D(i,j) && D2D(i,j) < D2D_int(5,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(5,1) <= D2D(i,j) && D2D(i,j) < D2D_int(6,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(6,1) <= D2D(i,j) && D2D(i,j) < D2D_int(7,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(7,1) <= D2D(i,j) && D2D(i,j) < D2D_int(8,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(8,1) <= D2D(i,j) && D2D(i,j) < D2D_int(9,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(9,1) <= D2D(i,j) && D2D(i,j) < D2D_int(10,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(10,1) <= D2D(i,j)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            end
        end
    end
end
 
vals_D2D{N,N} = [];
for i = 1:N
    for j = 1:N
        if 0 <= D2D(i,j) && D2D(i,j) < 0.1
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.1 <= D2D(i,j) && D2D(i,j) < 0.2
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.2 <= D2D(i,j) && D2D(i,j) < 0.3
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.3 <= D2D(i,j) && D2D(i,j) < 0.4
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.4 <= D2D(i,j) && D2D(i,j) < 0.5
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.5 <= D2D(i,j) && D2D(i,j) < 0.6
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.6 <= D2D(i,j) && D2D(i,j) < 0.7
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.7 <= D2D(i,j) && D2D(i,j) < 0.8
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.8 <= D2D(i,j) && D2D(i,j) < 0.9
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.9 <= D2D(i,j) <= 1.0
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        end
    end
end

%Kuiper Test V Values
vals_V2D_rel{N,N} = [];
V2D_mod = V2D;
V2D_mod(V2D == 0) = NaN;
V2D_min = min(min(V2D_mod,[],'omitnan'));
V2D_max = max(max(V2D_mod,[],'omitnan'));
V2D_int = [V2D_min:(V2D_max-V2D_min)/10:V2D_max]';
for i = 1:N
    for j = 1:N
        if i == j
            vals_V2D_rel(i,j) = {sprintf('%.2f ', V2D(i,j))};
        end
        if i ~= j
            if V2D_int(1,1) <= V2D(i,j) && V2D(i,j) < V2D_int(2,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(2,1) <= V2D(i,j) && V2D(i,j) < V2D_int(3,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(3,1) <= V2D(i,j) && V2D(i,j) < V2D_int(4,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(4,1) <= V2D(i,j) && V2D(i,j) < V2D_int(5,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(5,1) <= V2D(i,j) && V2D(i,j) < V2D_int(6,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(6,1) <= V2D(i,j) && V2D(i,j) < V2D_int(7,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(7,1) <= V2D(i,j) && V2D(i,j) < V2D_int(8,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(8,1) <= V2D(i,j) && V2D(i,j) < V2D_int(9,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(9,1) <= V2D(i,j) && V2D(i,j) < V2D_int(10,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(10,1) <= V2D(i,j)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            end
        end
    end
end
 
vals_V2D{N,N} = [];
for i = 1:N
    for j = 1:N
        if 0 <= V2D(i,j) && V2D(i,j) < 0.1
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.1 <= V2D(i,j) && V2D(i,j) < 0.2
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.2 <= V2D(i,j) && V2D(i,j) < 0.3
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.3 <= V2D(i,j) && V2D(i,j) < 0.4
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.4 <= V2D(i,j) && V2D(i,j) < 0.5
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.5 <= V2D(i,j) && V2D(i,j) < 0.6
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.6 <= V2D(i,j) && V2D(i,j) < 0.7
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.7 <= V2D(i,j) && V2D(i,j) < 0.8
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.8 <= V2D(i,j) && V2D(i,j) < 0.9
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.9 <= V2D(i,j) <= 1.0
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        end
    end
end

R2D_p{N,N} = [];
for i = 1:N
	for j = 1:N
		R2D_p(i,j) = {sprintf('%.2f', R2D(i,j))};
	end
end
L2D_p{N,N} = [];
for i = 1:N
	for j = 1:N
		L2D_p(i,j) = {sprintf('%.2f', L2D(i,j))};
	end
end
S2D_p{N,N} = [];
for i = 1:N
	for j = 1:N
		S2D_p(i,j) = {sprintf('%.2f', S2D(i,j))};
	end
end
D2D_p{N,N} = [];
for i = 1:N
	for j = 1:N
		D2D_p(i,j) = {sprintf('%.2f', D2D(i,j))};
	end
end
V2D_p{N,N} = [];
for i = 1:N
	for j = 1:N
		V2D_p(i,j) = {sprintf('%.2f', V2D(i,j))};
	end
end

close(f)

dat{H.N*5+16,H.N+1} = [];
dat(1,1) = {'DZstats2D Resampling Results'};
dat(3,1) = {'Mean Cross-correlation'};
dat(4,2:H.N+1) = H.Name;
dat(5:H.N+4,1) = H.Name;
if get(H.CF_none,'Value') == 1
	dat(5:H.N+4,2:H.N+1) = R2D_p;
end
if get(H.CF_rel,'Value') == 1
	dat(5:H.N+4,2:H.N+1) = vals_R2D_rel;
end
if get(H.CF_abs,'Value') == 1
	dat(5:H.N+4,2:H.N+1) = vals_R2D;
end
dat(3,H.N+3) = {'St.Dev. Cross-correlation'};
dat(4,H.N+4:H.N+3+H.N) = H.Name;
dat(5:H.N+4,H.N+3) = H.Name;
dat(5:H.N+4,H.N+4:H.N+3+H.N) = num2cell(R2D_std);

dat(H.N+6,1) = {'Mean Likeness'};
dat(H.N+7,2:H.N+1) = H.Name;
dat(H.N+8:H.N*2+7,1) = H.Name;
if get(H.CF_none,'Value') == 1
	dat(H.N+8:H.N*2+7,2:H.N+1) = L2D_p;
end
if get(H.CF_rel,'Value') == 1
	dat(H.N+8:H.N*2+7,2:H.N+1) = vals_L2D_rel;
end
if get(H.CF_abs,'Value') == 1
	dat(H.N+8:H.N*2+7,2:H.N+1) = vals_L2D;
end
dat(H.N+6,H.N+3) = {'St.Dev. Likeness'};
dat(H.N+7,H.N+4:H.N+3+H.N) = H.Name;
dat(H.N+8:H.N*2+7,H.N+3) = H.Name;
dat(H.N+8:H.N*2+7,H.N+4:H.N+3+H.N) = num2cell(L2D_std);

dat(H.N*2+9,1) = {'Mean Similarity'};
dat(H.N*2+10,2:H.N+1) = H.Name;
dat(H.N*2+11:H.N*3+10,1) = H.Name;
if get(H.CF_none,'Value') == 1
	dat(H.N*2+11:H.N*3+10,2:H.N+1) = S2D_p;
end
if get(H.CF_rel,'Value') == 1
	dat(H.N*2+11:H.N*3+10,2:H.N+1) = vals_S2D_rel;
end
if get(H.CF_abs,'Value') == 1
	dat(H.N*2+11:H.N*3+10,2:H.N+1) = vals_S2D;
end

dat(H.N*2+9,H.N+3) = {'St.Dev. Similarity'};
dat(H.N*2+10,H.N+4:H.N+3+H.N) = H.Name;
dat(H.N*2+11:H.N*3+10,H.N+3) = H.Name;
dat(H.N*2+11:H.N*3+10,H.N+4:H.N+3+H.N) = num2cell(S2D_std);

dat(H.N*3+12,1) = {'Mean K-S Test D'};
dat(H.N*3+13,2:H.N+1) = H.Name;
dat(H.N*3+14:H.N*4+13,1) = H.Name;
if get(H.CF_none,'Value') == 1
	dat(H.N*3+14:H.N*4+13,2:H.N+1) = D2D_p;
end
if get(H.CF_rel,'Value') == 1
	dat(H.N*3+14:H.N*4+13,2:H.N+1) = vals_D2D_rel;
end
if get(H.CF_abs,'Value') == 1
	dat(H.N*3+14:H.N*4+13,2:H.N+1) = vals_D2D;
end

dat(H.N*3+12,H.N+3) = {'St.Dev. K-S Test D'};
dat(H.N*3+13,H.N+4:H.N+3+H.N) = H.Name;
dat(H.N*3+14:H.N*4+13,H.N+3) = H.Name;
dat(H.N*3+14:H.N*4+13,H.N+4:H.N+3+H.N) = num2cell(D2D_std);

dat(H.N*4+15,1) = {'Mean Kuiper Test V'};
dat(H.N*4+16,2:H.N+1) = H.Name;
dat(H.N*4+17:H.N*5+16,1) = H.Name;
if get(H.CF_none,'Value') == 1
	dat(H.N*4+17:H.N*5+16,2:H.N+1) = V2D_p;
end
if get(H.CF_rel,'Value') == 1
	dat(H.N*4+17:H.N*5+16,2:H.N+1) = vals_V2D_rel;
end
if get(H.CF_abs,'Value') == 1
	dat(H.N*4+17:H.N*5+16,2:H.N+1) = vals_V2D;
end

dat(H.N*4+15,H.N+3) = {'St.Dev. Kuiper Test V'};
dat(H.N*4+16,H.N+4:H.N+3+H.N) = H.Name;
dat(H.N*4+17:H.N*5+16,H.N+3) = H.Name;
dat(H.N*4+17:H.N*5+16,H.N+4:H.N+3+H.N) = num2cell(V2D_std);

if get(H.CF_none,'Value') == 1
	h = figure('Name','Monte Carlo Resampling Comparison Matrices','NumberTitle','off', 'MenuBar', 'none');
end
if get(H.CF_rel,'Value') == 1
	h = figure('Name','Monte Carlo Resampling Comparison Matrices with Relative Conditional Format','NumberTitle','off', 'MenuBar', 'none');
end
if get(H.CF_abs,'Value') == 1
	h = figure('Name','Monte Carlo Resampling Comparison Matrices with Absolute Conditional Format','NumberTitle','off', 'MenuBar', 'none');
end
u = uitable('data',dat);
set(h,'outerposition', [680 328 1000+15 620]);
set(u,'Position',[1 1 1000 600])
set(u,'Units','normalized')

dat2{H.N*5+16,H.N+1} = [];
dat2(1,1) = {'DZstats2D Resampling Results'};
dat2(3,1) = {'Mean Cross-correlation'};
dat2(4,2:H.N+1) = H.Name;
dat2(5:H.N+4,1) = H.Name;
dat2(5:H.N+4,2:H.N+1) = num2cell(R2D);
dat2(3,H.N+3) = {'St.Dev. Cross-correlation'};
dat2(4,H.N+4:H.N+3+H.N) = H.Name;
dat2(5:H.N+4,H.N+3) = H.Name;
dat2(5:H.N+4,H.N+4:H.N+3+H.N) = num2cell(R2D_std);

dat2(H.N+6,1) = {'Mean Likeness'};
dat2(H.N+7,2:H.N+1) = H.Name;
dat2(H.N+8:H.N*2+7,1) = H.Name;
dat2(H.N+8:H.N*2+7,2:H.N+1) = num2cell(L2D);
dat2(H.N+6,H.N+3) = {'St.Dev. Likeness'};
dat2(H.N+7,H.N+4:H.N+3+H.N) = H.Name;
dat2(H.N+8:H.N*2+7,H.N+3) = H.Name;
dat2(H.N+8:H.N*2+7,H.N+4:H.N+3+H.N) = num2cell(L2D_std);

dat2(H.N*2+9,1) = {'Mean Similarity'};
dat2(H.N*2+10,2:H.N+1) = H.Name;
dat2(H.N*2+11:H.N*3+10,1) = H.Name;
dat2(H.N*2+11:H.N*3+10,2:H.N+1) = num2cell(S2D);
dat2(H.N*2+9,H.N+3) = {'St.Dev. Similarity'};
dat2(H.N*2+10,H.N+4:H.N+3+H.N) = H.Name;
dat2(H.N*2+11:H.N*3+10,H.N+3) = H.Name;
dat2(H.N*2+11:H.N*3+10,H.N+4:H.N+3+H.N) = num2cell(S2D_std);

dat2(H.N*3+12,1) = {'Mean K-S Test D'};
dat2(H.N*3+13,2:H.N+1) = H.Name;
dat2(H.N*3+14:H.N*4+13,1) = H.Name;
dat2(H.N*3+14:H.N*4+13,2:H.N+1) = num2cell(D2D);
dat2(H.N*3+12,H.N+3) = {'St.Dev. K-S Test D'};
dat2(H.N*3+13,H.N+4:H.N+3+H.N) = H.Name;
dat2(H.N*3+14:H.N*4+13,H.N+3) = H.Name;
dat2(H.N*3+14:H.N*4+13,H.N+4:H.N+3+H.N) = num2cell(D2D_std);

dat2(H.N*4+15,1) = {'Mean Kuiper Test V'};
dat2(H.N*4+16,2:H.N+1) = H.Name;
dat2(H.N*4+17:H.N*5+16,1) = H.Name;
dat2(H.N*4+17:H.N*5+16,2:H.N+1) = num2cell(V2D);
dat2(H.N*4+15,H.N+3) = {'St.Dev. Kuiper Test V'};
dat2(H.N*4+16,H.N+4:H.N+3+H.N) = H.Name;
dat2(H.N*4+17:H.N*5+16,H.N+3) = H.Name;
dat2(H.N*4+17:H.N*5+16,H.N+4:H.N+3+H.N) = num2cell(V2D_std);

answer = questdlg('What would you like to do with this table?', ...
	'Table Options', ...
	'Copy to clipboard','Save to file','Nothing, just look at it','Nothing, just look at it');
% Handle response
switch answer
    case 'Copy to clipboard'
		copy(dat2);
	case 'Save to file'	
		[file,path] = uiputfile('*.xls','Save file');
		writetable(table(dat2),[path file], 'FileType', 'spreadsheet', 'WriteVariableNames', 0);
    case 'Nothing, just look at it'
end

guidata(hObject,H);

function table_vals(hObject, eventdata, H)
R2D = H.R2D;
L2D = H.L2D;
S2D = H.S2D;
D2D = H.D2D;
V2D = H.V2D;
N = H.N;

%make conditional format color table
if get(H.CF_cmap, 'Value') == 1
	clrs1 = parula(10);
elseif get(H.CF_cmap, 'Value') == 2
	clrs1 = jet(10);
elseif get(H.CF_cmap, 'Value') == 3
	clrs1 = hsv(10);
elseif get(H.CF_cmap, 'Value') == 4
	clrs1 = hot(10);
elseif get(H.CF_cmap, 'Value') == 5
	clrs1 = cool(10);
elseif get(H.CF_cmap, 'Value') == 6
	clrs1 = spring(10);
elseif get(H.CF_cmap, 'Value') == 7
	clrs1 = summer(10);
elseif get(H.CF_cmap, 'Value') == 8
	clrs1 = winter(10);
elseif get(H.CF_cmap, 'Value') == 9
	clrs1 = gray(10);
elseif get(H.CF_cmap, 'Value') == 10
	clrs1 = bone(10);
elseif get(H.CF_cmap, 'Value') == 11
	clrs1 = copper(10);
elseif get(H.CF_cmap, 'Value') == 12
	clrs1 = pink(10);
elseif get(H.CF_cmap, 'Value') == 13
	clrs1 = lines(10);
elseif get(H.CF_cmap, 'Value') == 14
	clrs1 = colorcube(10);
elseif get(H.CF_cmap, 'Value') == 15
	clrs1 = prism(10);
elseif get(H.CF_cmap, 'Value') == 16
	clrs1 = flag(10);
end

if get(H.CF_none,'Value') ~= 1
	axes(H.colorramp);
	hold on
	rectangle('Position',[0.0 0 0.1 1],'FaceColor',clrs1(10,:))
	rectangle('Position',[0.1 0 0.1 1],'FaceColor',clrs1(9,:))
	rectangle('Position',[0.2 0 0.1 1],'FaceColor',clrs1(8,:))
	rectangle('Position',[0.3 0 0.1 1],'FaceColor',clrs1(7,:))
	rectangle('Position',[0.4 0 0.1 1],'FaceColor',clrs1(6,:))
	rectangle('Position',[0.5 0 0.1 1],'FaceColor',clrs1(5,:))
	rectangle('Position',[0.6 0 0.1 1],'FaceColor',clrs1(4,:))
	rectangle('Position',[0.7 0 0.1 1],'FaceColor',clrs1(3,:))
	rectangle('Position',[0.8 0 0.1 1],'FaceColor',clrs1(2,:))
	rectangle('Position',[0.9 0 0.1 1],'FaceColor',clrs1(1,:))
end

clrs = cellstr(rgb2hex(clrs1)); % convert to hex work with html

%Cross-correlation
vals_R2D_rel{N,N} = [];
R2D_mod = R2D;
R2D_mod(R2D == 1) = NaN;
R2D_min = min(min(R2D_mod,[],'omitnan'));
R2D_max = max(max(R2D_mod,[],'omitnan'));
R2D_int = [R2D_min:(R2D_max-R2D_min)/10:R2D_max]';

for i = 1:N
	for j = 1:N
		if i == j
			vals_R2D_rel(i,j) = {sprintf('%.2f ', R2D(i,j))};
		end
		if i ~= j
			if R2D_int(1,1) <= R2D(i,j) && R2D(i,j) < R2D_int(2,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(2,1) <= R2D(i,j) && R2D(i,j) < R2D_int(3,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(3,1) <= R2D(i,j) && R2D(i,j) < R2D_int(4,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(4,1) <= R2D(i,j) && R2D(i,j) < R2D_int(5,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(5,1) <= R2D(i,j) && R2D(i,j) < R2D_int(6,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(6,1) <= R2D(i,j) && R2D(i,j) < R2D_int(7,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(7,1) <= R2D(i,j) && R2D(i,j) < R2D_int(8,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(8,1) <= R2D(i,j) && R2D(i,j) < R2D_int(9,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(9,1) <= R2D(i,j) && R2D(i,j) < R2D_int(10,1)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			elseif R2D_int(10,1) <= R2D(i,j)
				vals_R2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
			end
		end
	end
end

vals_R2D{N,N} = [];
for i = 1:N
	for j = 1:N
		if 0 <= R2D(i,j) && R2D(i,j) < 0.1
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.1 <= R2D(i,j) && R2D(i,j) < 0.2
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.2 <= R2D(i,j) && R2D(i,j) < 0.3
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.3 <= R2D(i,j) && R2D(i,j) < 0.4
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.4 <= R2D(i,j) && R2D(i,j) < 0.5
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.5 <= R2D(i,j) && R2D(i,j) < 0.6
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.6 <= R2D(i,j) && R2D(i,j) < 0.7
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.7 <= R2D(i,j) && R2D(i,j) < 0.8
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.8 <= R2D(i,j) && R2D(i,j) < 0.9
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		elseif 0.9 <= R2D(i,j) <= 1.0
			vals_R2D(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', R2D(i,j)),'</span></html>');
		end
	end
end


%Likeness
vals_L2D_rel{N,N} = [];
L2D_mod = L2D;
L2D_mod(L2D == 1) = NaN;
L2D_min = min(min(L2D_mod,[],'omitnan'));
L2D_max = max(max(L2D_mod,[],'omitnan'));
L2D_int = [L2D_min:(L2D_max-L2D_min)/10:L2D_max]';
for i = 1:N
    for j = 1:N
        if i == j
            vals_L2D_rel(i,j) = {sprintf('%.2f ', L2D(i,j))};
        end
        if i ~= j
            if L2D_int(1,1) <= L2D(i,j) && L2D(i,j) < L2D_int(2,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(2,1) <= L2D(i,j) && L2D(i,j) < L2D_int(3,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(3,1) <= L2D(i,j) && L2D(i,j) < L2D_int(4,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(4,1) <= L2D(i,j) && L2D(i,j) < L2D_int(5,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(5,1) <= L2D(i,j) && L2D(i,j) < L2D_int(6,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(6,1) <= L2D(i,j) && L2D(i,j) < L2D_int(7,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(7,1) <= L2D(i,j) && L2D(i,j) < L2D_int(8,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(8,1) <= L2D(i,j) && L2D(i,j) < L2D_int(9,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(9,1) <= L2D(i,j) && L2D(i,j) < L2D_int(10,1)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            elseif L2D_int(10,1) <= L2D(i,j)
                vals_L2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
            end
        end
    end
end
 
vals_L2D{N,N} = [];
for i = 1:N
    for j = 1:N
        if 0 <= L2D(i,j) && L2D(i,j) < 0.1
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.1 <= L2D(i,j) && L2D(i,j) < 0.2
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.2 <= L2D(i,j) && L2D(i,j) < 0.3
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.3 <= L2D(i,j) && L2D(i,j) < 0.4
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.4 <= L2D(i,j) && L2D(i,j) < 0.5
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.5 <= L2D(i,j) && L2D(i,j) < 0.6
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.6 <= L2D(i,j) && L2D(i,j) < 0.7
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.7 <= L2D(i,j) && L2D(i,j) < 0.8
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.8 <= L2D(i,j) && L2D(i,j) < 0.9
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        elseif 0.9 <= L2D(i,j) <= 1.0
            vals_L2D(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', L2D(i,j)),'</span></html>');
        end
    end
end

%Similarity
vals_S2D_rel{N,N} = [];
S2D_mod = S2D;
S2D_mod(S2D == 1) = NaN;
S2D_min = min(min(S2D_mod,[],'omitnan'));
S2D_max = max(max(S2D_mod,[],'omitnan'));
S2D_int = [S2D_min:(S2D_max-S2D_min)/10:S2D_max]';
for i = 1:N
    for j = 1:N
        if i == j
            vals_S2D_rel(i,j) = {sprintf('%.2f ', S2D(i,j))};
        end
        if i ~= j
            if S2D_int(1,1) <= S2D(i,j) && S2D(i,j) < S2D_int(2,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(2,1) <= S2D(i,j) && S2D(i,j) < S2D_int(3,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(3,1) <= S2D(i,j) && S2D(i,j) < S2D_int(4,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(4,1) <= S2D(i,j) && S2D(i,j) < S2D_int(5,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(5,1) <= S2D(i,j) && S2D(i,j) < S2D_int(6,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(6,1) <= S2D(i,j) && S2D(i,j) < S2D_int(7,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(7,1) <= S2D(i,j) && S2D(i,j) < S2D_int(8,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(8,1) <= S2D(i,j) && S2D(i,j) < S2D_int(9,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(9,1) <= S2D(i,j) && S2D(i,j) < S2D_int(10,1)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            elseif S2D_int(10,1) <= S2D(i,j)
                vals_S2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
            end
        end
    end
end
 
vals_S2D{N,N} = [];
for i = 1:N
    for j = 1:N
        if 0 <= S2D(i,j) && S2D(i,j) < 0.1
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.1 <= S2D(i,j) && S2D(i,j) < 0.2
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.2 <= S2D(i,j) && S2D(i,j) < 0.3
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.3 <= S2D(i,j) && S2D(i,j) < 0.4
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.4 <= S2D(i,j) && S2D(i,j) < 0.5
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.5 <= S2D(i,j) && S2D(i,j) < 0.6
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.6 <= S2D(i,j) && S2D(i,j) < 0.7
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.7 <= S2D(i,j) && S2D(i,j) < 0.8
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.8 <= S2D(i,j) && S2D(i,j) < 0.9
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        elseif 0.9 <= S2D(i,j) <= 1.0
            vals_S2D(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', S2D(i,j)),'</span></html>');
        end
    end
end

%K-S Test D Values
vals_D2D_rel{N,N} = [];
D2D_mod = D2D;
D2D_mod(D2D == 0) = NaN;
D2D_min = min(min(D2D_mod,[],'omitnan'));
D2D_max = max(max(D2D_mod,[],'omitnan'));
D2D_int = [D2D_min:(D2D_max-D2D_min)/10:D2D_max]';
for i = 1:N
    for j = 1:N
        if i == j
            vals_D2D_rel(i,j) = {sprintf('%.2f ', D2D(i,j))};
        end
        if i ~= j
            if D2D_int(1,1) <= D2D(i,j) && D2D(i,j) < D2D_int(2,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(2,1) <= D2D(i,j) && D2D(i,j) < D2D_int(3,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(3,1) <= D2D(i,j) && D2D(i,j) < D2D_int(4,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(4,1) <= D2D(i,j) && D2D(i,j) < D2D_int(5,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(5,1) <= D2D(i,j) && D2D(i,j) < D2D_int(6,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(6,1) <= D2D(i,j) && D2D(i,j) < D2D_int(7,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(7,1) <= D2D(i,j) && D2D(i,j) < D2D_int(8,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(8,1) <= D2D(i,j) && D2D(i,j) < D2D_int(9,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(9,1) <= D2D(i,j) && D2D(i,j) < D2D_int(10,1)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            elseif D2D_int(10,1) <= D2D(i,j)
                vals_D2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
            end
        end
    end
end
 
vals_D2D{N,N} = [];
for i = 1:N
    for j = 1:N
        if 0 <= D2D(i,j) && D2D(i,j) < 0.1
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.1 <= D2D(i,j) && D2D(i,j) < 0.2
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.2 <= D2D(i,j) && D2D(i,j) < 0.3
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.3 <= D2D(i,j) && D2D(i,j) < 0.4
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.4 <= D2D(i,j) && D2D(i,j) < 0.5
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.5 <= D2D(i,j) && D2D(i,j) < 0.6
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.6 <= D2D(i,j) && D2D(i,j) < 0.7
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.7 <= D2D(i,j) && D2D(i,j) < 0.8
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.8 <= D2D(i,j) && D2D(i,j) < 0.9
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        elseif 0.9 <= D2D(i,j) <= 1.0
            vals_D2D(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', D2D(i,j)),'</span></html>');
        end
    end
end

%Kuiper Test V Values
vals_V2D_rel{N,N} = [];
V2D_mod = V2D;
V2D_mod(V2D == 0) = NaN;
V2D_min = min(min(V2D_mod,[],'omitnan'));
V2D_max = max(max(V2D_mod,[],'omitnan'));
V2D_int = [V2D_min:(V2D_max-V2D_min)/10:V2D_max]';
for i = 1:N
    for j = 1:N
        if i == j
            vals_V2D_rel(i,j) = {sprintf('%.2f ', V2D(i,j))};
        end
        if i ~= j
            if V2D_int(1,1) <= V2D(i,j) && V2D(i,j) < V2D_int(2,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(2,1) <= V2D(i,j) && V2D(i,j) < V2D_int(3,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(3,1) <= V2D(i,j) && V2D(i,j) < V2D_int(4,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(4,1) <= V2D(i,j) && V2D(i,j) < V2D_int(5,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(5,1) <= V2D(i,j) && V2D(i,j) < V2D_int(6,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(6,1) <= V2D(i,j) && V2D(i,j) < V2D_int(7,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(7,1) <= V2D(i,j) && V2D(i,j) < V2D_int(8,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(8,1) <= V2D(i,j) && V2D(i,j) < V2D_int(9,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(9,1) <= V2D(i,j) && V2D(i,j) < V2D_int(10,1)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            elseif V2D_int(10,1) <= V2D(i,j)
                vals_V2D_rel(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
            end
        end
    end
end
 
vals_V2D{N,N} = [];
for i = 1:N
    for j = 1:N
        if 0 <= V2D(i,j) && V2D(i,j) < 0.1
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(1,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.1 <= V2D(i,j) && V2D(i,j) < 0.2
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(2,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.2 <= V2D(i,j) && V2D(i,j) < 0.3
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(3,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.3 <= V2D(i,j) && V2D(i,j) < 0.4
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(4,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.4 <= V2D(i,j) && V2D(i,j) < 0.5
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(5,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.5 <= V2D(i,j) && V2D(i,j) < 0.6
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(6,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.6 <= V2D(i,j) && V2D(i,j) < 0.7
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(7,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.7 <= V2D(i,j) && V2D(i,j) < 0.8
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(8,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.8 <= V2D(i,j) && V2D(i,j) < 0.9
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(9,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        elseif 0.9 <= V2D(i,j) <= 1.0
            vals_V2D(i,j) = strcat('<html><BODY bgcolor="',clrs(10,:),'">',sprintf('%.2f ', V2D(i,j)),'</span></html>');
        end
    end
end

R2D_p{N,N} = [];
for i = 1:N
	for j = 1:N
		R2D_p(i,j) = {sprintf('%.2f', R2D(i,j))};
	end
end

L2D_p{N,N} = [];
for i = 1:N
	for j = 1:N
		L2D_p(i,j) = {sprintf('%.2f', L2D(i,j))};
	end
end

S2D_p{N,N} = [];
for i = 1:N
	for j = 1:N
		S2D_p(i,j) = {sprintf('%.2f', S2D(i,j))};
	end
end

D2D_p{N,N} = [];
for i = 1:N
	for j = 1:N
		D2D_p(i,j) = {sprintf('%.2f', D2D(i,j))};
	end
end


V2D_p{N,N} = [];
for i = 1:N
	for j = 1:N
		V2D_p(i,j) = {sprintf('%.2f', H.V2D(i,j))};
	end
end

if get(H.plot_R2D,'Value') == 1
	set(H.uitable1,'Data',R2D_p)
	set(H.metused,'String','Cross-correlation Value')
end

if get(H.plot_L2D,'Value') == 1
	set(H.uitable1,'Data',L2D_p)
	set(H.metused,'String','Likeness Value')
end

if get(H.plot_S2D,'Value') == 1
	set(H.uitable1,'Data',S2D_p)
	set(H.metused,'String','Similarity Value')
end

if get(H.plot_D2D,'Value') == 1
	set(H.uitable1,'Data',D2D_p)
	set(H.metused,'String','K-S Test D Value')
end

if get(H.plot_V2D,'Value') == 1
	set(H.uitable1,'Data',V2D_p)
	set(H.metused,'String','Kuiper Test V Value')
end

if get(H.CF_rel,'Value') == 1
	if get(H.plot_R2D,'Value') == 1
		set(H.perfectfit,'String',strcat('Best fit = ',{' '},sprintf('%.2f', R2D_max)))
		set(H.worstfit,'String',strcat(sprintf('%.2f ', R2D_min),{' '}, '= Worst fit'))
		set(H.uitable1,'Data',vals_R2D_rel)
		set(H.metused,'String','Cross-correlation Value')
	end
	if get(H.plot_L2D,'Value') == 1
		set(H.perfectfit,'String',strcat('Best fit = ',{' '},sprintf('%.2f', L2D_max)))
		set(H.worstfit,'String',strcat(sprintf('%.2f ', L2D_min),{' '}, '= Worst fit'))
		set(H.uitable1,'Data',vals_L2D_rel)
		set(H.metused,'String','Likeness Value')
	end	
	if get(H.plot_S2D,'Value') == 1
		set(H.perfectfit,'String',strcat('Best fit = ',{' '},sprintf('%.2f', S2D_max)))
		set(H.worstfit,'String',strcat(sprintf('%.2f ', S2D_min),{' '}, '= Worst fit'))
		set(H.uitable1,'Data',vals_S2D_rel)
		set(H.metused,'String','Similarity Value')
	end	
	if get(H.plot_D2D,'Value') == 1
		set(H.perfectfit,'String',strcat('Best fit = ',{' '},sprintf('%.2f', D2D_min)))
		set(H.worstfit,'String',strcat(sprintf('%.2f ', D2D_max),{' '}, '= Worst fit'))
		set(H.uitable1,'Data',vals_D2D_rel)
		set(H.metused,'String','K-S Test D Value')
	end	
	if get(H.plot_V2D,'Value') == 1
		set(H.perfectfit,'String',strcat('Best fit = ',{' '},sprintf('%.2f', V2D_min)))
		set(H.worstfit,'String',strcat(sprintf('%.2f ', V2D_max),{' '}, '= Worst fit'))
		set(H.uitable1,'Data',vals_V2D_rel)
		set(H.metused,'String','Kuiper Test V Value')
	end	
end

if get(H.CF_abs,'Value') == 1
	if get(H.plot_R2D,'Value') == 1
		set(H.uitable1,'Data',vals_R2D)
		set(H.metused,'String','Cross-correlation Value')
		set(H.perfectfit,'String','Perfect fit = 1.00')
		set(H.worstfit,'String','0.00 = Worst fit')
	end
	if get(H.plot_L2D,'Value') == 1
		set(H.uitable1,'Data',vals_L2D)
		set(H.metused,'String','Likeness Value')
		set(H.perfectfit,'String','Perfect fit = 1.00')
		set(H.worstfit,'String','0.00 = Worst fit')
	end
	if get(H.plot_S2D,'Value') == 1
		set(H.uitable1,'Data',vals_S2D)
		set(H.metused,'String','Similarity Value')
		set(H.perfectfit,'String','Perfect fit = 1.00')
		set(H.worstfit,'String','0.00 = Worst fit')
	end
	if get(H.plot_D2D,'Value') == 1
		set(H.uitable1,'Data',vals_D2D)
		set(H.metused,'String','K-S Test D Value')
		set(H.perfectfit,'String','Perfect fit = 0.00')
		set(H.worstfit,'String','1.00 = Worst fit')
	end
	if get(H.plot_V2D,'Value') == 1
		set(H.uitable1,'Data',vals_V2D)
		set(H.metused,'String','Kuiper Test V Value')
		set(H.perfectfit,'String','Perfect fit = 0.00')
		set(H.worstfit,'String','1.00 = Worst fit')
	end
end

H.R2D_p = R2D_p;
H.L2D_p = L2D_p;
H.S2D_p = S2D_p;
H.D2D_p = D2D_p;
H.V2D_p = V2D_p;

H.vals_R2D_rel = vals_R2D_rel;
H.vals_L2D_rel = vals_L2D_rel;
H.vals_S2D_rel = vals_S2D_rel;
H.vals_D2D_rel = vals_D2D_rel;
H.vals_V2D_rel = vals_V2D_rel;

H.vals_R2D = vals_R2D;
H.vals_L2D = vals_L2D;
H.vals_S2D = vals_S2D;
H.vals_D2D = vals_D2D;
H.vals_V2D = vals_V2D;

guidata(hObject,H);

set (H.uitable1,'ColumnWidth', 'auto', 'ColumnName', H.Name, 'RowName', H.Name)

function plotKDE_Callback(hObject, eventdata, H)
set(H.plotKDE,'Value',1);
set(H.plot_R2D,'Value',1);
set(H.plot_L2D,'Value',0);
set(H.plot_S2D,'Value',0);
set(H.plotCDF,'Value',0);
set(H.plot_D2D,'Value',0);
set(H.plot_V2D,'Value',0);
if H.dataloaded == 1;
	if H.TYPE == 0
		plot_Callback(hObject, eventdata, H)
	end
	table_vals(hObject, eventdata, H)
end
H.TYPE = 1;
guidata(hObject,H);

function plotCDF_Callback(hObject, eventdata, H)
set(H.plotKDE,'Value',0);
set(H.plot_R2D,'Value',0);
set(H.plot_L2D,'Value',0);
set(H.plot_S2D,'Value',0);
set(H.plotCDF,'Value',1);
set(H.plot_D2D,'Value',1);
set(H.plot_V2D,'Value',0);
if H.dataloaded == 1;
	if H.TYPE == 1
		plot_Callback(hObject, eventdata, H)
	end
	table_vals(hObject, eventdata, H)
end
H.TYPE = 0;
guidata(hObject,H);

function plot_R2D_Callback(hObject, eventdata, H)
set(H.plotKDE,'Value',1);
set(H.plot_R2D,'Value',1);
set(H.plot_L2D,'Value',0);
set(H.plot_S2D,'Value',0);
set(H.plotCDF,'Value',0);
set(H.plot_D2D,'Value',0);
set(H.plot_V2D,'Value',0);
if H.dataloaded == 1;
	if H.TYPE == 0
		plot_Callback(hObject, eventdata, H)
	end
	table_vals(hObject, eventdata, H)
end
H.TYPE = 1;
guidata(hObject,H);

function plot_L2D_Callback(hObject, eventdata, H)
set(H.plotKDE,'Value',1);
set(H.plot_R2D,'Value',0);
set(H.plot_L2D,'Value',1);
set(H.plot_S2D,'Value',0);
set(H.plotCDF,'Value',0);
set(H.plot_D2D,'Value',0);
set(H.plot_V2D,'Value',0);
if H.dataloaded == 1;
	if H.TYPE == 0
		plot_Callback(hObject, eventdata, H)
	end
	table_vals(hObject, eventdata, H)
end
H.TYPE = 1;
guidata(hObject,H);

function plot_S2D_Callback(hObject, eventdata, H)
set(H.plotKDE,'Value',1);
set(H.plot_R2D,'Value',0);
set(H.plot_L2D,'Value',0);
set(H.plot_S2D,'Value',1);
set(H.plotCDF,'Value',0);
set(H.plot_D2D,'Value',0);
set(H.plot_V2D,'Value',0);
if H.dataloaded == 1;
	if H.TYPE == 0
		plot_Callback(hObject, eventdata, H)
	end
	table_vals(hObject, eventdata, H)
end
H.TYPE = 1;
guidata(hObject,H);

function plot_D2D_Callback(hObject, eventdata, H)
set(H.plotKDE,'Value',0);
set(H.plot_R2D,'Value',0);
set(H.plot_L2D,'Value',0);
set(H.plot_S2D,'Value',0);
set(H.plotCDF,'Value',1);
set(H.plot_D2D,'Value',1);
set(H.plot_V2D,'Value',0);
if H.dataloaded == 1;
	if H.TYPE == 1
		plot_Callback(hObject, eventdata, H)
	end
	table_vals(hObject, eventdata, H)
end
H.TYPE = 0;
guidata(hObject,H);

function plot_V2D_Callback(hObject, eventdata, H)
set(H.plotKDE,'Value',0);
set(H.plot_R2D,'Value',0);
set(H.plot_L2D,'Value',0);
set(H.plot_S2D,'Value',0);
set(H.plotCDF,'Value',1);
set(H.plot_D2D,'Value',0);
set(H.plot_V2D,'Value',1);
if H.dataloaded == 1;
	if H.TYPE == 1
		plot_Callback(hObject, eventdata, H)
	end
	table_vals(hObject, eventdata, H)
end
H.TYPE = 0;
guidata(hObject,H);

function CF_none_Callback(hObject, eventdata, H)
cla(H.colorramp,'reset');
set(H.colorramp,'Visible','off')
set(H.perfectfit,'Visible','off')
set(H.worstfit,'Visible','off')
if H.dataloaded == 1;
	table_vals(hObject, eventdata, H)
end

function CF_rel_Callback(hObject, eventdata, H)
set(H.colorramp,'Visible','on', 'XTickLabel', [], 'YTickLabel', [])
set(H.perfectfit,'Visible','on')
set(H.worstfit,'Visible','on')
if H.dataloaded == 1;
	table_vals(hObject, eventdata, H)
end

function CF_abs_Callback(hObject, eventdata, H)
set(H.colorramp,'Visible','on', 'XTickLabel', [], 'YTickLabel', [])
set(H.perfectfit,'Visible','on')
set(H.worstfit,'Visible','on')
if H.dataloaded == 1;
	table_vals(hObject, eventdata, H)
end

function CF_cmap_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	table_vals(hObject, eventdata, H)
end

function exporttable_Callback(hObject, eventdata, H)
dat{H.N*5+16,H.N+1} = [];
dat(1,1) = {'DZstats2D Results'};
dat(3,1) = {'Cross-correlation'};
dat(4,2:H.N+1) = H.Name;
dat(5:H.N+4,1) = H.Name;
if get(H.CF_none,'Value') == 1
	dat(5:H.N+4,2:H.N+1) = H.R2D_p;
end
if get(H.CF_rel,'Value') == 1
	dat(5:H.N+4,2:H.N+1) = H.vals_R2D_rel;
end
if get(H.CF_abs,'Value') == 1
	dat(5:H.N+4,2:H.N+1) = H.vals_R2D;
end

dat(H.N+6,1) = {'Likeness'};
dat(H.N+7,2:H.N+1) = H.Name;
dat(H.N+8:H.N*2+7,1) = H.Name;
if get(H.CF_none,'Value') == 1
	dat(H.N+8:H.N*2+7,2:H.N+1) = H.L2D_p;
end
if get(H.CF_rel,'Value') == 1
	dat(H.N+8:H.N*2+7,2:H.N+1) = H.vals_L2D_rel;
end
if get(H.CF_abs,'Value') == 1
	dat(H.N+8:H.N*2+7,2:H.N+1) = H.vals_L2D;
end

dat(H.N*2+9,1) = {'Similarity'};
dat(H.N*2+10,2:H.N+1) = H.Name;
dat(H.N*2+11:H.N*3+10,1) = H.Name;
if get(H.CF_none,'Value') == 1
	dat(H.N*2+11:H.N*3+10,2:H.N+1) = H.S2D_p;
end
if get(H.CF_rel,'Value') == 1
	dat(H.N*2+11:H.N*3+10,2:H.N+1) = H.vals_S2D_rel;
end
if get(H.CF_abs,'Value') == 1
	dat(H.N*2+11:H.N*3+10,2:H.N+1) = H.vals_S2D;
end

dat(H.N*3+12,1) = {'K-S Test D'};
dat(H.N*3+13,2:H.N+1) = H.Name;
dat(H.N*3+14:H.N*4+13,1) = H.Name;
if get(H.CF_none,'Value') == 1
	dat(H.N*3+14:H.N*4+13,2:H.N+1) = H.D2D_p;
end
if get(H.CF_rel,'Value') == 1
	dat(H.N*3+14:H.N*4+13,2:H.N+1) = H.vals_D2D_rel;
end
if get(H.CF_abs,'Value') == 1
	dat(H.N*3+14:H.N*4+13,2:H.N+1) = H.vals_D2D;
end

dat(H.N*4+15,1) = {'Kuiper Test V'};
dat(H.N*4+16,2:H.N+1) = H.Name;
dat(H.N*4+17:H.N*5+16,1) = H.Name;
if get(H.CF_none,'Value') == 1
	dat(H.N*4+17:H.N*5+16,2:H.N+1) = H.V2D_p;
end
if get(H.CF_rel,'Value') == 1
	dat(H.N*4+17:H.N*5+16,2:H.N+1) = H.vals_V2D_rel;
end
if get(H.CF_abs,'Value') == 1
	dat(H.N*4+17:H.N*5+16,2:H.N+1) = H.vals_V2D;
end
if get(H.CF_none,'Value') == 1
	h = figure('Name','Comparison Matrices','NumberTitle','off', 'MenuBar', 'none');
end
if get(H.CF_rel,'Value') == 1
	h = figure('Name','Comparison Matrices with Relative Conditional Format','NumberTitle','off', 'MenuBar', 'none');
end
if get(H.CF_abs,'Value') == 1
	h = figure('Name','Comparison Matrices with Absolute Conditional Format','NumberTitle','off', 'MenuBar', 'none');
end
u = uitable('data',dat);
set(h,'outerposition', [680 328 719+15 620]);
set(u,'Position',[1 1 719 600])
set(u,'Units','normalized')

function savetable_Callback(hObject, eventdata, H)
dat{H.N*5+16,H.N+1} = [];
dat(1,1) = {'DZstats2D Results'};
dat(3,1) = {'Cross-correlation'};
dat(4,2:H.N+1) = H.Name;
dat(5:H.N+4,1) = H.Name;
dat(5:H.N+4,2:H.N+1) = num2cell(H.R2D);

dat(H.N+6,1) = {'Likeness'};
dat(H.N+7,2:H.N+1) = H.Name;
dat(H.N+8:H.N*2+7,1) = H.Name;
dat(H.N+8:H.N*2+7,2:H.N+1) = num2cell(H.L2D);

dat(H.N*2+9,1) = {'Similarity'};
dat(H.N*2+10,2:H.N+1) = H.Name;
dat(H.N*2+11:H.N*3+10,1) = H.Name;
dat(H.N*2+11:H.N*3+10,2:H.N+1) = num2cell(H.S2D);

dat(H.N*3+12,1) = {'K-S Test D'};
dat(H.N*3+13,2:H.N+1) = H.Name;
dat(H.N*3+14:H.N*4+13,1) = H.Name;
dat(H.N*3+14:H.N*4+13,2:H.N+1) = num2cell(H.D2D);

dat(H.N*4+15,1) = {'Kuiper Test V'};
dat(H.N*4+16,2:H.N+1) = H.Name;
dat(H.N*4+17:H.N*5+16,1) = H.Name;
dat(H.N*4+17:H.N*5+16,2:H.N+1) = num2cell(H.V2D);

[file,path] = uiputfile('*.xls','Save file');
writetable(table(dat),[path file], 'FileType', 'spreadsheet', 'WriteVariableNames', 0);

function copytable_Callback(hObject, eventdata, H)
dat{H.N*5+16,H.N+1} = [];
dat(1,1) = {'DZstats2D Results'};
dat(3,1) = {'Cross-correlation'};
dat(4,2:H.N+1) = H.Name;
dat(5:H.N+4,1) = H.Name;
dat(5:H.N+4,2:H.N+1) = num2cell(H.R2D);

dat(H.N+6,1) = {'Likeness'};
dat(H.N+7,2:H.N+1) = H.Name;
dat(H.N+8:H.N*2+7,1) = H.Name;
dat(H.N+8:H.N*2+7,2:H.N+1) = num2cell(H.L2D);

dat(H.N*2+9,1) = {'Similarity'};
dat(H.N*2+10,2:H.N+1) = H.Name;
dat(H.N*2+11:H.N*3+10,1) = H.Name;
dat(H.N*2+11:H.N*3+10,2:H.N+1) = num2cell(H.S2D);

dat(H.N*3+12,1) = {'K-S Test D'};
dat(H.N*3+13,2:H.N+1) = H.Name;
dat(H.N*3+14:H.N*4+13,1) = H.Name;
dat(H.N*3+14:H.N*4+13,2:H.N+1) = num2cell(H.D2D);

dat(H.N*4+15,1) = {'Kuiper Test V'};
dat(H.N*4+16,2:H.N+1) = H.Name;
dat(H.N*4+17:H.N*5+16,1) = H.Name;
dat(H.N*4+17:H.N*5+16,2:H.N+1) = num2cell(H.V2D);
copy(dat);

function plot_heat_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function d2_Callback(hObject, eventdata, H)
set(H.d2,'Value',1)
set(H.d3,'Value',0)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function d3_Callback(hObject, eventdata, H)
set(H.d2,'Value',0)
set(H.d3,'Value',1)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function syncax_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function colormap_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	if get(H.colormap,'Value') > 20 
		set(H.Peak_chk,'Value',1)
		set(H.Vol_chk,'Value',0)
	end
	plot_Callback(hObject, eventdata, H)
end

function transparency_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	plot_Callback(hObject, eventdata, H)
end

function exportplot_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	H.export_plot = 1;
	plot_Callback(hObject, eventdata, H)
end

function saveplots_Callback(hObject, eventdata, H)
if H.dataloaded == 1;
	H.save_plot = 1;
	plot_Callback(hObject, eventdata, H)
end
