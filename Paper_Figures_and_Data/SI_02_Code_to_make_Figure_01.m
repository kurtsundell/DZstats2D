% Figure 1 make/plot synthetic Age-Hf data,calculate 1D and 2D quantitative comparisons

clear all
close all
clc

%{
n = 300; % number of random data points
xmin = 500;
xmax = 2500;
xint = 1; %interval for KDE
x = xmin:xint:xmax;
ymin = -25;
ymax = 15;

bins = 100; %histogram bins

bandwidth_x = 20; % kernel bandwidth x (Myr)
bandwidth_y = 1; % kernel bandwidth y (Epsilon units)

gridspc = 2^9; % resolution of bivariae KDEs (how many pixels), has to be in powers of 2, no need to go over go over 2^12

Age1(1:1:n) = 2000+randn(1,n)*50; %random data centered at 2000 Ma ± 100 Myr at 2?
Age2(1:1:n) = 1000+randn(1,n)*50; %random data centered at 1000 Ma ± 100 Myr at 2?

%random data part A
Age1 = Age1';
Age2 = Age2';

Hf1(1:1:n) = 3+randn(1,n)*2.5; %random data centered at 3 epsilon ± 5 epsilon at 2?
Hf2(1:1:n) = 6+randn(1,n)*2.5; %random data centered at 6 epsilon ± 5 epsilon at 2?

Hf1 = Hf1';
Hf2 = Hf2';

AgeHf1 = [[Age1,Hf1];[Age2,Hf2]];

%random data part B
Age3(1:1:n) = 2000+randn(1,n)*50; %random data centered at 2000 Ma ± 100 Myr at 2?
Age4(1:1:n) = 1000+randn(1,n)*50; %random data centered at 1000 Ma ± 100 Myr at 2?

Age3 = Age3';
Age4 = Age4';

Hf3(1:1:n) = -7+randn(1,n)*2.5; %random data centered at -7 epsilon ± 5 epsilon at 2?
Hf4(1:1:n) = -12+randn(1,n)*5; %random data centered at -12 epsilon ± 10 epsilon at 2?

Hf3 = Hf3';
Hf4 = Hf4';

AgeHf2 = [[Age3,Hf3];[Age4,Hf4]];
%}

%Version used in figure 1
n = 300; % number of random data points
xmin = 500;
xmax = 2500;
xint = 1; %interval for KDE
x = xmin:xint:xmax;
ymin = -25;
ymax = 15;
bins = 100; %histogram bins
bandwidth_x = 20; % kernel bandwidth x (Myr)
bandwidth_y = 1; % kernel bandwidth y (Epsilon units)
gridspc = 2^9; % resolution of bivariae KDEs (how many pixels), has to be in powers of 2, no need to go over go over 2^12
AgeHf1 = [2053.12927956628,4.41321519976295;1984.88529383413,1.94651692221301;2064.88159605834,5.27490338151264;2075.80514883136,-0.283551120280747;2007.42825454794,-1.93353649989885;1973.45691886683,5.52516747370571;2005.37379267288,3.27289921386911;1978.94998258542,4.70653280145311;1988.73942369319,0.764440580287104;2035.64546744159,7.03386211151648;2038.93516155657,1.52500303523358;1935.66475690995,4.66061296458959;1943.87073307141,0.184465119768500;2062.85569649340,0.508435555236166;1975.16084708062,0.732905293485717;1972.29074666068,2.29626868657800;2075.98144320055,4.12174210886910;2038.98306355730,5.54453325138739;2061.96578247327,5.49703283631715;1974.24496484030,4.49975704558712;2081.67041250914,4.47024101379792;1977.73146267937,2.35487039417576;2005.94741992011,1.50487159713980;1957.22365606384,2.79909353684905;2007.84608412608,4.34449709163448;1985.45812306543,1.51191797706033;2023.21918821428,7.17943774565774;1942.58187124401,6.93993914042735;1942.42670911910,4.95148146492299;1953.72018839100,4.30123876904186;1962.12462967158,0.818268566850711;1957.20384489059,-3.09448043733631;1972.11288643024,0.981271708624589;1919.72542565386,-0.395583773835212;1955.29297538155,4.92498899489720;1895.88615013853,7.07162132293276;1918.34373632233,3.73186082700487;2021.27501934999,1.97156028583059;1942.47082132933,0.475791615662222;1993.25714395007,1.63049908937955;1963.02684043058,4.75169876218471;2040.24260504970,2.92664009712990;1882.58590703601,7.70045214936620;2000.67477429853,0.832694131690679;2077.45059701429,-3.73897690594052;2045.23712629678,3.35704513802911;2033.47802064883,0.431338429342676;1979.52738599688,4.32026045993051;2169.24409785981,3.37423022106742;1995.13075010981,6.81310529153838;2051.59131972553,-1.59211061219961;2085.82133665168,4.13561568280028;1986.72712152406,4.73626993437226;2001.35872139803,-0.253127269928664;1982.00569967708,5.65264026053023;1949.35739632936,8.54653899843159;2036.50931247508,3.49875268317406;1995.90639455193,5.60101361564781;1905.33791477862,3.48086844518859;1997.68413236168,-0.793814621224442;2055.10950678267,4.42839983587398;1990.18433959237,1.72293806227993;2021.75780513930,2.15422609369945;1991.49856085062,4.21116359769630;1897.97545497620,4.97081326380397;1973.64741999685,-1.14010348794125;1989.70141086197,7.06550231660180;1924.34492160914,4.73348321347149;1904.73619499507,2.40305481137520;2037.58110003278,5.41184094887020;2019.38364286135,0.590213667635315;1960.86122897138,3.13539464881548;1914.87878434632,5.19398921591710;2053.85578031455,2.09748234347390;2047.97933808433,2.38071291729508;1970.14792951403,0.799322844109711;1996.40094192328,3.71848269153682;2024.03838693484,2.26937313668830;1986.96001630220,2.51644122692563;2007.99140096564,7.28827503161703;2093.81210107520,4.25838143490638;1999.81486428229,1.58801084308768;2063.15598397333,4.18851020004551;2045.24920544666,-1.83144314940088;1962.53498570052,-1.52923496656958;2063.18622226968,1.44629679627779;1969.26127539186,0.503991400240652;2022.05819872942,1.86911628795029;1998.51026582982,5.11990771689200;1982.17778613715,3.82856655851500;2056.35931759931,-1.58768297361561;2025.43951357263,2.16536240700815;1992.10598872547,7.63899299668133;2042.25362706954,1.09557619630699;2031.95954564045,-3.97546240438577;2036.95682739020,-2.47830864856334;2000.13718446574,-0.0968128836393638;1907.15517032656,4.73278939000073;2017.50530915030,1.42767259738148;2058.68884157501,3.57967048958208;1977.57567265954,2.51965283304596;1968.56602420628,1.82656558546996;1995.12910657872,6.67761557052924;2026.21558622759,-0.663345867122585;2016.94335918873,-0.409656218664623;1979.09217547220,2.21051255872002;2076.13065979107,5.30401922526377;1933.77755893371,5.84892971828610;1930.46791310713,-2.06253026837868;2124.38121622671,4.39990646461181;2017.18963332822,0.943291236327825;2052.55323573049,2.24948898545812;1957.54736845878,-1.90564704825441;1992.39783787574,2.00540494405415;2087.52832353027,0.768820716144328;1996.10028536547,1.05393031569913;1973.89587996052,6.60913283305088;2003.14909154359,5.88292481092172;1888.86227265482,4.32460893008414;2044.91300994588,-0.0491921705275269;1971.54898146525,-0.105417176235243;1949.71794461522,3.72661401437627;1975.58797639345,-1.91080223443686;1983.77523415718,2.75442318025802;1965.23380369753,1.07462714319575;1899.66357072885,3.91653171173288;1959.73131627398,-0.0280772497938240;1996.39873943715,2.53317509025719;1951.12008621919,-1.49606775747558;1971.13559367202,3.16621335087154;1982.68535609843,2.40720518512347;2007.49247064733,-1.36824951168592;2003.60138222815,2.49631467156782;1969.31942819537,3.24490876975909;1940.89525862322,0.747820952850186;1938.45757861398,5.01407084332748;2019.49481312372,1.26853593946668;1976.10531407663,-1.72047138922079;2030.29395572549,2.04356675264957;2027.03395080765,0.545263333386455;2046.68350215136,1.19405819848087;2031.27871585670,-0.827383820450019;1985.33399022941,5.02732967388454;2003.17200515241,-0.457981031036598;2014.62519721180,2.65174457479414;1995.72880014511,2.25577578289201;1949.65940787787,4.31918955523010;1976.46731813320,0.520820413266204;2090.36074907345,3.98787225603089;1978.36786493759,5.24864010684269;1941.87187979483,2.38558104046183;2006.51117636827,1.90488738131786;1980.68152450238,4.10476400414346;2080.03264888675,2.71143677144143;2029.56366883745,7.70279383699584;2024.57526566479,3.31382195966703;1967.62145735352,-2.17738165490399;2049.63854635977,4.71997827018020;1960.47736245961,4.66687473327802;2061.36194167917,0.278531845568434;1889.93060872703,1.34726373532116;2074.37553484052,5.01070988912631;1964.81379367747,0.517935636981956;1990.76906849984,1.54789960652998;1992.81158240388,3.54462879777091;2015.59257651272,0.0682501416839321;2014.57815725040,3.57493579237589;2080.87514737081,2.85211108453816;1995.88777514540,7.35139879653694;2012.60861243122,4.07937774790898;2028.08099709485,1.43504912241449;2013.06223426912,5.19294648919878;1987.77715963602,1.74758637368249;2030.00556815297,5.62730971200670;1953.78204793709,-0.875053292424849;1980.72854754315,5.59906133904419;2025.33157500713,4.02565546089498;2001.51452959879,4.51018800563727;2032.10927329499,1.94384473947322;1974.64354858244,4.84254720355938;1958.89863132738,2.80330978617670;2001.65219360009,3.78656036788180;1989.69145212414,1.33652030812917;1927.58672837200,4.87454597641004;1998.59033574870,2.81018700973501;1996.07145836943,4.95581688937876;1922.70550042158,4.81280218375764;1895.81020490826,0.595048960518807;1973.70582540027,-0.213353628799652;2081.51886593447,0.444445377075978;2021.11835181810,0.656418333825525;2100.02758930450,0.271200487553347;1950.74131522286,0.893716862759548;2003.99501396276,2.81450776990452;1943.85668291731,1.14929038779365;2085.18076308840,5.39976690619814;1939.07685017528,3.80562236521077;2008.89234261617,5.83701084797793;2024.31714061700,4.10252346926835;1947.28329157474,4.60666606096669;2058.09605668902,4.42428779749179;1966.85021602795,0.582733427801743;1933.76564085149,1.22869259235969;2006.03189608881,2.78136583075569;1988.82993895565,2.57017634912552;2002.25314736338,5.08696575502232;1976.58285961681,2.26321130611374;2054.68768319094,0.348512113028178;2003.82306475808,3.86214890011542;2030.31173179235,3.65242299439851;1926.58931610765,9.21633102793249;2058.40248519348,6.48020369417947;1972.74842644342,4.47146011340145;2061.27452079098,5.67904015378769;1945.81336182001,2.38228719887447;2005.39601049333,-1.38199874366198;1876.56246555962,5.79686897519058;1968.56353755988,3.32036425959357;2039.02581254428,6.99238793540007;2013.10509129969,5.51696853107644;2057.86077628678,5.11928798250346;2023.97042492418,2.13688048144913;1937.88242580649,5.19850022420856;2021.50880595576,2.01419440417674;1997.89378944064,3.67709052185308;2090.03223001272,2.83887025416478;2026.48857356929,3.81203518242809;2049.27373145543,8.86237610530235;2024.41637552461,2.63990063412109;1977.84566170085,1.99777248570961;2035.85359381580,6.28876598612255;2039.60905936219,1.31624567179484;2046.66308912032,2.91213110963644;1988.38528829204,-0.0848732835905146;1928.88632104444,3.80086117059796;2031.84072687296,4.28732206199699;1973.97064658375,4.42345397458220;2061.15964993406,2.98995831369883;1975.17819670873,4.52938593297952;2069.87618733896,1.77456884690406;2089.48950291872,-1.31795504116978;1949.95141467210,1.60678523858011;2028.28241818895,5.00531307217518;2049.46084393009,6.75977559451392;2017.00549276712,5.29914683338755;1953.78374783723,1.60688296965588;1933.18304853286,3.87162785139872;2061.28233555141,0.278725456945343;2018.55956355757,4.50160758352882;1921.05075311778,4.03256153137706;1943.77160960905,-0.810724074460099;2051.16848891145,2.22220261347396;1968.97196707095,7.09196956661978;2048.51154184635,-2.00635652392070;2048.93023314368,1.35966683772208;1960.71217539699,-0.930011652663265;2056.65529055171,0.372300814027199;2039.76631477550,-1.13449823884771;1922.98894303635,3.92353977028302;2016.21488386557,0.659550183321764;2040.72843588662,3.24570407732063;2047.14715998632,4.57569098507539;1978.02690003734,2.19629093688076;2046.90974851844,4.56917467575210;1934.64449916512,2.47092048132821;1949.67533385385,2.27994524039535;2006.72586684083,3.85525838283384;1992.07996328038,5.44930304105328;1977.92832517788,2.14330487209386;2047.06293258054,7.11811282281099;2040.01931363019,-0.110624914736728;1969.34610786447,-2.31169062203556;1970.23087338392,3.56387409268777;2065.17286835326,-2.80266363778866;2025.96046649568,-4.24375529042208;1976.13084455346,2.59465472493195;1935.08207096691,3.28567118480370;2011.73835114709,1.95247804461335;1973.77475113279,2.09892522664318;1944.94620890736,4.13614168728340;1994.78400896340,1.80621639110736;1999.89190555729,3.29634667612895;2005.24266331404,1.95202673763982;1968.12506375111,1.78863206540788;2005.30570676029,7.37967688954239;2002.57685349311,7.70301046111652;1995.54110054966,3.45098036854947;2004.44584831461,4.99076668431814;1981.95868677252,6.13580285478267;2066.86832943754,-0.963291584278494;2027.32155574642,-3.05066623780579;1959.97062977291,5.96363803973489;2076.62288633095,3.11221211227037;1907.57387753859,-0.604820050426564;1976.25926443001,4.72617700407074;2040.27117355416,4.82907090898292;2087.77472747216,7.72906614409257;1970.11060538083,2.45716980124978;2104.24491926826,2.47763113510006;2077.54648530000,0.153041100353442;1047.02552898879,-0.463587042696629;991.022090170203,4.22565975007529;1002.56126142581,8.84466424097846;1090.43867613158,3.29791743950482;1069.45185510632,6.58054363554596;1015.79089838526,2.29426442108388;1009.41562655571,9.62382658104617;1077.94414498114,9.19565790748260;1032.98771571256,3.84521021498624;1002.24304491023,3.35859375722143;1009.29373616415,8.41683325490320;1027.13754812547,8.66144952680115;970.633670384449,8.28253534333264;978.909953567673,6.06664735657823;961.200718023283,6.78095141130296;1017.52790406982,7.16980909704758;990.999797720933,4.92477010702705;1023.78924135708,10.8870086698315;939.242981204725,3.66556309056467;963.483776204917,4.15406294493621;1048.42204808881,6.07341998360604;1015.16312751224,6.20379158109653;1073.16043805529,3.29172819504128;1052.96982627762,2.80496728321288;999.666958319090,4.16504179279034;1026.35843615290,5.07796614890295;996.292899488089,5.94180046081532;984.826577328372,2.74982348728574;952.191752694620,4.23296762028387;1031.72269477264,4.81281698111574;1035.76719201703,3.33347498287167;989.139289501780,8.48637701195836;992.968758472322,7.28761257473534;1010.64383098589,5.12622242968303;1041.26953291477,9.96390096592293;936.698874442008,8.89802243373187;994.392654783827,5.65423961222965;1027.54367334849,8.56722944251494;1028.20524827880,5.45104626800287;1039.63141149424,4.80884001222655;1015.13552929127,3.87558753157545;984.972442441287,9.34155312516395;971.400208457136,9.86364209388464;1066.69721015145,8.68216615483560;1032.92245083958,5.65603153649637;1047.26475047512,9.37374470605522;1069.75228787924,5.73705676312094;1006.37604779098,6.52796157950151;984.484554090782,5.91807244469661;1012.05029362209,4.90871139421749;1031.47308390882,6.69697243638150;911.655709509538,6.64789337815858;1043.36017379878,3.45949027318656;915.635796666139,6.38171873551767;994.473784481131,12.6030195953567;988.573707922586,7.24085577571191;902.603186071600,9.66632328401730;977.225333174302,6.72236833339381;1024.92433792083,5.03820600281885;1041.73614169389,5.48346952086722;951.715752477337,2.44602713675040;934.605707300224,4.05765343095086;1067.91562795075,8.08753409948203;1004.18957855817,7.42729541025835;968.796032603690,5.55937740771011;984.252449575333,12.9296489638263;968.841569620356,10.3986171389759;1014.09529214008,5.93084249186137;1033.33221499326,5.65301204262646;917.424421855142,7.67524029338342;901.881687555675,4.67047236232681;997.759750645799,8.71667338418571;980.375957290759,6.60025656487740;1070.20262866071,7.24031566816166;988.885033373293,3.01738154730077;985.755504218061,6.38714316897332;947.687995696377,6.82372451970270;1073.27933316289,2.58874347804978;1055.64505567506,2.97137008463590;983.372219887721,3.20910193383479;981.525875867403,7.83150772365622;1036.65816651158,7.79065851502195;940.277350328437,1.53552485655669;977.588162088147,6.30693877378452;972.413112278369,1.94183930185506;994.060341302413,6.05295272613581;1125.77266136311,6.99628425032613;936.609603952585,1.07709360778209;924.594131960515,9.32394638668231;1081.77236867234,5.82955124714839;997.270183228408,2.98600430076306;1031.33506875373,12.0890662051782;945.709674277900,10.7929836062213;962.983270392809,6.95958323649739;1008.24877547535,5.50921700538070;977.657145027693,8.48821242918221;1077.52494104751,8.21359942161906;1027.36968364039,-0.0605458472086422;977.166548895070,3.71207451035328;966.322400037062,2.39171938990114;980.541638587679,4.70043285543205;1035.44929258424,8.76797860255132;1030.00479926116,2.24444300565305;1040.17090815375,4.89026374814152;942.990614110921,7.68354317760568;981.228130103620,-1.51835509522950;1056.65667409050,9.71798831459924;925.713077373496,0.753389586001876;1022.93292554890,5.71009735781553;948.741581949715,5.40630204437670;1042.21628053875,6.34238638295155;983.853550105407,7.71001971388759;1088.45736488460,2.11607595883400;990.205969550473,9.06961927361729;1033.41649516954,5.91267343883109;943.735477224868,6.44109840705320;979.968624301510,3.02738983425119;1017.48399307753,5.87651321414536;872.069914895431,6.86683641315890;1001.03775221476,6.26889005404268;963.683653099613,7.18573848510061;977.655480183602,2.93598654726763;1010.03007336132,0.363157866577677;1092.60274107744,5.76623028659845;939.968932595006,3.20907535580080;983.582449557977,5.72293683320246;971.756294507747,6.90512311406718;977.324411107598,2.38434450227599;1016.47168963439,1.52289715510669;1038.46062483673,3.58721735391247;1004.12453025240,3.81581268978123;949.975310523981,5.43585348350308;963.049902243374,5.28713702806090;1039.99552209057,8.54307111646754;994.419401028178,5.62873581989473;1017.42150651330,7.84302917841415;1048.09438595855,5.33293216597582;1034.92677295625,2.72701248126779;923.843897725133,7.76528091874405;1042.45271141956,4.16094515246931;973.931965500700,2.03318021548887;1029.49500593458,7.19091496571775;969.098252878382,7.48824329226776;1016.26760499229,7.14366643367409;935.534685418532,4.12851721746693;1077.17959919313,6.05020160521013;926.539335921020,4.03009877729215;926.329548399322,6.28410360159906;947.227232612954,4.85814848940502;997.547528965355,7.71669575944769;1043.32629375475,5.50644123039777;999.933378414970,4.79419068501678;1013.17098538581,6.50370076791823;950.914306149618,2.77562210475468;982.357793824259,5.45200650684624;1025.06129497166,3.06079944011256;1112.64598664924,4.66601747878450;971.123862288784,8.70685928750105;920.610660811818,6.57823032386559;942.889999558478,4.88476645409868;1024.88566536860,6.97797243602100;1052.62204460004,6.72112816058400;1065.69629351250,4.98338289640675;1055.53798431641,2.84554187855429;1015.34030178170,10.4863258904557;1061.29691772752,6.12508468744846;1036.09781277111,10.1167761182405;1019.83007880336,5.88223362628702;1048.39420563840,9.09054233060559;952.616592135778,7.48668882808976;960.527233273486,5.98149146544591;1001.27607939071,1.99842099986312;978.178056404914,4.15404047581022;964.373143328927,5.12322864451085;1057.28700957190,8.45659753283959;979.611250480091,8.28002391249908;1036.57535008927,6.68687182718932;912.509851400121,5.80928786252904;1042.27256489122,7.28585504821362;971.427610764343,4.64007582321821;886.963136618439,8.57097972184812;969.092163450933,4.19405050954109;986.660398155074,2.30824585956399;1051.62008560499,5.68059234320605;1020.59640755381,2.26392903667197;973.519721396517,6.77563688357867;1009.31781574771,9.13378500256621;987.263456232567,2.49354892522309;996.524850558608,1.79084672522742;1041.56634327778,5.38918612520239;1034.60342156657,5.78710977259774;922.196633695858,8.91250179129138;1063.88890263971,6.80023362881442;1049.92099312904,7.06767114052272;994.689952183237,4.05772396079655;955.189195958777,5.95893736054860;989.470122245552,8.64996447672739;1010.49167306785,7.74350359445310;925.631293574434,5.34756614942950;979.438282769978,5.20047197086303;1000.28167807731,12.0064473977953;1030.75943582000,6.95282519918469;1048.12524587566,4.44394900576420;1060.84248124398,4.91806023761925;1087.38600016170,6.42145623966544;956.365334513133,9.40908821396101;947.610187543601,5.30566379251084;1066.89056040971,6.40529132669045;926.081425471026,10.2463997186001;958.964179423781,8.69798900959628;1053.41529110055,4.81777611295786;920.583342098580,3.68072172251412;1037.51906078049,9.10048677662315;1053.48868247535,5.93592008468454;944.542803429011,5.71921523438807;1041.88595400140,2.56495743244317;911.630829794021,-0.635673253578855;967.119205049919,3.79777322393491;998.676164493725,9.54850262934616;984.964695144109,4.76554806593423;1017.40495877495,3.86353517051840;1007.90848625376,5.11749202960124;1043.34686608940,7.75073287435989;941.132357447435,4.05830559666567;975.294490436945,0.0311183701202999;1070.78196343094,4.18457050434720;1022.97136147924,8.78215840938846;1012.76839391443,9.33485536764057;999.414330172285,8.88930429815601;1072.41793714204,7.16908462880873;1104.84704460692,6.44839009163073;938.126816847767,3.33372248535495;1012.15927044594,7.77604545956880;1062.95796331206,4.08577061564484;1021.47271929337,7.18357777000654;866.049872615899,2.57773188010788;961.383428520875,5.70292508379807;977.084074261649,9.13986640535498;987.301121584953,5.22725671118378;1063.46000552811,7.01806802991222;1101.81578622370,5.83069004099795;1023.93281517077,4.94761411679422;1046.38394769528,6.63735837523687;1061.89124315787,4.74420061619161;974.384803125868,7.43055585243296;965.576237313419,4.24868214170777;1006.99761837910,3.98562627411846;1027.00232842260,4.92296726683940;940.420358247537,8.43901400198662;1039.25108265210,7.21907505550513;989.351568708563,8.28108185079546;970.231643148925,11.4317701879495;1051.30356687371,5.10118751384974;1005.58929060876,4.63054948964324;983.338903874341,8.13512375802120;983.759854874242,5.54098305168022;982.551652866219,7.47596375559212;1050.20451975966,7.84188679077205;911.198887748271,8.06889884191146;976.090002274097,5.68995632513130;902.647241429442,10.8876938368806;1048.34259366378,5.65265312470930;929.763613857677,2.23419750219069;958.596211514468,4.42393582907354;950.607280611536,7.97611819316003;1052.42374417228,9.50518068084919;996.780847670839,5.10833565108926;988.132758834792,10.3198351278431;970.456796946622,6.35488292074060;1041.94878684626,4.67930122024291;929.935732962252,8.55296030102395;966.760289345276,5.12414177118573;1030.13723542653,2.97409309203459;918.518165912775,-1.26133576813626;1000.76542599035,7.84611788593198;976.192803313347,7.35730347734658;1087.26579966403,3.53258414564651;1056.73834939097,3.00252376106013;1000.73659127517,0.432182010324834;1017.09093513700,3.90824820189542;987.053156561999,4.55812510243965;1157.73339053954,8.28667687643446;990.255418925526,5.59971037029753;899.277003886285,11.2328962934954;970.419584361487,4.32008336793927;977.281005977141,3.21388694209688;920.286019440316,5.35480921913285;1014.02246447703,6.45548900338915;1069.57441447730,6.40920119819126;974.212218280689,6.41689599962255;935.211161473161,7.07507173503086;963.199354890240,7.44639676043941;1016.42222470641,5.17089031818618;993.577624282961,3.31324098196476;902.103522790589,6.23583835719906;1028.10354792982,8.85216724402922;1029.14238043729,11.4162347711279;909.560599796816,5.64022506794165;1008.26103212199,2.59568999080480;1037.76366289508,1.96261024454551];
AgeHf2 = [1964.70565714920,-7.33616324824283;1935.33162955383,-7.13990712072159;1983.19855099767,-3.85240123047734;1931.65164268285,-8.11877335898527;2021.05222082376,-8.12750559067338;2081.60577836872,-7.97187183288822;2060.38419755596,-7.71037502952057;2007.41421101199,-11.7504582797879;2019.11344412543,-4.98742208100585;1988.38764788595,-6.96444632945800;1944.37624862958,-6.33298225089180;1936.93172154357,-7.06775482827799;1966.12809073436,-8.60424604986595;2011.67566735451,-6.70340591646974;1913.13966428391,-2.11942871894668;1980.54552447822,-5.90743588095571;2009.67244305355,-7.03926630987035;2020.49919321958,-3.31547249307365;2030.71068430440,-5.06738885026983;2107.32420673975,-7.57740114054963;1970.82857159066,-8.33337642552521;2027.78704068743,-8.63801043984477;1919.42552864858,-8.39653986474136;2046.92761567909,-11.3999595282011;1974.32420294932,-8.05608663664248;2038.55731600629,-9.33470179944414;2137.59999498852,2.62046671359649;1958.53987894438,-10.8421621860690;1983.07864053019,-7.55389990371528;2088.10128228142,-8.75675492097196;2071.38916594516,-7.38033166152365;2021.98838111009,-6.27385381461245;1979.09834982277,-3.81760704881486;1960.65116926428,-3.35209129655147;1949.14818093526,-8.86924642676008;1958.89953623423,-6.66066725029636;2014.02397904416,-8.38326007772977;2014.30683547991,-9.03717836228976;2083.23409757654,-3.79788916333472;2002.43175762733,-3.55829147747704;2026.51530794639,-7.39401400816202;1965.37889693600,-6.97749016042807;2008.08525492784,-8.82362860160865;1937.81525322280,-5.77081054048979;2036.05138393084,-9.49873038896234;1926.25563400805,-11.2657071044213;2006.26990974793,-4.26729664291272;2051.59019081260,-5.92111642634702;2019.64564671998,-6.87088687032297;2029.61930670030,-4.74981700935132;1975.77238724012,-7.32541199840849;1865.36957552264,-9.67709761911698;1975.89773993008,-3.80604873071030;2019.78108617452,-12.4977439879218;1923.07882581565,-6.68214182935440;1959.01815345115,-1.30896761262987;2082.51210936778,-10.4443923150764;1994.51636444698,-6.98375533320748;2003.57203351311,-8.56302284665823;1924.78308893858,-2.81270010003484;1997.64810346538,-7.14533619336561;2047.47228384996,-5.83713703805796;1911.65434573740,-7.94586022616414;1980.18713562916,-7.54505608868841;1984.30686024743,-1.89772679690398;2019.15068325941,-4.83594138243184;2067.34064748538,-2.66928973884759;2085.69951711708,-7.12320751783751;2026.10569738497,-6.75456597228463;2077.35847706161,-4.72028448449825;1969.27564526572,-5.71740012589660;1987.21578196300,-8.80731486065368;1943.54897673034,-9.23412798904398;2111.81390850258,-7.20633075988705;1906.65114848087,-6.06547820440021;2023.29391809075,-6.24803047074039;1980.88097016308,-6.14664213980635;2022.47164828888,-2.45592254152782;1920.92163002010,-2.88481743293601;1910.70968885262,-3.85573680627835;2015.16925499550,-7.20091416441949;2098.55942088456,-4.90186288656702;2024.28521531215,-11.6323345488817;2031.68494597422,-5.74394835676249;1963.53111662480,-9.59690414854458;2016.68701044510,-10.2019219203236;1969.01344470070,-8.41563654377860;1966.02204003988,-2.49471034601700;1954.73174503160,-3.05486589751137;1982.59487463375,-5.92539428245592;2043.06234708785,-1.99943631636486;2111.45898917985,-5.35146802968426;2013.73908477885,-8.62010851632935;1992.07103236265,-6.83833795902917;1929.03089174503,-7.17317039267859;2040.32744731546,-7.26260623735224;2029.62838080374,-3.68034687189071;1956.14796940572,-6.52720620940667;2042.49479358415,-11.2344395129698;2066.45554553963,-2.23460483912208;1975.30819759646,-5.56824542892422;1998.86911426160,-3.16066804103480;2074.77637409790,-5.96928452097996;1986.71753706448,-6.40291664959302;2028.39790269076,-2.63976274937621;1980.01602801068,-11.0136486429444;1999.89639762089,-8.82625845131472;1898.47041794986,-5.78791341429128;1948.05378801307,-11.0477809710085;1997.48453842574,-6.07337895245637;1963.24333021930,-5.56647904534394;1905.22946528489,-7.51232651825496;2030.46269178482,-7.82129736484733;1976.02376146938,-9.54778348580360;2037.55626698875,-8.31452987303490;1950.98283216227,-5.61536287675488;1888.13169829988,-6.04700528711932;2075.54155650058,-9.64958857131980;1979.51941905730,-5.96742758452826;1996.90560834497,-8.12778467630244;1966.39370396524,-10.1842000444018;1981.75430188097,-10.2688015786459;2068.66297647944,-9.49262704542928;2054.82758606911,-5.72931732339265;1964.20988639367,-10.7409167611784;2023.70081115229,-9.55452668532373;1980.44684311729,-7.36414098965445;1986.15730061656,-12.7762496746112;1975.73043772693,-8.76107589300913;1974.14846636509,-1.96151487709585;2087.15282553658,-6.53338658426320;1992.05540546590,-5.68705080835557;2038.41790107234,-3.46168590883480;2010.30387816335,-14.3823003860380;2031.89744165283,-9.85460798003897;2005.10822045138,-12.1091931510930;1980.28222460860,-2.85057935227086;1994.83021592382,-8.95048226464962;2105.47503807303,-7.13560140692129;2008.29701341788,-7.61925002984238;1967.68290986838,-8.47869323464143;1984.42838824534,-7.18531224918660;2088.62387425997,-4.72388413069529;1940.18474904708,-7.51984970397957;1992.38923364722,-7.46751303410767;1960.77110083065,-10.4378214108239;1919.68158998126,-4.70575673992328;2032.73382183731,-0.338413323070374;2031.37636387665,-8.74720364566809;2037.95963085185,-5.47835788851501;2041.59923856328,-1.52061371921985;1975.63149553893,-3.41960064688074;2017.27654671102,-5.77402227525379;1927.63338397799,-3.15136944678344;1891.80516554332,-11.7148868004819;1991.36676749138,-6.78820267674247;2074.70556529489,-2.68161835779639;1927.27597573459,-9.25784634760743;1976.00945630870,-9.98326393727507;2082.22394270230,-9.19875506124476;2106.30758210022,-9.22466419196908;2076.49042683615,-6.36729454265719;2033.83606179578,-8.15372073718620;1978.50290134695,-6.19485976130486;2030.52427464148,-8.17258385765512;1970.15559020730,-5.45628788770352;2055.64566530878,-8.27876836272116;2010.24690230913,-6.11847916749883;1953.66276535854,-5.79927179095924;2005.54485764990,-10.3462796925538;2044.65273919464,-5.08576786032129;2079.52632641944,-6.26939979509058;1928.81312746892,-4.03550165842594;1962.48485432489,-4.35611522126590;2016.69823071985,-2.36981050499419;2040.21860360061,-5.51806455293384;2013.68547779777,-4.00852059846842;1981.35639615809,-8.47963682846730;2182.81372474364,-3.72548774949551;1912.81812325855,-2.91017896400065;2086.26960181721,-8.52727775543387;1992.11455028491,-7.80176997568149;1938.39043596175,-2.31747643578171;1979.94483653580,-6.28085086872601;2053.83089359986,-12.8422732330767;2044.28022813975,-0.967453990701898;1902.85663084345,-8.55956261757241;2040.66291412370,-2.34001819280071;2021.40651490502,-7.78501355101775;2052.61699654761,-5.58901633666320;2084.21530246780,-2.54833404136316;1877.89366463468,-7.13325842586907;2064.59191161943,-12.8536461549256;1964.04022513044,-7.09037988383804;1962.27467922182,-6.67591762958248;1956.04360713625,-6.40031461856930;2010.90546382164,-6.38747088201271;1982.41923220097,-6.36351979819549;2018.42230835970,-7.38947441440111;1961.03689647533,-8.66869323905009;2083.77675827810,-10.8313240289271;2008.59248070202,-3.47537324308918;1943.77014872636,-9.06182993457191;2010.42571640213,-10.2884505026379;1994.20462040085,-4.90165222727714;2053.88782355999,-8.17833076330167;1965.85580803021,-4.16617107686716;2046.29380696127,-3.61792411892333;2025.08768195399,-12.0846148323270;2089.27158641068,-4.97629116440894;1996.64840818115,-3.16643553492006;2068.36535001994,-4.75303980775207;1989.30479296256,-4.89888112422016;2044.88035962973,-5.46915966445731;1937.61946731745,-5.78090391635515;1976.85055594495,-3.73443127209105;2002.08403355756,-6.47071121746808;2030.37958876178,-3.45247266404629;1958.56193527338,-9.41175471709019;1977.04314360785,-3.71676152509626;1941.00955688539,-7.08662238400996;2134.56081644662,-2.96079409776763;1961.80668891530,-10.0408464555977;1989.77484435762,-8.05605344710924;1913.22020127839,-9.50046290837666;1946.16865609772,-6.84941256348428;2002.31821890271,-5.53224377710486;1958.41045628887,-10.9663585949785;2016.07301084028,-10.2026235318298;2054.66910091817,-1.94013150772322;1979.73858138500,-5.23050706520900;2057.30290956793,-6.02479616704803;2057.63252936177,-11.3284385105082;2088.40121530107,-9.82548242616104;2030.55248717650,-5.52263096412474;2002.30612575596,-7.72009155253832;2099.57010010765,-4.23357931050673;2035.90654480658,-2.46294514352511;1995.95274260055,-13.3345306475143;1978.63063836597,-4.30417281634063;1989.10918604779,-7.79405951010555;1987.35450552595,-8.95060460045282;1960.53747048740,-4.24930394124108;1998.39298622736,-10.0986973914772;2029.85210879943,-7.09707553395509;1994.85248773359,-5.10099272205485;1948.30513717806,-2.99495895611289;1969.47932908239,-5.15424894449640;2025.27635180343,-8.93768324112673;2037.89833659084,-2.33532976949123;2037.96237626071,-5.96581910511930;1959.52445202370,-6.07409521685304;1975.25699348997,-5.73599545363507;1937.32905131057,-10.3487621784400;1980.56552372486,-5.79105214540740;1948.03702262005,-2.19193353558288;1941.54188097393,-4.18525740442825;2036.72774742368,-7.83291051702878;1900.59700177285,-8.45861618162620;1986.47896780246,-11.9921777712216;2031.59394599111,-4.90354756507694;1999.60388685933,-8.51318294802903;2011.16283688991,-9.26311168854710;2016.88051000913,-5.23659014826346;2150.93881933461,-6.08322689927003;1969.27941414110,-6.92738664098892;2029.65753241718,-4.95601948553471;1941.42551097503,-5.25526031069394;2049.76893942822,-9.37616314338614;2036.69792102120,-10.2519596856829;2049.76739211651,-7.46715172213651;1979.96485845181,-3.53806338061859;1978.66619349639,-6.08644240175214;2044.43324852186,-9.38139680207212;2025.27167428961,-7.75170612384203;2077.82734831738,-12.8821500829795;2041.87358675968,-8.13260964809180;2132.29616094098,-10.7656354591385;2074.32417719855,-7.81951100245578;1932.78049040008,-9.40463466740521;1925.34064033641,-7.58232320159358;1976.11942060764,-10.6296645998664;1935.75839202030,-7.58171031904476;1985.90896690400,-7.21974909328677;2057.72225329614,-7.43032642658543;2061.41776337425,-9.48177841767236;1967.02764152606,-8.67132650334898;2066.79745137901,-4.98496155795345;2029.50076573519,-6.31562194314730;1993.10973688228,-10.1995776934259;2040.60859444998,-8.22960599714518;2068.90859053169,-6.13893909305733;1984.26542839402,-6.76651627998758;1998.81073628098,-1.10718045249277;2008.74598792447,-10.2030875283243;1981.68732585799,-4.18992635322655;2024.00163343013,-8.92189887438778;2024.85209443159,-4.00523501974541;2063.60126672759,-3.45160593286556;2004.42831795350,-7.10594074169449;961.814493949897,-12.7731422982138;995.831941071881,-10.5718784301230;994.939111692812,-2.85648177589922;977.908260577489,-17.3621289379018;1129.54777629746,-8.13669060626878;982.329014161262,-15.2994999286643;1003.01787053659,-10.6245122027127;967.314391423068,-14.7149133943755;999.605207048302,-15.6379173042888;981.517146910159,-21.2263116108584;1003.72360224763,-4.77530473926631;1012.90046938253,-17.5966746302411;985.293536144422,-7.66869714732370;1014.52159343600,-14.2020977323822;1134.55160068133,-9.37551529731975;1060.29947532685,-9.74051976013080;1039.37408713046,-18.1177560264037;953.304820411732,-12.7055886107424;1034.27946753209,-17.8376675089639;1056.49062301665,-15.6527947251195;886.506524187194,-11.1188062638777;1013.46888992431,-15.4862684195396;1131.70352291550,-17.2770230684005;951.443828795748,-21.7594262159919;945.162865893401,-13.5877412452422;1067.32715421981,-4.85733547718715;923.130857033360,-5.29683729954888;976.887957726146,-13.1113276169104;1017.98755503089,-9.73764129825152;982.877278089899,-13.0732850645479;994.772434221270,-15.3047828159899;1004.92618948372,-10.6505115604803;974.569435226618,-13.3312017192899;999.164390675494,-8.51146856527159;944.494751611811,-7.74941055774074;896.822439520552,-13.3396099240183;1054.30697187209,-15.2299136790814;902.262670226604,-17.8830061158402;973.548388580593,-9.84059726781318;1080.98349616206,-10.4226176196728;887.022509965053,-9.55547051328800;1007.00289534186,-3.82893775072736;1049.73250355510,-7.18649322349152;1089.59410432325,-14.8792839813366;996.161838570313,-9.32617536301950;987.929237828762,-8.82719318402198;898.166659879691,-7.91490880035408;1013.33918196141,-12.0483724201404;960.200800615544,-7.61104600760927;961.783633580600,-11.1507181974261;1016.23943772955,-14.3320375687118;992.049108562507,-6.50846366484739;969.450803067304,-18.1428606153537;938.740573286759,-18.5354092598267;1005.09712978645,-10.0088870373615;956.248583511001,-13.3632405578557;960.845093000190,-10.5784672773891;1019.35761604029,-11.4295414819241;1064.25916765219,-2.24066597910998;981.689136911264,-19.2127492021445;1008.02043149435,-18.1198059395604;976.079239875443,-2.75047754226899;1000.61170540682,-14.7394886005215;950.293156158579,-14.5678980758808;955.064471578622,-11.4793781532871;980.510140132806,-9.24587517424847;1069.98562309864,-15.7097618603846;961.453589282930,-11.6597709895338;976.527331253558,-20.0939504109352;1070.47105726461,-10.4837912209112;948.661668891227,-14.7264117388515;1029.36761609717,-12.0609747137530;958.945868320661,-12.7344964364942;997.025900163501,-7.74878583877002;1010.89835643286,-4.09527034718054;1032.49482983048,-5.02819854886817;990.921223309088,-15.3256687403674;966.612511100346,-7.48945786901489;989.005166350298,-14.7045731659034;1058.94127599772,-11.5714434089061;1095.66038615104,-20.4744197900556;1016.27280389604,-13.1937036012963;1055.98293290573,-14.3714140304903;958.520174117281,-9.94710242322158;1014.35287349279,-13.7222670125236;1057.40770947759,-9.63677531628962;1004.30395847941,-6.64943169731627;980.814945677299,-7.25515126458626;938.761118083260,-11.0020213070511;1087.41819975059,-9.50152767258503;1010.59270311170,-15.9678106282522;1039.06241660251,-15.9159969311450;1083.56466295043,-19.5965733030558;991.818489285294,-10.2336660833339;959.080197360660,-12.1455768265510;996.188523506829,-14.2110869111685;916.493116962722,-11.6734341896860;951.364861918824,-15.6970266681110;1007.71361824028,-19.0432169524983;991.042166679704,-8.19287740229829;1084.81933174382,-10.8403115980701;1038.56487996050,-13.4800265199281;1008.36428478442,-8.48211704846604;1021.81370655079,-22.0186379777035;1015.86003925810,-10.3335453900418;1013.06022365559,-12.0615222213799;998.143038777059,-12.8431734385533;955.064219240423,-9.21738144424190;1038.83245637218,-3.48238733228234;1012.17314071144,-8.33890501477501;943.610509420662,-6.06618887922001;963.948788095026,-18.5341141699447;985.413800221730,-10.0484219679689;954.242707071562,-11.6497976574675;1010.51627344321,-12.8684187142276;1004.45547026507,-13.4767414843405;948.160814975772,-9.46907019758336;1092.17207568428,-8.64598123428368;899.905151118901,-9.45814853084650;976.693171850164,-8.71549673206837;1041.71416059771,-10.6872761881667;1083.75120127577,-14.0540165832301;947.483457045108,-13.7005226104599;969.511761002778,-12.2771935241456;1089.37248216017,-17.1365049907560;1017.48141386211,-13.2981353768274;952.417864516534,-10.7452278745100;1014.28157341175,-11.4592753288020;920.912430850898,-13.6565638725778;921.652284733311,-11.6684985327285;1029.30998263875,-14.5235841829145;908.152349097936,-14.4618769217830;980.950965912710,-12.2340705887551;1060.02052889927,-11.3212706618192;953.862133179506,-13.3806443480098;1115.66052720021,-11.9624771737464;1058.10912526609,-13.3250966306451;918.775759723699,-18.7728388836788;1049.25668093143,-2.40978179349018;926.004418391538,-13.7603234365923;943.366100353386,-9.96148586948592;1096.02467766948,-10.4825479967671;1050.64787400121,-9.18973404050128;1101.54153924151,-10.9327242342513;1062.66703719865,-9.71381021369476;1013.61486350762,-10.0872586203291;1076.97739600543,-12.6452656871656;914.934798887963,-19.2242859530304;1025.83643568856,-17.2891605545344;978.240195621660,-13.2116008913374;1002.96850665533,-4.11129092018716;1055.97396862596,-7.80792135782465;1080.17204597086,-9.74222086296501;975.450044824194,-11.4381530671482;952.685558395983,-9.41812006561689;989.325921198054,-10.9537476701624;1036.46260027407,-8.59895801560488;992.726254803433,-22.1989721152086;995.366766904090,-14.9456541997218;1036.73108511280,-9.94412115189298;965.840335245580,-14.1101648239760;1045.11261941635,-10.6366102254633;1034.30082581323,-5.61359459016926;987.854251831118,-16.0907544987262;1089.72725035884,-5.75430914954130;908.243379349244,-9.14881829628130;1073.09425240043,-13.2037050667080;998.576563423089,-13.0447491635775;936.552464992670,-22.7729381707300;1015.27668941439,-7.98862954277832;940.975207021667,-4.61534916620400;1119.87248361166,-7.79969082975851;1031.34514427924,-17.5695427657107;905.047801658661,-14.4773893305803;962.395345195330,-16.8626417574379;999.564352843097,-19.5030538630511;976.581905180652,-15.3923665558554;1025.63121556147,-6.41258313533213;902.725208968762,-11.0175459548453;1051.13185904132,-14.1044162713539;919.669147945641,-6.33034668765110;944.973323376305,-15.3526118516600;962.106376607113,-7.29658218942412;1127.34406084137,-15.7518858977762;978.181156270704,-10.8570815100569;1067.26657754034,-8.26332578933167;949.374235476807,-15.5056865720404;994.901596390651,-6.40627236244632;1078.68802027682,-5.74665079921640;973.575550631292,-8.69786217890104;1039.39268448645,-14.4465574639267;1040.93958255250,-10.5382529071633;1024.99199741964,-4.93990012591813;951.533593340747,-12.0822275637576;983.797462026826,-19.2129311537301;1030.14779832319,-12.4723012311536;981.288049031669,-16.8554779169978;979.552736713687,-8.32562142711264;1097.43858124339,-11.8132054534547;1036.11000591708,-19.7259156291063;1017.17192252370,-13.0811673864665;953.324882808812,-5.25956650286387;1027.43497177937,-8.18769885909319;915.932251936288,-9.23368122531405;1038.55697890073,-19.9548816173907;1032.51244257994,-15.0689534580677;1009.61974562616,-6.67794577703389;1078.07625850612,-9.40473498831617;960.350793448526,-12.6410488767372;1090.85600447641,-9.03671275789824;998.732508470089,-10.0144204531913;974.382872164013,-17.3103307124071;1081.87344259137,-14.1340752076148;906.193968490962,-22.7836215927653;941.955191783670,-4.11746256072736;996.507323891358,-18.3038006589923;1065.90240236557,-15.3971546023281;1027.04390633766,-9.69339510689091;1023.36264747545,-15.9946584166295;978.502553330651,-11.7422530033239;841.547708481176,-15.6700043690372;919.196754542570,-11.3196686400069;1003.70483309413,-12.3228847998320;1000.08071335683,-5.91546246034820;1056.90937250941,-16.4180907305023;1026.40447587411,-6.15645826413204;1040.73270652412,-12.9830231514526;1020.30039951075,-5.99971569224078;982.283043774346,-13.4830860148398;1023.10197687872,-3.67320368910545;1031.62725454759,-12.2823308986387;979.702084092941,-11.3667341909571;1014.37642376354,-19.3434319762583;1044.50395770729,-11.2364667851566;984.729508370431,-16.5250688426465;958.821266035579,-8.59455747456699;1098.63583017896,-11.6423969157471;959.932875997431,-14.6517068387002;1149.10835060062,-4.07401185124114;1007.06313782562,-13.3514527969742;959.299688022837,-15.9338079771124;969.118791816784,-12.6214364887741;956.533112369290,-10.9504808076491;1016.95666345856,-15.7443909914700;984.361172095837,-17.3537249978166;979.778399996690,-19.1053711629009;992.515882687468,-12.5917499191554;1037.06465879907,-16.2586388377267;1046.44941616907,-13.6813668708087;961.763773002305,-10.5689539616224;922.000096712873,-6.68293996491461;941.021693250080,-6.00080886656184;950.046506275265,-12.3165684827335;965.824823126633,-8.80526543052881;936.129065510607,-21.1261171169612;967.441732867458,-9.56023443219008;1011.67764060424,-10.6827073943469;1031.01354780727,-13.7815032060157;1002.51583832795,-7.97907084370941;1030.92228868165,-16.7430080617180;955.944798453011,-9.45471587875469;969.637021238243,-13.9587902275952;980.929987038782,-21.1324128944727;959.614753409629,-8.43230262316126;982.089825005983,-11.5410557890159;992.059105876382,-18.2751261286997;943.195939489398,-13.0186118706484;1091.55742848522,-12.0629942045776;1066.84762781701,-12.7348787480489;1068.42216238501,-7.82592942872659;1045.05989431075,-14.5607107743689;959.605797961996,-6.21491380841722;1020.43128376298,-7.36308392493794;1005.93110680263,-16.3647717914784;1024.91975701594,-11.7987438805277;1080.47948523845,-12.1512582852656;970.607057773117,-16.0036489624622;1053.70666502097,-12.4856953458820;1028.32605798837,-13.0381229219232;1025.43090331337,-18.8746651289382;992.466211345575,-0.395688221480969;934.715930460929,-10.1817928822433;978.639926227982,-11.7244859199616;955.050906036476,-6.97882575667382;982.025162112357,-21.6218651590971;1089.18222041947,-2.68619175543645;921.886495237447,-27.4716585609276;964.659460189430,-16.1067508865245;1047.47818977532,-12.0028020898253;938.032915090365,-21.3396701687394;1059.31348732898,-15.7215472822652;1033.93324480905,-5.19681906829631;1052.44229039578,-11.5046365498956;1082.08028000483,-9.73401652528584;1045.12891914474,-11.4745740208507;906.610439696600,-8.30062645332684;1003.91172970650,-13.1445282669349;1042.39897517954,-19.0315704680054;854.881000080477,-8.24838902977319;964.731777973767,-15.8732911588031];

% KDEs
kde1 = kde(AgeHf1(:,1),bandwidth_x.*ones(size(AgeHf1(:,1))),xmin,xmax,xint); %make KDE
kde2 = kde(AgeHf2(:,1),bandwidth_x.*ones(size(AgeHf2(:,1))),xmin,xmax,xint); %make KDE

cdf1 = [0;(1:(n*2))'/(n*2);1];
cdf2 = [0;(1:(n*2))'/(n*2);1];

MIN_XY=[xmin,ymin]; %grid params for bivariate KDEs
MAX_XY=[xmax,ymax]; %grid params for bivariate KDEs

% viridis colormap that clips 0 values at 95%
%cmap = [1,1,1;1,1,1;1,1,1;1,1,1;1,1,1;1,1,1;1,1,1;1,1,1;1,1,1;1,1,1;1,1,1;1,1,1;1,1,1;0.280893580000000,0.0789070300000000,0.402329440000000;0.281445810000000,0.0843197000000000,0.407414040000000;0.281923580000000,0.0896662200000000,0.412415210000000;0.282327390000000,0.0949554500000000,0.417330860000000;0.282656330000000,0.100195760000000,0.422160320000000;0.282910490000000,0.105393450000000,0.426902020000000;0.283090950000000,0.110553070000000,0.431553750000000;0.283197040000000,0.115679660000000,0.436114820000000;0.283228820000000,0.120777010000000,0.440584040000000;0.283186840000000,0.125847990000000,0.444960000000000;0.283072000000000,0.130894770000000,0.449241270000000;0.282883890000000,0.135920050000000,0.453427340000000;0.282622970000000,0.140925560000000,0.457517260000000;0.282290370000000,0.145912330000000,0.461509950000000;0.281886760000000,0.150881470000000,0.465404740000000;0.281412280000000,0.155834250000000,0.469201280000000;0.280867730000000,0.160771320000000,0.472899090000000;0.280254680000000,0.165692720000000,0.476497620000000;0.279573990000000,0.170598840000000,0.479996750000000;0.278826180000000,0.175490200000000,0.483396540000000;0.278012360000000,0.180366840000000,0.486697020000000;0.277134370000000,0.185228360000000,0.489898310000000;0.276193760000000,0.190074470000000,0.493000740000000;0.275191160000000,0.194905400000000,0.496004880000000;0.274128020000000,0.199720860000000,0.498911310000000;0.273005960000000,0.204520490000000,0.501720760000000;0.271828120000000,0.209303060000000,0.504434130000000;0.270594730000000,0.214068990000000,0.507052430000000;0.269307560000000,0.218817820000000,0.509576780000000;0.267968460000000,0.223549110000000,0.512008400000000;0.266579840000000,0.228262100000000,0.514348700000000;0.265144500000000,0.232955930000000,0.516599300000000;0.263663200000000,0.237630780000000,0.518761630000000;0.262138010000000,0.242286190000000,0.520837360000000;0.260571030000000,0.246921700000000,0.522828220000000;0.258964510000000,0.251536850000000,0.524736090000000;0.257322440000000,0.256130400000000,0.526563320000000;0.255645190000000,0.260702840000000,0.528311520000000;0.253934980000000,0.265253840000000,0.529982730000000;0.252194040000000,0.269783060000000,0.531579050000000;0.250424620000000,0.274290240000000,0.533102610000000;0.248628990000000,0.278775090000000,0.534555610000000;0.246811400000000,0.283236620000000,0.535940930000000;0.244972080000000,0.287675470000000,0.537260180000000;0.243113240000000,0.292091540000000,0.538515610000000;0.241237080000000,0.296484710000000,0.539709460000000;0.239345750000000,0.300854940000000,0.540843980000000;0.237441380000000,0.305202220000000,0.541921400000000;0.235526060000000,0.309526570000000,0.542943960000000;0.233602770000000,0.313827730000000,0.543914240000000;0.231673500000000,0.318105800000000,0.544834440000000;0.229739260000000,0.322361270000000,0.545706330000000;0.227801920000000,0.326594320000000,0.546532000000000;0.225863300000000,0.330805150000000,0.547313530000000;0.223925150000000,0.334994000000000,0.548052910000000;0.221989150000000,0.339161140000000,0.548752110000000;0.220056910000000,0.343306880000000,0.549413040000000;0.218129950000000,0.347431540000000,0.550037550000000;0.216209710000000,0.351535480000000,0.550627430000000;0.214297570000000,0.355619070000000,0.551184400000000;0.212394770000000,0.359682730000000,0.551710110000000;0.210503100000000,0.363726710000000,0.552206460000000;0.208623420000000,0.367751510000000,0.552674860000000;0.206756280000000,0.371757750000000,0.553116530000000;0.204902570000000,0.375745890000000,0.553532820000000;0.203063090000000,0.379716440000000,0.553925050000000;0.201238540000000,0.383669890000000,0.554294410000000;0.199429500000000,0.387606780000000,0.554642050000000;0.197636500000000,0.391527620000000,0.554969050000000;0.195859930000000,0.395432970000000,0.555276370000000;0.194100090000000,0.399323360000000,0.555564940000000;0.192357190000000,0.403199340000000,0.555835590000000;0.190631350000000,0.407061480000000,0.556089070000000;0.188922590000000,0.410910330000000,0.556326060000000;0.187230830000000,0.414746450000000,0.556547170000000;0.185555930000000,0.418570400000000,0.556752920000000;0.183897630000000,0.422382750000000,0.556943770000000;0.182255610000000,0.426184050000000,0.557120100000000;0.180629490000000,0.429974860000000,0.557282210000000;0.179018790000000,0.433755720000000,0.557430350000000;0.177422980000000,0.437527200000000,0.557564660000000;0.175841480000000,0.441289810000000,0.557685260000000;0.174273630000000,0.445044100000000,0.557792160000000;0.172718760000000,0.448790600000000,0.557885320000000;0.171176150000000,0.452529800000000,0.557964640000000;0.169645730000000,0.456262090000000,0.558030340000000;0.168126410000000,0.459988020000000,0.558081990000000;0.166617100000000,0.463708130000000,0.558119130000000;0.165117030000000,0.467422900000000,0.558141410000000;0.163625430000000,0.471132780000000,0.558148420000000;0.162141550000000,0.474838210000000,0.558139670000000;0.160664670000000,0.478539610000000,0.558114660000000;0.159194130000000,0.482237400000000,0.558072800000000;0.157729330000000,0.485931970000000,0.558013470000000;0.156269730000000,0.489623700000000,0.557936000000000;0.154814880000000,0.493312930000000,0.557839670000000;0.153364450000000,0.497000030000000,0.557723710000000;0.151918200000000,0.500685290000000,0.557587330000000;0.150476050000000,0.504369040000000,0.557429680000000;0.149039180000000,0.508051360000000,0.557250500000000;0.147607310000000,0.511732630000000,0.557048610000000;0.146180260000000,0.515413160000000,0.556822710000000;0.144758630000000,0.519093190000000,0.556571810000000;0.143343270000000,0.522772920000000,0.556294910000000;0.141935270000000,0.526452540000000,0.555990970000000;0.140535990000000,0.530132190000000,0.555658930000000;0.139147080000000,0.533812010000000,0.555297730000000;0.137770480000000,0.537492130000000,0.554906250000000;0.136408500000000,0.541172640000000,0.554483390000000;0.135065610000000,0.544853350000000,0.554029060000000;0.133742990000000,0.548534580000000,0.553541080000000;0.132444010000000,0.552216370000000,0.553018280000000;0.131172490000000,0.555898720000000,0.552459480000000;0.129932700000000,0.559581620000000,0.551863540000000;0.128729380000000,0.563265030000000,0.551229270000000;0.127567710000000,0.566948910000000,0.550555510000000;0.126453380000000,0.570633160000000,0.549841100000000;0.125393830000000,0.574317540000000,0.549085640000000;0.124394740000000,0.578002050000000,0.548287400000000;0.123462810000000,0.581686610000000,0.547444980000000;0.122605620000000,0.585371050000000,0.546557220000000;0.121831220000000,0.589055210000000,0.545622980000000;0.121148070000000,0.592738890000000,0.544641140000000;0.120565010000000,0.596421870000000,0.543610580000000;0.120091540000000,0.600103870000000,0.542530430000000;0.119737560000000,0.603784590000000,0.541399990000000;0.119511630000000,0.607463880000000,0.540217510000000;0.119423410000000,0.611141460000000,0.538981920000000;0.119482550000000,0.614817020000000,0.537692190000000;0.119698580000000,0.618490250000000,0.536347330000000;0.120080790000000,0.622160810000000,0.534946330000000;0.120638240000000,0.625828330000000,0.533488340000000;0.121379720000000,0.629492420000000,0.531972750000000;0.122312440000000,0.633152770000000,0.530398080000000;0.123443580000000,0.636808990000000,0.528763430000000;0.124779530000000,0.640460690000000,0.527067920000000;0.126325810000000,0.644107440000000,0.525310690000000;0.128087030000000,0.647748810000000,0.523490920000000;0.130066880000000,0.651384360000000,0.521607910000000;0.132267970000000,0.655013630000000,0.519660860000000;0.134691830000000,0.658636190000000,0.517648800000000;0.137339210000000,0.662251570000000,0.515571010000000;0.140209910000000,0.665859270000000,0.513426800000000;0.143302910000000,0.669458810000000,0.511215490000000;0.146616400000000,0.673049680000000,0.508936440000000;0.150147820000000,0.676631390000000,0.506588900000000;0.153894050000000,0.680203430000000,0.504172170000000;0.157851460000000,0.683765250000000,0.501685740000000;0.162015980000000,0.687316320000000,0.499129060000000;0.166383200000000,0.690856110000000,0.496501630000000;0.170948400000000,0.694384050000000,0.493802940000000;0.175706710000000,0.697899600000000,0.491032520000000;0.180653140000000,0.701402220000000,0.488189380000000;0.185782660000000,0.704891330000000,0.485273260000000;0.191090180000000,0.708366350000000,0.482283950000000;0.196570630000000,0.711826680000000,0.479221080000000;0.202219020000000,0.715271750000000,0.476084310000000;0.208030450000000,0.718700950000000,0.472873300000000;0.214000150000000,0.722113710000000,0.469587740000000;0.220123810000000,0.725509450000000,0.466226380000000;0.226396900000000,0.728887530000000,0.462789340000000;0.232814980000000,0.732247350000000,0.459276750000000;0.239373900000000,0.735588280000000,0.455688380000000;0.246069680000000,0.738909720000000,0.452024050000000;0.252898510000000,0.742211040000000,0.448283550000000;0.259856760000000,0.745491620000000,0.444466730000000;0.266941270000000,0.748750840000000,0.440572840000000;0.274149220000000,0.751988070000000,0.436600900000000;0.281476810000000,0.755202660000000,0.432552070000000;0.288921020000000,0.758393990000000,0.428426260000000;0.296478990000000,0.761561420000000,0.424223410000000;0.304147960000000,0.764704330000000,0.419943460000000;0.311925340000000,0.767822070000000,0.415586380000000;0.319808600000000,0.770914030000000,0.411152150000000;0.327795800000000,0.773979530000000,0.406640110000000;0.335885390000000,0.777017900000000,0.402049170000000;0.344074110000000,0.780028550000000,0.397381030000000;0.352359850000000,0.783010860000000,0.392635790000000;0.360740530000000,0.785964190000000,0.387813530000000;0.369214200000000,0.788887930000000,0.382914380000000;0.377778920000000,0.791781460000000,0.377938500000000;0.386432820000000,0.794644150000000,0.372886060000000;0.395174080000000,0.797475410000000,0.367757260000000;0.404001010000000,0.800274610000000,0.362552230000000;0.412913500000000,0.803040990000000,0.357268930000000;0.421908130000000,0.805774120000000,0.351910090000000;0.430983170000000,0.808473430000000,0.346476070000000;0.440136910000000,0.811138360000000,0.340967300000000;0.449367630000000,0.813768350000000,0.335384260000000;0.458673620000000,0.816362880000000,0.329727490000000;0.468053140000000,0.818921430000000,0.323997610000000;0.477504460000000,0.821443510000000,0.318195290000000;0.487025800000000,0.823928620000000,0.312321330000000;0.496615360000000,0.826376330000000,0.306376610000000;0.506271300000000,0.828786210000000,0.300362110000000;0.515991820000000,0.831157840000000,0.294278880000000;0.525776220000000,0.833490640000000,0.288126500000000;0.535621100000000,0.835784520000000,0.281908320000000;0.545524400000000,0.838039180000000,0.275626020000000;0.555483970000000,0.840254370000000,0.269281470000000;0.565497600000000,0.842429900000000,0.262876830000000;0.575562970000000,0.844565610000000,0.256414570000000;0.585677720000000,0.846661390000000,0.249897480000000;0.595839340000000,0.848717220000000,0.243328780000000;0.606045280000000,0.850733100000000,0.236712140000000;0.616292830000000,0.852709120000000,0.230051790000000;0.626579230000000,0.854645430000000,0.223352580000000;0.636901570000000,0.856542260000000,0.216620120000000;0.647256850000000,0.858399910000000,0.209860860000000;0.657641970000000,0.860218780000000,0.203082290000000;0.668053690000000,0.861999320000000,0.196293070000000;0.678488680000000,0.863742110000000,0.189503260000000;0.688943510000000,0.865447790000000,0.182724550000000;0.699414630000000,0.867117110000000,0.175970550000000;0.709898420000000,0.868750920000000,0.169257120000000;0.720391150000000,0.870350150000000,0.162602730000000;0.730889020000000,0.871915840000000,0.156028940000000;0.741388030000000,0.873449180000000,0.149561010000000;0.751884140000000,0.874951430000000,0.143228280000000;0.762373420000000,0.876423920000000,0.137064490000000;0.772851830000000,0.877868080000000,0.131108640000000;0.783315350000000,0.879285450000000,0.125405380000000;0.793759940000000,0.880677630000000,0.120005320000000;0.804181590000000,0.882046320000000,0.114965050000000;0.814576340000000,0.883393290000000,0.110346780000000;0.824940280000000,0.884720360000000,0.106217240000000;0.835269590000000,0.886029430000000,0.102645900000000;0.845560560000000,0.887322430000000,0.0997021900000000;0.855809600000000,0.888601340000000,0.0974518600000000;0.866013250000000,0.889868150000000,0.0959527700000000;0.876168240000000,0.891124870000000,0.0952504600000000;0.886271460000000,0.892373530000000,0.0953743900000000;0.896320020000000,0.893616140000000,0.0963353800000000;0.906311210000000,0.894854670000000,0.0981249600000000;0.916242120000000,0.896091270000000,0.100716800000000;0.926105790000000,0.897329770000000,0.104070670000000;0.935904440000000,0.898570400000000,0.108130940000000;0.945636260000000,0.899815000000000,0.112837730000000;0.955299720000000,0.901065340000000,0.118128320000000;0.964893530000000,0.902323110000000,0.123940510000000;0.974416650000000,0.903589910000000,0.130214940000000;0.983868290000000,0.904867260000000,0.136896710000000;0.993247890000000,0.906156570000000,0.143936200000000];

% jet colormap that clips 0 values
cmap =[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0400000000000000,0.0800000000000000,0.120000000000000,0.160000000000000,0.200000000000000,0.240000000000000,0.280000000000000,0.320000000000000,0.360000000000000,0.400000000000000,0.440000000000000,0.480000000000000,0.520000000000000,0.560000000000000,0.600000000000000,0.640000000000000,0.680000000000000,0.720000000000000,0.760000000000000,0.800000000000000,0.840000000000000,0.880000000000000,0.920000000000000,0.960000000000000,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.960000000000000,0.920000000000000,0.880000000000000,0.840000000000000,0.800000000000000,0.760000000000000,0.720000000000000,0.680000000000000,0.640000000000000,0.600000000000000,0.560000000000000,0.520000000000000;1,0,0,0,0,0,0,0,0,0,0,0,0,0.0400000000000000,0.0800000000000000,0.120000000000000,0.160000000000000,0.200000000000000,0.240000000000000,0.280000000000000,0.320000000000000,0.360000000000000,0.400000000000000,0.440000000000000,0.480000000000000,0.520000000000000,0.560000000000000,0.600000000000000,0.640000000000000,0.680000000000000,0.720000000000000,0.760000000000000,0.800000000000000,0.840000000000000,0.880000000000000,0.920000000000000,0.960000000000000,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.960000000000000,0.920000000000000,0.880000000000000,0.840000000000000,0.800000000000000,0.760000000000000,0.720000000000000,0.680000000000000,0.640000000000000,0.600000000000000,0.560000000000000,0.520000000000000,0.480000000000000,0.440000000000000,0.400000000000000,0.360000000000000,0.320000000000000,0.280000000000000,0.240000000000000,0.200000000000000,0.160000000000000,0.120000000000000,0.0800000000000000,0.0400000000000000,0,0,0,0,0,0,0,0,0,0,0,0,0;1,0.560000000000000,0.600000000000000,0.640000000000000,0.680000000000000,0.720000000000000,0.760000000000000,0.800000000000000,0.840000000000000,0.880000000000000,0.920000000000000,0.960000000000000,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.960000000000000,0.920000000000000,0.880000000000000,0.840000000000000,0.800000000000000,0.760000000000000,0.720000000000000,0.680000000000000,0.640000000000000,0.600000000000000,0.560000000000000,0.520000000000000,0.480000000000000,0.440000000000000,0.400000000000000,0.360000000000000,0.320000000000000,0.280000000000000,0.240000000000000,0.200000000000000,0.160000000000000,0.120000000000000,0.0800000000000000,0.0400000000000000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]';

[bandwidth1,density1,X1,Y1] = kde2d_set_kernel(AgeHf1, gridspc, MIN_XY, MAX_XY, bandwidth_x, bandwidth_y); % make bivariate KDE
[bandwidth2,density2,X2,Y2] = kde2d_set_kernel(AgeHf2, gridspc, MIN_XY, MAX_XY, bandwidth_x, bandwidth_y); % make bivariate KDE
density1 = density1./sum(sum(density1)); %normalize so volume integrates to 1
density2 = density2./sum(sum(density2)); %normalize so volume integrates to 1

%make density contours
max_density1 = max(max(density1)); 
max_density_conf1 = max_density1 - max_density1*0.99;
max_density2 = max(max(density2)); 
max_density_conf2 = max_density2 - max_density2*0.99;

%2D CDFs
cdf2d1 = cumsum(cumsum(density1,1),2);    % take the CDF of x at y = max (y)
CDF1_Q1 = cdf2d1;                                            %Local CDF for Quadrant 1
CDF1_Q2 = cumsum(cumsum(density1, 1,'reverse'), 2);            %Local CDF for Quadrant 2
CDF1_Q3 = cumsum(cumsum(density1, 1,'reverse'), 2, 'reverse'); %Local CDF for Quadrant 3
CDF1_Q4 = cumsum(cumsum(density1, 1), 2, 'reverse');           %Loval CDF for Quadrant 4
cdf2d2 = cumsum(cumsum(density2,1),2);    % take the CDF of x at y = max (y)
CDF2_Q1 = cdf2d2;                                            %Local CDF for Quadrant 1
CDF2_Q2 = cumsum(cumsum(density2, 1,'reverse'), 2);            %Local CDF for Quadrant 2
CDF2_Q3 = cumsum(cumsum(density2, 1,'reverse'), 2, 'reverse'); %Local CDF for Quadrant 3
CDF2_Q4 = cumsum(cumsum(density2, 1), 2, 'reverse');           %Loval CDF for Quadrant 4

%make density contours
max_cdf2d1 = max(max(cdf2d1)); 
max_2dcdf1_conf = max_cdf2d1 - max_cdf2d1*0.99;
max_cdf2d2 = max(max(cdf2d2)); 
max_2dcdf2_conf = max_cdf2d2 - max_cdf2d2*0.99;

%calculate 1D comparisons
R1D = r2(kde1,kde2) %Cross correlation (Saylor et al., 2012)
L1D = 1 - sum(abs(kde1-kde2)./2) %Likeness (Satkoski et al., 2013)
S1D = sum(((kde1.*kde2).^0.5)) %Similarity (Gehrels, 2000)
D1D = max(abs(cdf1-cdf2)) %KS test D value (Massey, 1951)
V1D = max(cdf1-cdf2) + max(cdf2-cdf1) %Kuiper test V values (Kuiper, 1960)

%calculate 2D comparisons
d1 = reshape(density1,size(density1,1)*size(density1,2),1);
d2 = reshape(density2,size(density2,1)*size(density2,2),1);
R2D = ((sum((d1 - mean(d1)).*(d2 - mean(d2))))/(sqrt((sum((d1 - mean(d1)).*(d1 - mean(d1))))*(sum((d2 - mean(d2)).*(d2 - mean(d2)))))))^2
for m = 1:size(density1,1)
	for p = 1:size(density1,2)
		L2Dmap(m,p) = (abs(density1(m,p)-density2(m,p))/2); %Likeness map
		S2Dmap(m,p) = sqrt(density1(m,p).*density2(m,p)); % Similarity map
	end
end
L2D = 1 - sum(sum(L2Dmap))
S2D = sum(sum(S2Dmap))
D2Dtmp(1,1) = max(max(abs(CDF1_Q1 - CDF2_Q1),[],1)); %Maximum absolute difference for Quadrant 1
D2Dtmp(1,2) = max(max(abs(CDF1_Q2 - CDF2_Q2),[],1)); %Maximum absolute difference for Quadrant 2
D2Dtmp(1,3) = max(max(abs(CDF1_Q3 - CDF2_Q3),[],1)); %Maximum absolute difference for Quadrant 3
D2Dtmp(1,4) = max(max(abs(CDF1_Q4 - CDF2_Q4),[],1)); %Maximum absolute difference for Quadrant 4
D2Dtmp(1,5) = max(max(abs(CDF1_Q1 - CDF2_Q1),[],2)); %Maximum absolute difference for Quadrant 1
D2Dtmp(1,6) = max(max(abs(CDF1_Q2 - CDF2_Q2),[],2)); %Maximum absolute difference for Quadrant 2
D2Dtmp(1,7) = max(max(abs(CDF1_Q3 - CDF2_Q3),[],2)); %Maximum absolute difference for Quadrant 3
D2Dtmp(1,8) = max(max(abs(CDF1_Q4 - CDF2_Q4),[],2)); %Maximum absolute difference for Quadrant 4
D2D = max(D2Dtmp)
V2Dtmp(1,1) = max( max(CDF1_Q1 - CDF2_Q1,[],1) + max(CDF2_Q1 - CDF1_Q1,[],1) );
V2Dtmp(1,2) = max( max(CDF1_Q2 - CDF2_Q2,[],1) + max(CDF2_Q2 - CDF1_Q2,[],1) );
V2Dtmp(1,3) = max( max(CDF1_Q3 - CDF2_Q3,[],1) + max(CDF2_Q3 - CDF1_Q3,[],1) );
V2Dtmp(1,4) = max( max(CDF1_Q4 - CDF2_Q4,[],1) + max(CDF2_Q4 - CDF1_Q4,[],1) );
V2Dtmp(1,5) = max( max(CDF1_Q1 - CDF2_Q1,[],2) + max(CDF2_Q1 - CDF1_Q1,[],2) );
V2Dtmp(1,6) = max( max(CDF1_Q2 - CDF2_Q2,[],2) + max(CDF2_Q2 - CDF1_Q2,[],2) );
V2Dtmp(1,7) = max( max(CDF1_Q3 - CDF2_Q3,[],2) + max(CDF2_Q3 - CDF1_Q3,[],2) );
V2Dtmp(1,8) = max( max(CDF1_Q4 - CDF2_Q4,[],2) + max(CDF2_Q4 - CDF1_Q4,[],2) );
V2D = max(V2Dtmp)

%make figures parts A and B
F1 = figure;
hold on
[counts binCenters] = hist(AgeHf1(:,1), bins);
bar(binCenters, counts,'b');
plot(x,kde1*(1/(max(kde1)/max(counts+10))),'Color','b','LineWidth',3) %KDE scaled to the histogram
plot([xmin;sort(AgeHf1(:,1));xmax],cdf1*max(kde1.*(1/(max(kde1)/max(counts+10)))),'LineWidth',5,'Color','b') %CDF scaled to the histogram
axis([xmin xmax 0 max(counts)+10])

F2 = figure;
hold on
[counts binCenters] = hist(AgeHf2(:,1), bins);
bar(binCenters, counts,'r');
plot(x,kde2*(1/(max(kde1)/max(counts+10))),'Color','r','LineWidth',3) %KDE scaled to the histogram
plot([xmin;sort(AgeHf2(:,1));xmax],cdf2*max(kde2.*(1/(max(kde2)/max(counts+10)))),'LineWidth',5,'Color','r') %CDF scaled to the histogram
axis([xmin xmax 0 max(counts)+10])

F3 = figure;
surf(X1,Y1,density1);
colormap(cmap)
shading interp
view(2)
grid off
%axis square
axis([xmin xmax ymin ymax])
view(-29.1, 53.4)

F4 = figure;
surf(X2,Y2,density2);
colormap(cmap)
shading interp
view(2)
grid off
%axis square
axis([xmin xmax ymin ymax])
view(-29.1, 53.4)

F5 = figure;
contour3(X1,Y1,density1,[max_density_conf1 max_density_conf1],'b', 'LineWidth', 3);
grid off
view(2)
view(-29.1, 53.4)

F6 = figure;
contour3(X2,Y2,density2,[max_density_conf2 max_density_conf2],'r', 'LineWidth', 3);
grid off
view(2)
view(-29.1, 53.4)

F7 = figure;
surf(X1,Y1,cdf2d1);
colormap(cmap)
shading interp
view(2)
grid off
axis([xmin xmax ymin ymax])
view(-29.1, 53.4)

F8 = figure;
surf(X1,Y1,cdf2d2);
colormap(cmap)
shading interp
view(2)
grid off
axis([xmin xmax ymin ymax])
view(-29.1, 53.4)

F9 = figure;
contour3(X1,Y1,cdf2d1,[max_2dcdf1_conf max_2dcdf1_conf],'r', 'LineWidth', 3);
grid off
view(2)
view(-29.1, 53.4)

F10 = figure;
contour3(X1,Y1,cdf2d2,[max_2dcdf2_conf max_2dcdf2_conf],'r', 'LineWidth', 3);
grid off
view(2)
view(-29.1, 53.4)

figure
scatter (AgeHf1(:,1),AgeHf1(:,2),100,'d','MarkerEdgeColor','k','MarkerFaceColor','b')
axis([xmin xmax ymin ymax])

figure
scatter (AgeHf2(:,1),AgeHf2(:,2),100,'d','MarkerEdgeColor','k','MarkerFaceColor','r')
axis([xmin xmax ymin ymax])

figure
scatter (AgeHf1(:,1),zeros(length(AgeHf1(:,1)),1),100,'d','MarkerEdgeColor','k','MarkerFaceColor','b')
axis([xmin xmax ymin ymax])

figure
scatter (AgeHf2(:,1),zeros(length(AgeHf2(:,1)),1),100,'d','MarkerEdgeColor','k','MarkerFaceColor','r')
axis([xmin xmax ymin ymax])

% option to save figures
%{
[file,path] = uiputfile('*.eps','Save file'); print(F1,'-depsc',[path file]); % save 1D plot
[file,path] = uiputfile('*.eps','Save file'); print(F2,'-depsc',[path file]); % save 1D plot
[file,path] = uiputfile('*.eps','Save file'); print(F3,'-depsc',[path file]); % save bivariate KDE
[file,path] = uiputfile('*.eps','Save file'); print(F4,'-depsc',[path file]); % save bivariate KDE
[file,path] = uiputfile('*.eps','Save file'); print(F5,'-depsc','-painters',[path file]); epsclean([path file]); % save simplified contours 
[file,path] = uiputfile('*.eps','Save file'); print(F6,'-depsc','-painters',[path file]); epsclean([path file]); % save simplified contours 
[file,path] = uiputfile('*.eps','Save file'); print(F7,'-depsc',[path file]); % save 2D CDF
[file,path] = uiputfile('*.eps','Save file'); print(F8,'-depsc',[path file]); % save 2D CDF
[file,path] = uiputfile('*.eps','Save file'); print(F9,'-depsc','-painters',[path file]); epsclean([path file]); % save simplified contours 
[file,path] = uiputfile('*.eps','Save file'); print(F10,'-depsc','-painters',[path file]); epsclean([path file]); % save simplified contours 
%}

% FUNCTION FILES FOLLOW %

%% KDE function with Gaussian kernel
function [a] = kde(m, s, xmin, xmax, xint)
x = xmin:xint:xmax;
n = length(m);
f = zeros(n,length(x));
for i = 1:n;
	f(i,:) = (1./ (s(i)*sqrt(2*pi)) .* exp (  (-((x-m(i)).^2)) ./ (2*((s(i)).^2))  ).*xint); % Gaussian
end
a = (sum(f))/n; %sum and normalize
end

%% Cross correlation
function [b] = r2(x, y)

x = x;
y = y;

lengthx = length(x);

xmean = mean(x);
ymean = mean(y);

xcov = zeros(1,length(x));
ycov = zeros(1,length(y));

for i = 1:lengthx;
    xcov(i) = x(i) - xmean;
end

for i = 1:lengthx;
    ycov(i) = y(i) - ymean;
end

xcov = transpose (xcov);
ycov = transpose (ycov);

mult = xcov.*ycov;
numerator = sum(mult);

xcov2 = xcov.*xcov;
sumxcov2 = sum(xcov2);
ycov2 = ycov.*ycov;
sumycov2 = sum(ycov2);
mult2 = sumxcov2*sumycov2;
denominator = sqrt(mult2);

r = numerator/denominator;

b = r*r;

end

%% 2D KDE 
%algorithm and function follows, all sourced from
%https://github.com/rctorres/Matlab/blob/master/kde2d.m or 
%https://www.mathworks.com/matlabcentral/mlc-downloads/downloads/submissions/17204/versions/5/previews/kde2d.m/index.html
%Modified by Sundell -- added bandwidth_x and bandwidth_y to the original code for set bandwidths (i.e., no Botev et al. (2010) algorithm)
function [bandwidth,density,X,Y]=kde2d_set_kernel(data,n,MIN_XY,MAX_XY,bandwidth_x,bandwidth_y) 
% bivariate kernel density estimator
% with diagonal bandwidth matrix.
% The kernel is assumed to be Gaussian.
% The two bandwidth parameters are
% chosen optimally without ever
% using/assuming a parametric model for the data or any "rules of thumb".
% Unlike many other procedures, this one
% is immune to accuracy failures in the estimation of
% multimodal densities with widely separated modes (see examples).
% INPUTS: data - an N by 2 array with continuous data
%            n - size of the n by n grid over which the density is computed
%                n has to be a power of 2, otherwise n=2^ceil(log2(n));
%                the default value is 2^8;
% MIN_XY,MAX_XY- limits of the bounding box over which the density is computed;
%                the format is:
%                MIN_XY=[lower_Xlim,lower_Ylim]
%                MAX_XY=[upper_Xlim,upper_Ylim].
%                The dafault limits are computed as:
%                MAX=max(data,[],1); MIN=min(data,[],1); Range=MAX-MIN;
%                MAX_XY=MAX+Range/4; MIN_XY=MIN-Range/4;
% OUTPUT: bandwidth - a row vector with the two optimal
%                     bandwidths for a bivaroate Gaussian kernel;
%                     the format is:
%                     bandwidth=[bandwidth_X, bandwidth_Y];
%          density  - an n by n matrix containing the density values over the n by n grid;
%                     density is not computed unless the function is asked for such an output;
%              X,Y  - the meshgrid over which the variable "density" has been computed;
%                     the intended usage is as follows:
%                     surf(X,Y,density)
% Example (simple Gaussian mixture)
% clear all
%   % generate a Gaussian mixture with distant modes
%   data=[randn(500,2);
%       randn(500,1)+3.5, randn(500,1);];
%   % call the routine
%     [bandwidth,density,X,Y]=kde2d(data);
%   % plot the data and the density estimate
%     contour3(X,Y,density,50), hold on
%     plot(data(:,1),data(:,2),'r.','MarkerSize',5)
%
% Example (Gaussian mixture with distant modes):
%
% clear all
%  % generate a Gaussian mixture with distant modes
%  data=[randn(100,1), randn(100,1)/4;
%      randn(100,1)+18, randn(100,1);
%      randn(100,1)+15, randn(100,1)/2-18;];
%  % call the routine
%    [bandwidth,density,X,Y]=kde2d(data);
%  % plot the data and the density estimate
%  surf(X,Y,density,'LineStyle','none'), view([0,60])
%  colormap hot, hold on, alpha(.8)
%  set(gca, 'color', 'blue');
%  plot(data(:,1),data(:,2),'w.','MarkerSize',5)
%
% Example (Sinusoidal density):
%
% clear all
%   X=rand(1000,1); Y=sin(X*10*pi)+randn(size(X))/3; data=[X,Y];
%  % apply routine
%  [bandwidth,density,X,Y]=kde2d(data);
%  % plot the data and the density estimate
%  surf(X,Y,density,'LineStyle','none'), view([0,70])
%  colormap hot, hold on, alpha(.8)
%  set(gca, 'color', 'blue');
%  plot(data(:,1),data(:,2),'w.','MarkerSize',5)
%
%  Reference:
% Kernel density estimation via diffusion
% Z. I. Botev, J. F. Grotowski, and D. P. Kroese (2010)
% Annals of Statistics, Volume 38, Number 5, pages 2916-2957.

global N A2 I
if nargin<2
    n=2^8;
end
n=2^ceil(log2(n)); % round up n to the next power of 2;
N=size(data,1);
if nargin<3
    MAX=max(data,[],1); MIN=min(data,[],1); Range=MAX-MIN;
    MAX_XY=MAX+Range/2; MIN_XY=MIN-Range/2;
end
scaling=MAX_XY-MIN_XY;
if N<=size(data,2)
    error('data has to be an N by 2 array where each row represents a two dimensional observation')
end
transformed_data=(data-repmat(MIN_XY,N,1))./repmat(scaling,N,1);
%bin the data uniformly using regular grid;
initial_data=ndhist(transformed_data,n);

% discrete cosine transform of initial data
a= dct2d(initial_data);

% now compute the optimal bandwidth^2
  I=(0:n-1).^2; A2=a.^2;
 t_star=root(@(t)(t-evolve(t)),N);
p_02=func([0,2],t_star);p_20=func([2,0],t_star); p_11=func([1,1],t_star);

t_x=(p_20^(3/4)/(4*pi*N*p_02^(3/4)*(p_11+sqrt(p_20*p_02))))^(1/3);
t_y=(p_02^(3/4)/(4*pi*N*p_20^(3/4)*(p_11+sqrt(p_20*p_02))))^(1/3);

%bandwidth_opt = sqrt([t_x,t_y]).*scaling;

% Sundell modified this bit for set kernels
bandwidth = [bandwidth_x, bandwidth_y];
t_x = (bandwidth_x(1,1)/scaling(1,1))^2;
t_y = (bandwidth_y(1,1)/scaling(1,2))^2;

% smooth the discrete cosine transform of initial data using t_star
a_t=exp(-(0:n-1)'.^2*pi^2*t_x/2)*exp(-(0:n-1).^2*pi^2*t_y/2).*a; 

% now apply the inverse discrete cosine transform
if nargout>1
    density=idct2d(a_t)*(numel(a_t)/prod(scaling));
	density(density<0)=eps; % remove any negative density values
    [X,Y]=meshgrid(MIN_XY(1):scaling(1)/(n-1):MAX_XY(1),MIN_XY(2):scaling(2)/(n-1):MAX_XY(2));
end

end
%#######################################
function  [out,time]=evolve(t)
global N
Sum_func = func([0,2],t) + func([2,0],t) + 2*func([1,1],t);
time=(2*pi*N*Sum_func)^(-1/3);
out=(t-time)/time;
end
%#######################################
function out=func(s,t)
global N
if sum(s)<=4
    Sum_func=func([s(1)+1,s(2)],t)+func([s(1),s(2)+1],t); const=(1+1/2^(sum(s)+1))/3;
    time=(-2*const*K(s(1))*K(s(2))/N/Sum_func)^(1/(2+sum(s)));
    out=psi(s,time);
else
    out=psi(s,t);
end

end
%#######################################
function out=psi(s,Time)
global I A2
% s is a vector
w=exp(-I*pi^2*Time).*[1,.5*ones(1,length(I)-1)];
wx=w.*(I.^s(1));
wy=w.*(I.^s(2));
out=(-1)^sum(s)*(wy*A2*wx')*pi^(2*sum(s));
end
%#######################################
function out=K(s)
out=(-1)^s*prod((1:2:2*s-1))/sqrt(2*pi);
end
%#######################################
function data=dct2d(data)
% computes the 2 dimensional discrete cosine transform of data
% data is an nd cube
[nrows,ncols]= size(data);
if nrows~=ncols
    error('data is not a square array!')
end
% Compute weights to multiply DFT coefficients
w = [1;2*(exp(-i*(1:nrows-1)*pi/(2*nrows))).'];
weight=w(:,ones(1,ncols));
data=dct1d(dct1d(data)')';
    function transform1d=dct1d(x)

        % Re-order the elements of the columns of x
        x = [ x(1:2:end,:); x(end:-2:2,:) ];

        % Multiply FFT by weights:
        transform1d = real(weight.* fft(x));
    end
end
%#######################################
function data = idct2d(data)
% computes the 2 dimensional inverse discrete cosine transform
[nrows,ncols]=size(data);
% Compute wieghts
w = exp(i*(0:nrows-1)*pi/(2*nrows)).';
weights=w(:,ones(1,ncols));
data=idct1d(idct1d(data)');
    function out=idct1d(x)
        y = real(ifft(weights.*x));
        out = zeros(nrows,ncols);
        out(1:2:nrows,:) = y(1:nrows/2,:);
        out(2:2:nrows,:) = y(nrows:-1:nrows/2+1,:);
    end
end
%#######################################
function binned_data=ndhist(data,M)
% this function computes the histogram
% of an n-dimensional data set;
% 'data' is nrows by n columns
% M is the number of bins used in each dimension
% so that 'binned_data' is a hypercube with
% size length equal to M;
[nrows,ncols]=size(data);
bins=zeros(nrows,ncols);
for i=1:ncols
    [dum,bins(:,i)] = histc(data(:,i),[0:1/M:1],1);
    bins(:,i) = min(bins(:,i),M);
end
% Combine the  vectors of 1D bin counts into a grid of nD bin
% counts.
binned_data = accumarray(bins(all(bins>0,2),:),1/nrows,M(ones(1,ncols)));
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function t=root(f,N)
% try to find smallest root whenever there is more than one
N=50*(N<=50)+1050*(N>=1050)+N*((N<1050)&(N>50));
tol=10^-12+0.01*(N-50)/1000;
flag=0;
while flag==0
    try
        t=fzero(f,[0,tol]);
        flag=1;
    catch
        tol=min(tol*2,.1); % double search interval
    end
    if tol==.1 % if all else fails
        t=fminbnd(@(x)abs(f(x)),0,.1); flag=1;
    end
end
end

%% cell2num 
%sourced from https://www.mathworks.com/matlabcentral/fileexchange/15306-cell2num
function [outputmat]=cell2num(inputcell)
% Function to convert an all numeric cell array to a double precision array
% ********************************************
% Usage: outputmatrix=cell2num(inputcellarray)
% ********************************************
% Output matrix will have the same dimensions as the input cell array
% Non-numeric cell contest will become NaN outputs in outputmat
% This function only works for 1-2 dimensional cell arrays

if ~iscell(inputcell), error('Input cell array is not.'); end

outputmat=zeros(size(inputcell));

for c=1:size(inputcell,2)
  for r=1:size(inputcell,1)
    if isnumeric(inputcell{r,c})
      outputmat(r,c)=inputcell{r,c};
    else
      outputmat(r,c)=NaN;
    end
  end  
end

end

%% EPSCLEAN 
%from https://github.com/Conclusio/matlab-epsclean
function epsclean( file, varargin )
% EPSCLEAN Cleans up a MATLAB exported .eps file.
%
%   EPSCLEAN(F,...) cleans the .eps file F without removing box elements and optional parameters.
%   EPSCLEAN(F,O,...) cleans the .eps file F, writes the result to file O and optional parameters.
%   EPSCLEAN(F,O,R,G) (deprecated) cleans the .eps file F, writes the result to file O and optionally removes box
%                     elements if R = true. Optionally it groups elements 'softly' if G = true.
%
%   Optional parameters (key/value pairs) - see examples below
%   - outFile      ... Defines the output file for the result. Default is overwriting the input file.
%   - groupSoft    ... Groups elements only if they occur sequentially. Can help with Z-order problems. Defaults to false.
%   - combineAreas ... Combines filled polygons to larger ones. Can help with artifacts. Defaults to false.
%   - removeBoxes  ... Removes box (rectangle) elements. Defaults to false.
%   - closeGaps    ... For every filled polygon, also draw a fine polyline to close potential gaps between adjacent polygon areas. Defaults to false.
%   - gapWidth     ... The width of polylines to cover gaps. Defaults to 0.01.
%
%   When exporting a figure with Matlab's 'saveas' function to vector graphics multiple things might occur:
%   - Paths are split up into multiple segments and white lines are created on patch objects
%     see https://de.mathworks.com/matlabcentral/answers/290313-why-is-vector-graphics-chopped-into-pieces
%   - There are unnecessary box elements surrounding the paths
%   - Lines which actually should be continuous are split up in small line segments
%
%   Especially the fragmentation is creating highly unusable vector graphics for further post-processing.
%   This function fixes already exported figures in PostScript file format by grouping paths together according to their
%   properties (line width, line color, transformation matrix, ...). Small line segments which logically should belong
%   together are replaced by one continous line.
%   It also removes paths with 're' (rectangle) elements when supplying the parameter 'removeBoxes' with true.
%   In case the 'groupSoft' parameter is true it does not group elements according to their properties over the whole
%   document. It will rather group them only if the same elements occur sequentially, but not if they are interrupted by
%   elements with different properties. This will result in more fragmentation, but the Z-order will be kept intact. Use
%   this (set to true) if you have trouble with the Z-order.
%   If the 'combineAreas' parameter is true it combines filled polygons with the same properties to larger polygons of
%   the same type. It reduces clutter and white-line artifacts. The downside is that it's about 10 times slower.
%
%   Example 1
%   ---------
%       z = peaks;
%       contourf(z);
%       print(gcf,'-depsc','-painters','out.eps');
%       epsclean('out.eps'); % cleans and overwrites the input file
%       epsclean('out.eps','clean.eps'); % leaves the input file intact
%       epsclean('out.eps','clean.eps','combineAreas',true); % result in 'clean.eps', combines polygon areas
%       epsclean('out.eps','groupSoft',true,'combineAreas',true); % overwrites file, combines polygons, Z-order preserved
%
%   Example 2
%   ---------
%       [X,Y,Z] = peaks(100);
%       [~,ch] = contourf(X,Y,Z);
%       ch.LineStyle = 'none';
%       ch.LevelStep = ch.LevelStep/10;
%       colormap('hot')
%       saveas(gcf, 'out.eps', 'epsc');
%       epsclean('out.eps');
%
%   Notes
%   -----
%   - A block is a starting with GS (gsave) and ends with GR (grestore)
%   - Only text after %%EndPageSetup is analyzed
%   - Removing boxes will also remove the clipping area (if any)
%   - Tested on Windows with Matlab R2016b
%
%   Changes
%   -------
%   2017-04-03 (YYYY-MM-DD)
%   - Line segments with the same properties are converted to one continous polyline
%      o As a side effect this will cause multiple equal lines on top of each other to merge
%   - The Z-order of elements can be preserved by using 'groupSoft = true'
%      o See https://github.com/Conclusio/matlab-epsclean/issues/6
%      o This will cause additional fragmentation which might or might not be what you want
%   2017-04-18 (YYYY-MM-DD)
%   - Major performance increase for creating the adjacency matrix (for creating continous polylines)
%   - A lot of other performance enhancements
%   2017-05-28 (YYYY-MM-DD)
%   - Added the possibility to merge adjacent polygons to avoid artifacts
%     o See https://github.com/Conclusio/matlab-epsclean/issues/9
%   - Changed argument style
%   2018-04-12 (YYYY-MM-DD)
%   - Added parameter 'closeGaps' to hide lines between filled areas
%     o See https://github.com/Conclusio/matlab-epsclean/issues/9
%   - Added parameter 'gapWidth' to control the line width
%
%   ------------------------------------------------------------------------------------------
%   Copyright 2017,2018, Stefan Spelitz, Vienna University of Technology (TU Wien).
%   This code is distributed under the terms of the GNU Lesser General Public License (LGPL).
%
%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU Lesser General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
% 
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU Lesser General Public License for more details.
% 
%   You should have received a copy of the GNU Lesser General Public License
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.

% default values:
removeBoxes = false;
groupSoft = false;
combineAreas = false;
closeGaps = false;
gapWidth = 0.01;
outfile = file;

fromIndex = 1;
% check for old argument style (backward compatibility)
if nargin >= 2 && ischar(varargin{1}) && ~strcmpi(varargin{1},'removeBoxes') && ~strcmpi(varargin{1},'groupSoft') && ~strcmpi(varargin{1},'combineAreas') && ~strcmpi(varargin{1},'closeGaps') && ~strcmpi(varargin{1},'gapWidth')
    fromIndex = 2;
    outfile = varargin{1};
    if nargin >= 3
        if islogical(varargin{2})
            fromIndex = 3;
            removeBoxes = varargin{2};
            if nargin >= 4 && islogical(varargin{3})
                fromIndex = 4;
                groupSoft = varargin{3};
            end
        end
    end
end

p = inputParser;
p.CaseSensitive = false;
p.KeepUnmatched = false;

addParameter(p,'outFile',outfile,@ischar);
addParameter(p,'removeBoxes',removeBoxes,@islogical);
addParameter(p,'groupSoft',groupSoft,@islogical);
addParameter(p,'combineAreas',combineAreas,@islogical);
addParameter(p,'closeGaps',closeGaps,@islogical);
addParameter(p,'gapWidth',gapWidth,@isfloat);

parse(p,varargin{fromIndex:end});
outfile = p.Results.outFile;
removeBoxes = p.Results.removeBoxes;
groupSoft = p.Results.groupSoft;
combineAreas = p.Results.combineAreas;
closeGaps = p.Results.closeGaps;
gapWidth = p.Results.gapWidth;

keepInput = true;
if strcmp(file, outfile)
    outfile = [file '_out']; % tmp file
    keepInput = false;
end

fid1 = fopen(file,'r');
fid2 = fopen(outfile,'W');

previousBlockPrefix = [];
operation = -1; % -1 .. wait for 'EndPageSetup', 0 .. wait for blocks, 1 .. create id, 2 .. analyze block content, 3 .. analyzed
insideAxg = false;
blockGood = true;
hasLineCap = false;
isDashMode = false;
blockList = [];

nested = 0;
lastMLine = [];
lastLLine = [];
blockMap = containers.Map(); % key=blockPrefix -> MAP with connection information and content for blocks

% current block (cb) data:
cbPrefix = '';
cbContentLines = -ones(1,100);
cbContentLinesFull = -ones(1,100);
cbContentLinesIdx = 1;
cbContentLinesFullIdx = 1;
cbConn = {};
cbIsFill = false;

% load whole file into memory:
fileContent = textscan(fid1,'%s','delimiter','\n','whitespace','');
fileContent = fileContent{1}';
lineCount = length(fileContent);
lineIdx = 0;

while lineIdx < lineCount
    lineIdx = lineIdx + 1;
    thisLine = cell2mat(fileContent(lineIdx));
    
    % normal read until '%%EndPageSetup'
    if operation == -1
        if closeGaps && startsWith(thisLine,'/f/fill')
            fileContent(lineIdx) = { sprintf('/f{GS %.5f setlinewidth S GR fill}bd', gapWidth) };
        elseif equalsWith(thisLine, '%%EndPageSetup')
            operation = 0;
            fprintf(fid2, '%s\n', strjoin(fileContent(1:lineIdx),'\n')); % dump prolog
        end
        continue;
    end
    
    if operation == 3 % block was analyzed
        if blockGood
            if groupSoft && ~strcmp(cbPrefix, previousBlockPrefix)
                % SOFT GROUPING. different block -> dump all existent ones except the current one

                currentBlock = [];
                if blockMap.isKey(cbPrefix)
                    currentBlock = blockMap(cbPrefix);
                    blockMap.remove(cbPrefix);
                end
                
                writeBlocks(blockList, blockMap, fid2, fileContent);
                
                blockList = [];
                blockMap = containers.Map();
                if ~isempty(currentBlock)
                    blockMap(cbPrefix) = currentBlock;
                end
            end

            [cbNewBlock,oldConn,oldConnFill] = getBlockData(blockMap,cbPrefix);
            removeLastContentLine = false;
            if cbIsFill
                if combineAreas
                    oldConnFill = [oldConnFill cbConn]; %#ok<AGROW>
                else
                    removeLastContentLine = true;
                end
            else
                oldConn = [oldConn cbConn]; %#ok<AGROW>
            end
            setBlockData(blockMap,cbPrefix,cbContentLines(1:cbContentLinesIdx-1),oldConn,oldConnFill,removeLastContentLine);
            if cbNewBlock
                % new block
                block = struct('prefix', cbPrefix);
                blockList = [blockList block]; %#ok<AGROW>
            end
        end
        operation = 0;
        previousBlockPrefix = cbPrefix;
        cbPrefix = '';
    end


    if operation == 0 % waiting for blocks
        if equalsWith(thisLine,'GS')
            % start of a block
            operation = 1;
            hasLineCap = false;
            isDashMode = false;
            nested = 0;
        elseif equalsWith(thisLine,'%%Trailer')
            % end of figures -> dump all blocks
            writeBlocks(blockList, blockMap, fid2, fileContent);
            fprintf(fid2, '%s\n', thisLine);
        elseif equalsWith(thisLine,'GR')
            % unexpected GR before a corresponding GS -> ignore
        else
            % not inside a block and not the start of a block -> just take it
            fprintf(fid2, '%s\n', thisLine);
        end
    elseif operation == 1 % inside GS/GR block
        % build prefix
        if startsWith(thisLine,'%AXGBegin')
            % this could be the beginning of a raw bitmap data block -> just take it
            insideAxg = true;
            cbPrefix = sprintf('%s%s\n',cbPrefix, thisLine);
        elseif startsWith(thisLine,'%AXGEnd')
            insideAxg = false;
            cbPrefix = sprintf('%s%s\n',cbPrefix, thisLine);
        elseif insideAxg
            cbPrefix = sprintf('%s%s\n',cbPrefix, thisLine);
        elseif equalsWith(thisLine,'N')
            % begin analyzing
            operation = 2;
            blockGood = true;
            cbContentLinesIdx = 1;
            cbContentLinesFullIdx = 1;
            lastMLine = [];
            cbConn = {};
            cbIsFill = false;
        elseif equalsWith(thisLine,'GS')
            nested = nested + 1;
            cbPrefix = sprintf('%s%s\n',cbPrefix, thisLine);
        elseif equalsWith(thisLine,'GR')
            nested = nested - 1;
            if nested >= 0
                cbPrefix = sprintf('%s%s\n',cbPrefix, thisLine);
            else
                % end of block without a 'N' = newpath command
                % we don't know what it is, but we take it as a whole
                operation = 3;
                blockGood = true;
                cbContentLinesIdx = 1;
                cbContentLinesFullIdx = 1;
                cbConn = {};
                cbIsFill = false;
            end
        elseif endsWith(thisLine,'setdash')
            isDashMode = true;
            cbPrefix = sprintf('%s%s\n',cbPrefix, thisLine);
        elseif endsWith(thisLine,'setlinecap')
            hasLineCap = true;
            cbPrefix = sprintf('%s%s\n',cbPrefix, thisLine);
        elseif endsWith(thisLine,'LJ')
            if hasLineCap
                cbPrefix = sprintf('%s%s\n',cbPrefix, thisLine);
            elseif ~isDashMode
                % add '1 linecap' if no linecap is specified
                cbPrefix = sprintf('%s%s\n%s\n',cbPrefix,'1 setlinecap',thisLine);
            end
        else
            cbPrefix = sprintf('%s%s\n',cbPrefix, thisLine);
        end
    elseif operation == 2 % analyze block content
        if startsWith(thisLine,'%AXGBegin')
            % this could be the beginning of a raw bitmap data block -> just take it
            insideAxg = true;
            [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,true);
        elseif startsWith(thisLine,'%AXGEnd')
            insideAxg = false;
            [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,true);
        elseif insideAxg
            [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,true);
        elseif endsWith(thisLine,'re')
            if removeBoxes
                blockGood = false;
            else
                [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,true);
            end
        elseif equalsWith(thisLine,'clip')
            cbPrefix = sprintf('%sN\n%s\n%s\n', cbPrefix, strjoin(fileContent(cbContentLinesFull(1:cbContentLinesFullIdx-1))), thisLine);
            cbContentLinesIdx = 1;
            cbContentLinesFullIdx = 1;
            cbConn = {};
            cbIsFill = false;
        elseif endsWith(thisLine,'M')
            lastMLine = thisLine;
            lineIdx = lineIdx + 1;
            nextline = cell2mat(fileContent(lineIdx)); % ASSUMPTION: there is an L directly after an M
            lastLLine = nextline;
            
            moveId = thisLine(1:end-1);
            lineId = nextline(1:end-1);
            
            [cbConn] = addConnection(moveId,lineId,cbConn);
            [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx-1,false);
            [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,false);
        elseif equalsWith(thisLine,'cp')
            moveId = lastLLine(1:end-1);
            lineId = lastMLine(1:end-1);
            lastLLine = lastMLine;

            [cbConn] = addConnection(moveId,lineId,cbConn);
            [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,false);
        elseif endsWith(thisLine,'L')
            moveId = lastLLine(1:end-1);
            lineId = thisLine(1:end-1);
            lastLLine = thisLine;

            [cbConn] = addConnection(moveId,lineId,cbConn);
            [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,false);
        elseif equalsWith(thisLine,'S')
            % ignore stroke command
        elseif equalsWith(thisLine,'f')
            % special handling for filled areas
            cbIsFill = true;
            if combineAreas
                lastLine = cell2mat(fileContent(lineIdx-1));
                if ~equalsWith(lastLine, 'cp')
                    [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,true);
                end
            else
                [~,cbContentLinesFull,~,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,false);
                cbContentLines = cbContentLinesFull;
                cbContentLinesIdx = cbContentLinesFullIdx;
                % remove all connections:
                cbConn = {};
            end
        elseif equalsWith(thisLine,'GS')
            nested = nested + 1;
            [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,true);
        elseif equalsWith(thisLine,'GR')
            % end of block content
            nested = nested - 1;
            if nested >= 0
                [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,true);
            else
                operation = 3; % end of block content
            end
        else
            [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,true);
        end
    end
        
end %while

fclose(fid1);
fclose(fid2);

if ~keepInput
    delete(file);
    movefile(outfile, file, 'f');
end

end

function r = startsWith(string1, pattern)
    l = length(pattern);
    if length(string1) < l
        r = false;
    else
        r = strcmp(string1(1:l),pattern);
    end
end

function r = endsWith(string1, pattern)
    l = length(pattern);
    if length(string1) < l
        r = false;
    else
        r = strcmp(string1(end-l+1:end),pattern);
    end
end

function r = equalsWith(string1, pattern)
    r = strcmp(string1,pattern);
end

function [cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx] = addContent(cbContentLines,cbContentLinesFull,cbContentLinesIdx,cbContentLinesFullIdx,lineIdx,both)
    if cbContentLinesFullIdx > length(cbContentLinesFull)
        cbContentLinesFull = [cbContentLinesFull -ones(1,100)];
    end
    cbContentLinesFull(cbContentLinesFullIdx) = lineIdx;
    cbContentLinesFullIdx = cbContentLinesFullIdx + 1;

    if both
        if cbContentLinesIdx > length(cbContentLines)
            cbContentLines = [cbContentLines -ones(1,100)];
        end
        cbContentLines(cbContentLinesIdx) = lineIdx;
        cbContentLinesIdx = cbContentLinesIdx + 1;
    end
end

function setBlockData(blockMap,blockId,contentLines,conn,connFill,removeLastContentLine)
    if ~blockMap.isKey(blockId)
        return; % a block without nodes. shouldn't happen.
    end
    theblock = blockMap(blockId);
    if removeLastContentLine
        theblock.contentLines = [theblock.contentLines(1:end-1) contentLines];
    else
        theblock.contentLines = [theblock.contentLines contentLines];
    end    
    theblock.conn = conn;
    theblock.connFill = connFill;
    blockMap(blockId) = theblock; %#ok<NASGU>
end

function [newBlock,conn,connFill] = getBlockData(blockMap,blockId)
    if blockMap.isKey(blockId)
        newBlock = false;
        theblock = blockMap(blockId);
        conn = theblock.conn;
        connFill = theblock.connFill;
    else
        newBlock = true;
        conn = {};
        connFill = {};
        
        s = struct();
        s.contentLines = [];
        s.conn = conn;
        s.connFill = connFill;
        
        blockMap(blockId) = s; %#ok<NASGU>
    end
end

function [conn] = addConnection(nodeId1, nodeId2, conn)
    conn{1,end+1} = nodeId1; % from
    conn{2,end}   = nodeId2; % to
end

function [am,idx2idArray,edge2idxMat,connCount,total] = buildAdjacencyMatrix(conn)
    if isempty(conn)
        am = [];
        idx2idArray = [];
        edge2idxMat = [];
    else
        from = conn(1,:); % from nodes
        to = conn(2,:); % to nodes
        [idx2idArray,~,ic] = unique([from to]);

        fromIdx = ic(1:length(from));
        toIdx = ic(length(from)+1:end);
        edge2idxMat = [fromIdx' ; toIdx'];

        nodeCount = max(ic);
        am = false(nodeCount); % adjacency matrix

        idx1 = sub2ind(size(am),fromIdx,toIdx);
        idx2 = sub2ind(size(am),toIdx,fromIdx);
        idxD = sub2ind(size(am),1:nodeCount,1:nodeCount);
        am(idx1) = true;
        am(idx2) = true;
        am(idxD) = false; % diagonal
    end

    connCount = sum(am,1);
    total = sum(connCount,2);
end

function printLines(fileId,am,idx2idArray,connCount,total)
    if total == 0
        return;
    end

    fprintf(fileId, 'N\n');

    [~,sidx] = sort(connCount);
    for ni = sidx
        firstNode = -1;
        first = true;
        search = true;
        node = ni;

        while(search)
            neighbours = find(am(node,:));
            search = false;
            for nni = neighbours
                if ~am(node,nni)
                    continue; % edge visited
                end
                if first
                    fprintf(fileId, '%sM\n', cell2mat(idx2idArray(node)));
                    first = false;
                    firstNode = node;
                end
                am(node,nni) = false;
                am(nni,node) = false;
                if nni == firstNode
                    % closed path (polygon) -> use a 'closepath' command instead of a line
                    fprintf(fileId, 'cp\n');
                else
                    fprintf(fileId, '%sL\n', cell2mat(idx2idArray(nni)));
                end
                node = nni;
                search = true;
                break;
            end
        end
    end
    
    fprintf(fileId, 'S\n');
end

function printFills(fileId,am,idx2idArray,total,edge2idxMat)
    if total == 0
        return;
    end
    
    edgepolymat = zeros(size(am));
    edgeusemat = zeros(size(am));
    
    nodeCount = size(idx2idArray,2);
    edgeCount = size(edge2idxMat,2);
    polyIdxs = zeros(1,edgeCount);

    % determine connections -> polygon:
    polyIdx = 0;
    edge = 1;
    while true
        if edge <= edgeCount
            startIdx = edge2idxMat(1,edge);
        else
            break;
        end
        polyIdx = polyIdx + 1;
        
        while edge <= size(edge2idxMat,2)
            tidx = edge2idxMat(2,edge);
            polyIdxs(edge) = polyIdx;
            
            edge = edge + 1;
            if startIdx == tidx
                break; % polygon finished
            end
        end
    end
    
    % check whether or not a polygon has the same edge defined twice
    polyCount = polyIdx;
    selfEdges = false(1,polyCount);
    for ii = 1:polyCount
        selfEdges(ii) = hasEdgeWithItself(edge2idxMat,polyIdxs,ii);
    end    
    
    % check if there are initial self edges and if so, just pretend we have been visiting those polygons already:
    k=find(selfEdges);
    for kk = k
        ii = edge2idxMat(:,polyIdxs == kk);
        idxs1 = sub2ind(size(edgeusemat), ii(1,:), ii(2,:));
        idxs2 = sub2ind(size(edgeusemat), ii(2,:), ii(1,:));
        idxs = [idxs1 idxs2];
        edgeusemat(idxs) = edgeusemat(idxs) + 1;
        edgeusemat(idxs) = edgeusemat(idxs) + 1;
        edgepolymat(idxs) = kk;
        edgepolymat(idxs) = kk;
    end
    
    
    polyIdx = 0;
    edge = 1;
    initialEdgeCount = size(edge2idxMat,2);
    while true
        if edge <= initialEdgeCount
            startIdx = edge2idxMat(1,edge);
        else
            break;
        end
        polyIdx = polyIdx + 1;
        
        if selfEdges(polyIdx)
            % polygon has edge with itself, don't try to merge and skip polygon instead
            edge = edge + find(edge2idxMat(2,edge:end) == tidx,1);
        else
            handledPolyMap = containers.Map('KeyType','double','ValueType','any');

            while edge <= initialEdgeCount
                fidx = edge2idxMat(1,edge);
                tidx = edge2idxMat(2,edge);
                                
                removeEdge = false;
                nPolyIdx = edgepolymat(fidx,tidx);
                if nPolyIdx > 0
                    if ~selfEdges(nPolyIdx)
                        if handledPolyMap.isKey(nPolyIdx)
                            % leave the edge intact, except if it's connected to the shared edge
                            val = handledPolyMap(nPolyIdx);
                            f = val(1);
                            t = val(2);
                            connected = true;
                            if f == fidx
                                f = tidx;
                            elseif f == tidx
                                f = fidx;
                            elseif t == fidx
                                t = tidx;
                            elseif t == tidx
                                t = fidx;
                            else
                                connected = false;
                            end
                            if connected
                                fusage = sum(edgeusemat(fidx,:) > 0);
                                tusage = sum(edgeusemat(tidx,:) > 0);
                                removeEdge = (fusage == 1 || tusage == 1);
                                if removeEdge
                                    handledPolyMap(nPolyIdx) = [f t];
                                end
                            end
                        else
                            % remove the first common shared edge
                            handledPolyMap(nPolyIdx) = [fidx tidx];
                            removeEdge = true;
                        end
                    end
                else
                    edgepolymat(fidx,tidx) = polyIdx;
                    edgepolymat(tidx,fidx) = polyIdx;
                end
                
                if removeEdge
                    edgepolymat(fidx,tidx) = 0;
                    edgepolymat(tidx,fidx) = 0;
                    edgeusemat(fidx,tidx) = 0;
                    edgeusemat(tidx,fidx) = 0;
                    polyIdxs(edge) = 0;
                else
                    edgeusemat(fidx,tidx) = edgeusemat(fidx,tidx) + 1;
                    edgeusemat(tidx,fidx) = edgeusemat(tidx,fidx) + 1;
                end
                
                edge = edge + 1;
                if startIdx == tidx
                    break; % polygon finished
                end
            end

            % merge all handled polygons:
            for k = cell2mat(handledPolyMap.keys())
                edgepolymat(edgepolymat == k) = polyIdx;
                polyIdxs(polyIdxs == k) = polyIdx;
            end
            selfEdges(polyIdx) = hasEdgeWithItself(edge2idxMat,polyIdxs,polyIdx);
        end
    end
    
        
    
    connCount = sum(edgeusemat, 1);

    coordinates = zeros(nodeCount,2);
    remainingNodes = find(connCount);
    for c = remainingNodes
        coordinates(c,:) = extractCoords(idx2idArray(c));
    end

    fprintf(fileId, 'N\n');

    [~,sidx] = sort(connCount); % sort by lowest connection count
    for ni = sidx
        firstNode = -1;
        prevNode = -1;
        first = true;
        search = true;
        node = ni;
        unkLeftRight = 0;

        while(search)
            c = edgeusemat(node,:);
            [~,sidx2] = sort(c(c>0),'descend'); % sort by edge-usage (select higher usage first)
            neighbours = find(c);
            neighbours = neighbours(sidx2);
            neighbours(neighbours == prevNode) = []; % don't go backwards
            search = false;
            nidx = 0;
            for nni = neighbours
                nidx = nidx + 1;
                if edgeusemat(node,nni) == 0
                    continue; % edge already visited
                end
                
                if length(neighbours) >= 2
                    if unkLeftRight > 0
                        p = coordinates(prevNode,:);
                        c = coordinates(node,:);
                        n = coordinates(nni,:);
                        
                        valid = true;
                        for nni2 = neighbours
                            if nni2 == nni
                                continue;
                            end
                            
                            a = coordinates(nni2,:);
                            leftRight = isNodeRight(p,c,n,a);

                            if unkLeftRight ~= leftRight
                                valid = false;
                                break;
                            end
                        end
                        
                        if ~valid
                            continue; % other neighbour
                        end
                    elseif edgeusemat(node,nni) == 2 && prevNode ~= -1
                        % a double edge with more than one option -> remember which way we go (ccw or cw)
                        p = coordinates(prevNode,:); % previous node
                        c = coordinates(node,:); % current node
                        n = coordinates(nni,:); % next node
                        a = coordinates(neighbours(1 + ~(nidx-1)),:); % alternative node
                        
                        unkLeftRight = isNodeRight(p,c,n,a);
                    end
                end
                
                if first
                    fprintf(fileId, '%sM\n', cell2mat(idx2idArray(node)));
                    first = false;
                    firstNode = node;
                end
                
                edgeusemat(node,nni) = edgeusemat(node,nni) - 1;
                edgeusemat(nni,node) = edgeusemat(nni,node) - 1;
                if nni == firstNode
                    % closed path (polygon) -> use a 'closepath' command instead of a line
                    fprintf(fileId, 'cp\n');
                else
                    fprintf(fileId, '%sL\n', cell2mat(idx2idArray(nni)));
                end
                prevNode = node;
                node = nni;
                search = true;
                break;
            end
        end
    end
    
    fprintf(fileId, 'f\n');
end

function value = hasEdgeWithItself(id2idxMat,polyIdxs,polyIdx)
    % check if same edge exists twice in polygon
    edgePoly = id2idxMat(:,polyIdxs == polyIdx);
    edgePoly2 = [edgePoly(2,:) ; edgePoly(1,:)];
    [~,~,ic] = unique([edgePoly' ; edgePoly2'],'rows');
    ic = accumarray(ic,1); % count the number of identical elements
    value = any(ic > 1);
end

function leftRight = isNodeRight(p,c,n,a)
    v1 = c - p; v1 = v1 ./ norm(v1);
    v2 = n - c; v2 = v2 ./ norm(v2);
    v3 = a - c; v3 = v3 ./ norm(v3);

    s2 = sign(v2(1) * v1(2) - v2(2) * v1(1));
    side = s2 - sign(v3(1) * v1(2) - v3(2) * v1(1));
    if side == 0
        % both vectors on the same side
        if s2 == 1
            % both vectors left
            right = dot(v1,v2) > dot(v1,v3);
        else
            % both vectors right
            right = dot(v1,v2) < dot(v1,v3);
        end
    else
        right = side < 0;
    end
    
    leftRight = 1;
    if right
        leftRight = 2;
    end
end

function p = extractCoords(nodeId)
    nodeId = cell2mat(nodeId);
    k = strfind(nodeId, ' ');
    x = str2double(nodeId(1:k(1)));
    y = str2double(nodeId(k(1)+1:end));
    p = [x y];
end

function writeBlocks(blockList, blockMap, fileId, fileContent)
    for ii = 1:length(blockList)
        blockId = blockList(ii).prefix;
        fprintf(fileId, 'GS\n%s', blockId);
        
        theblock = blockMap(blockId);
        contentLines = theblock.contentLines;

        % build adjacency matrix from connections:
        [amL,idx2idArrayL,~,connCountL,totalL] = buildAdjacencyMatrix(theblock.conn);
        [amF,idx2idArrayF,edge2idxMatF,~,totalF] = buildAdjacencyMatrix(theblock.connFill);
        
        total = totalL + totalF;

        if total == 0
            if ~isempty(contentLines)
                if isempty(regexp(blockId, sprintf('clip\n$'), 'once')) % prefix does not end with clip
                    fprintf(fileId, 'N\n');
                end

                fprintf(fileId, '%s\n', strjoin(fileContent(contentLines),'\n'));
            end
        else
            printLines(fileId,amL,idx2idArrayL,connCountL,totalL);
            printFills(fileId,amF,idx2idArrayF,totalF,edge2idxMatF);

            if ~isempty(contentLines)
                fprintf(fileId, '%s\n', strjoin(fileContent(contentLines),'\n'));
            end
        end

        fprintf(fileId, 'GR\n');
    end
end

%% end of code